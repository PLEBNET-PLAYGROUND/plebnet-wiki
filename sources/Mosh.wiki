<span id="mosh"></span>
= Mosh =

<div class="mw-parser-output">

<div class="mw-pt-languages noprint" lang="en" dir="ltr">

<div class="mw-pt-languages-label">

Other languages:

</div>
<div class="mw-pt-languages-list">

<span class="mw-pt-languages-ui mw-pt-languages-selected mw-pt-progress mw-pt-progress--complete" lang="en">English</span>

</div>

</div>
Two of the discomforts of using a CLI to SSH into a node are:

* disconnections
* latency while typing

[https://mosh.org/ Mosh] solves these issues and provides a far superior user experience. The key differences are:

* Mosh uses a persistent UDP connection, sessions remain active even between disconnections or laptop lid closes.
* Mosh uses predictive typing (&quot;local echo&quot;) so typing feels instant, even on remote lightning nodes.

[https://linux.die.net/man/1/mosh Mosh man page].

<br />


<div id="toc" class="toc" role="navigation" aria-labelledby="mw-toc-heading">

<div class="toctitle" lang="en" dir="ltr">

<span id="mw-toc-heading"></span>
== Contents ==

<span class="toctogglespan"></span>

</div>
* [[#Client-side_and_server-side_installation|<span class="tocnumber">1</span> <span class="toctext">Client-side and server-side installation</span>]]
* [[#Usage|<span class="tocnumber">2</span> <span class="toctext">Usage</span>]]
* [[#use_over_slow_connections|<span class="tocnumber">3</span> <span class="toctext">use over slow connections</span>]]
* [[#Firewall_Settings|<span class="tocnumber">4</span> <span class="toctext">Firewall Settings</span>]]
* [[#Killing_Zombie_Sessions|<span class="tocnumber">5</span> <span class="toctext">Killing Zombie Sessions</span>]]


</div>
<span id="client-side-and-server-side-installation"></span>
== <span id="Client-side_and_server-side_installation" class="mw-headline">Client-side and server-side installation</span> ==

On linux:

<pre>   sudo apt-get install mosh</pre>
On OSX:

<pre>   brew install mosh</pre>
<br />


<span id="usage"></span>
== <span id="Usage" class="mw-headline">Usage</span> ==

Instead of typing:

<pre>   $ ssh ubuntu@X.X.X.X</pre>
You can use mosh:

<pre>   $ mosh ubuntu@X.X.X.X</pre>
If using a pem file for authentication, instead of:

<pre>   $ ssh -i ~/.ssh/my_key.pem ubuntu@X.X.X.X</pre>
Use:

<pre>   $ mosh --ssh='ssh -i ~/.ssh/my_key.pem' ubuntu@X.X.X.X</pre>
That's a rather long command, so you may want to consider setting up an alias, e.g

<pre>   $ alias m=&quot;mosh --ssh='ssh -i ~/.ssh/my_key.pem' ubuntu@X.X.X.X&quot;</pre>
<br />


<span id="use-over-slow-connections"></span>
== <span id="use_over_slow_connections" class="mw-headline">use over slow connections</span> ==

If you're moshing over a slow connection, or into a very distant lightning node:

<pre>   $ mosh --ssh='ssh -i ~/.ssh/my_key.pem' --predict=experimental ubuntu@X.X.X.X </pre>
Experimental prediction provides a totally seamless typing experience on your node, as if you were typing on your localhost's CLI.

<br />


<span id="firewall-settings"></span>
== <span id="Firewall_Settings" class="mw-headline">Firewall Settings</span> ==

Mosh uses UDP port 60001, so make sure you open this port in your firewall settings. If you close a terminal without terminating the session, the user can remain logged in, which then occupies the port. For this reason, you may also want to consider opening port 60002. Another option is to ssh in, to kill the zombie session.

<br />


<span id="killing-zombie-sessions"></span>
== <span id="Killing_Zombie_Sessions" class="mw-headline">Killing Zombie Sessions</span> ==

If you have a zombie session preventing you from moshing in, simply kill it with:

<pre>   $ who -u
   $ ubuntu   pts/1        2021-07-21 12:40   .         22056 (X.X.X.X via mosh [22056])</pre>
Then:

<pre>   $ pkill -9 22056</pre>

</div>
