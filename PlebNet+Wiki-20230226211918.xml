<mediawiki xmlns="http://www.mediawiki.org/xml/export-0.11/" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://www.mediawiki.org/xml/export-0.11/ http://www.mediawiki.org/xml/export-0.11.xsd" version="0.11" xml:lang="en">
  <siteinfo>
    <sitename>PlebNet Wiki</sitename>
    <dbname>bitnami_mediawiki</dbname>
    <base>http://plebnet.wiki/wiki/Main_Page</base>
    <generator>MediaWiki 1.36.1</generator>
    <case>first-letter</case>
    <namespaces>
      <namespace key="-2" case="first-letter">Media</namespace>
      <namespace key="-1" case="first-letter">Special</namespace>
      <namespace key="0" case="first-letter" />
      <namespace key="1" case="first-letter">Talk</namespace>
      <namespace key="2" case="first-letter">User</namespace>
      <namespace key="3" case="first-letter">User talk</namespace>
      <namespace key="4" case="first-letter">Bitnami MediaWiki</namespace>
      <namespace key="5" case="first-letter">Bitnami MediaWiki talk</namespace>
      <namespace key="6" case="first-letter">File</namespace>
      <namespace key="7" case="first-letter">File talk</namespace>
      <namespace key="8" case="first-letter">MediaWiki</namespace>
      <namespace key="9" case="first-letter">MediaWiki talk</namespace>
      <namespace key="10" case="first-letter">Template</namespace>
      <namespace key="11" case="first-letter">Template talk</namespace>
      <namespace key="12" case="first-letter">Help</namespace>
      <namespace key="13" case="first-letter">Help talk</namespace>
      <namespace key="14" case="first-letter">Category</namespace>
      <namespace key="15" case="first-letter">Category talk</namespace>
      <namespace key="1198" case="first-letter">Translations</namespace>
      <namespace key="1199" case="first-letter">Translations talk</namespace>
    </namespaces>
  </siteinfo>
  <page>
    <title>Anonymous edits and privacy</title>
    <ns>0</ns>
    <id>10</id>
    <revision>
      <id>783</id>
      <parentid>738</parentid>
      <timestamp>2021-10-02T19:46:00Z</timestamp>
      <contributor>
        <username>Lucasdcf</username>
        <id>27</id>
      </contributor>
      <comment>Marked this version for translation</comment>
      <origin>783</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="581" sha1="l4ins2rmidqc1czytrr02ezby8hr9my" xml:space="preserve">&lt;languages/&gt;
&lt;translate&gt;
&lt;!--T:1--&gt;
When editing pages on the PlebNet Wiki, '''please make extra sure that you are logged in'''. If you wish to remain anonymous, then please still create an account: eg anon123.

&lt;!--T:2--&gt;
The reason for this is, MediaWiki tracks and displays the IP addresses of anonymous edits. If you accidentally made an anonymous change, and would like the IP address removed, please contact an administrator, e.g via [https://t.me/bitcoin_opinion telegram], as this can be done.

&lt;!--T:3--&gt;
Administrators:
* Mads
* Walton
* Xenonfun
* Rajwinder
&lt;/translate&gt;</text>
      <sha1>l4ins2rmidqc1czytrr02ezby8hr9my</sha1>
    </revision>
  </page>
  <page>
    <title>Anonymous edits and privacy/en</title>
    <ns>0</ns>
    <id>385</id>
    <revision>
      <id>878</id>
      <timestamp>2021-10-02T19:47:30Z</timestamp>
      <contributor>
        <username>FuzzyBot</username>
        <id>29</id>
      </contributor>
      <comment>Updating to match new version of source page</comment>
      <origin>878</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="523" sha1="s3sl3gl9an527g6x7557rocnv64no36" xml:space="preserve">&lt;languages/&gt;
When editing pages on the PlebNet Wiki, '''please make extra sure that you are logged in'''. If you wish to remain anonymous, then please still create an account: eg anon123.

The reason for this is, MediaWiki tracks and displays the IP addresses of anonymous edits. If you accidentally made an anonymous change, and would like the IP address removed, please contact an administrator, e.g via [https://t.me/bitcoin_opinion telegram], as this can be done.

Administrators:
* Mads
* Walton
* Xenonfun
* Rajwinder</text>
      <sha1>s3sl3gl9an527g6x7557rocnv64no36</sha1>
    </revision>
  </page>
  <page>
    <title>Backup/Recovery</title>
    <ns>0</ns>
    <id>57</id>
    <revision>
      <id>2418</id>
      <parentid>2152</parentid>
      <timestamp>2022-04-11T12:52:26Z</timestamp>
      <contributor>
        <username>VS</username>
        <id>18</id>
      </contributor>
      <origin>2418</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="9593" sha1="ql2o9ickjjt7g2b2qvonqacah3irm74" xml:space="preserve">&lt;languages/&gt;
&lt;translate&gt;
&lt;!--T:1--&gt;
Running an LN Node involves a certain level of risk and there is a possibility to lose funds however by following some simple steps you could drastically reduce the possibility of losing funds.

== Channel backup == &lt;!--T:2--&gt;

=== Static Channel Backups (SCB) === &lt;!--T:19--&gt;

&lt;!--T:3--&gt;
LND can store a backup file of your channels using a method called Static Channel Backups (SCB).
Instead of trying to maintain the latest channel state, the static channel backup package will attempt to notify remote peers to force close the channel. This will prevent users from accidentally broadcasting an old state and allow them to close out and receive their local balance. Note that when you use an SCB you will receive your funds fairly quickly as the time lock for force closures will only apply to the peers initiating the force closure and not the other peer.

&lt;!--T:29--&gt;
An SCB file is updated when a channel is opened or closed. Channel information is added to the SCB when it's opened and is removed from the SCB when it's closed.

&lt;!--T:4--&gt;
IMPORTANT NOTE: SCBs will not restore your node back to normal, they are only a way to recover all the funds in your on-chain wallet and the funds on the local side of your channels (off-chain).

=== How to obtain an SCB? === &lt;!--T:5--&gt;

&lt;!--T:20--&gt;
There are several ways to obtain an SCB.

&lt;!--T:6--&gt;
* Using the BoS Telegram bot (recommended): [[Special:MyLanguage/Umbrel - Installing BoS|Umbrel - Installing BoS]] 
* Umbrel users: Can contact Umbrel for receiving your SCB if your node goes down.
* Non-Umbrel users: Using ThunderHub, there is an option to download the latest backup from the tools option.
* Using lncli: lncli exportchanbackup

&lt;!--T:10--&gt;
BOS Telegram is a recommended way because it automatically sends you an SCB file every time a channel is opened/closed. The other methods are manual processes and there is a risk of not maintaining the latest backup.

== Recovery == &lt;!--T:11--&gt;

&lt;!--T:12--&gt;
Shit happens! If your node ever goes down and you can't bring it back up again:

=== You still have access to your node === &lt;!--T:13--&gt;

&lt;!--T:21--&gt;
You will need your 24-word cipher seed and the SCB. Follow [https://github.com/lightningnetwork/lnd/blob/master/docs/recovery.md#recovering-using-scbs these instructions] (Use lncli restorechanbackup).

=== You don't have access to your node === &lt;!--T:14--&gt;

&lt;!--T:22--&gt;
In this scenario, for example, if your node has been destroyed in a nuclear attack, you will need to start a new node to recover funds.

&lt;!--T:23--&gt;
You will need your 24-word cipher seed and the SCB. You can set up a new node in Neutrino mode to save time. Neutrino is a lightweight client that allows you to run an LN node without Bitcoin Core.
You can create a new Neutrino node by following [https://github.com/alexbosworth/ln-service these instructions by Alex Bosworth]. These instructions are for creating a node on AWS EC2, however, you can create one on your laptop/desktop or on a Raspberry Pi.

&lt;!--T:27--&gt;
After you start a new node on Neutrino, you can follow [https://github.com/lightningnetwork/lnd/blob/master/docs/recovery.md#recovering-using-scbs the same recovery instructions]. (Use lncli create -multi_file=channel.backup)

&lt;!--T:28--&gt;
Note: Replace channel.backup with the name of your backup file.

=== ALL HOPE IS LOST (No SCB) === &lt;!--T:15--&gt;

&lt;!--T:24--&gt;
If you don't have an SCB and all you have is your 24-word cipher seed, there is a possibility to recover your funds (no promises).

&lt;!--T:30--&gt;
First, contact all your peers and ask them to force close on you manually.

&lt;!--T:31--&gt;
After the force closure is confirmed, follow [https://github.com/guggero/chantools/blob/master/doc/chantools_genimportscript.md these instructions].

=== Exception scenarios === &lt;!--T:16--&gt; 

==== Node goes down during an in-flight HTLC ==== &lt;!--T:17--&gt;

&lt;!--T:25--&gt;
If there was a payment that was in-flight that was being routed through your node or payment you were making and your node goes down and does not come back up, sorry, there is no way to recover funds that are stuck in the HTLC as of now but you can recover all the other on-chain and off-chain funds. This is probably a very extreme scenario.

==== You initiated a force closure, funds are still stuck in time-lock ==== &lt;!--T:18--&gt;

&lt;!--T:26--&gt;
If you initiate a force closure, the funds are locked for a certain number of blocks. If the node goes down during the time-lock period of a force closure initiated by you, unfortunately, LND has a bug today which removes the channel details from the latest SCB before the time-lock expires. The way to recover these funds would be to use an older SCB that you might have before the channel details were removed and use it start the recovery as shown in the previous steps and you will receive your funds back to your on-chain wallet after the time-lock expires. BOS Telegram bot can be a real savior in this scenario because the chat history with the bot will have older SCBs that you can use to recover funds. Lightning Labs say they will be fixing this in 0.14.0-beta.

&lt;!--T:32--&gt;
If you don't have an older SCB, unfortunately, there is no other way as of today to recover those funds, this also is an extreme scenario.
&lt;/translate&gt;

==== Node goes down while opening channel transaction is pending but not confirmed in mempool ====
Story from a fellow pleb - a special case.

I initiated a new channel opening on the lightning network with a known node of 1mil sats capacity
- My Bitcoin wallet had UTXO of 4mil sats which was used for this open
  - 1 mil for the channel
  - 3 mil UTXO (Unspent Transaction Output)

- The channel opening transaction was broadcast to the bitcoin network and was sitting unconfirmed. I did not have the SCB of this point of pending channel open which caused me issues later on.

- Whilst the channel opening transaction was sitting unconfirmed:
  - I accidentally deleted folders on my Umbrel node that I definitely shouldn't have. Forcing me to initiate recovery.
  - I turned off my node, reflashed my SD card, and restarted/reinstalled my entire node with my 24 words
  - I executed the restorechanbackup command from my most recent channel backup (cd ~/umbrel &amp;&amp; ./bin/lncli restorechanbackup --multi_file /data/.lnd/channel.backup)
  - I failed to take a channel.backup at any point during all of this (so had no backup of the pending channel). 
  - I failed to backup anything from my node before restarting/reinstalling it
- After a day or so, all my channels force closed, however the 4mil sats from the channel opening transaction were "lost" and I couldn't see the channel on my end
- I contacted the Umbrel backup team, and tried 2 backups which could have possibly contained the pending channel, and I executed that restore but still couldn't see the pending channel (https://gist.github.com/louneskmt/e4093a62aa1ae8788ef5d92c119f22a8)
- I contacted the node I setup the pending channel to, and they were able to successfully force close the channel, but this did not change anything on my end, I still couldn't see the channel or UTXO
- I tried to restart my umbrel node with reset-wallet-transactions=true - unfortunately this didn't find the UTXO or channel
- I was then introduced to something called chantools (https://github.com/guggero/chantools) - MAKE SURE YOU INSTALL THE NEWEST VERSION by changing the example text from v0.7.1 in both locations!!!!!!!! (Umbrel on a raspberry pi4 requires ARM64 version.)
- The author indicated that:
  - Since the other node force closed, the "missing" channel funds could now be swept by me as I have the seed.
  - Unfortunately lnd doesn't (yet) pick up on such funds automatically.
  - And because my umbrel channel backups didn't contain the new pending channel yet, I would need to do it manually.
  - Fortunately for such cases the author built the "chantools sweepremoteclosed" command. (https://github.com/guggero/chantools/blob/master/doc/chantools_sweepremoteclosed.md)
- I ran the "chantools sweepremoteclosed" command whilst SSH'd into my umbrel node:
  - Making sure to adjust the fee rate to something sensible (4 was fine for me at the time)
  - Making sure to specify my own bitcoin address for the sats to be swept to (I used my umbrel node bitcoin address)
  - It will prompt you in the CMD windows for your 24 node words (I had nothing to lose and the tool indicates your words don't leave your device)
- This command was successful in recovering my 1mil sats channel capacity
- To recover my 3mil UTXO, the chantools author indicated the "chantools genimportscript" command will work (https://github.com/guggero/chantools/blob/master/doc/chantools_genimportscript.md)
- Other advice indicated that using electrum desktop wallet would be easiest to import the private keys the command can generate
- I therefore executed the command with "-- format electrum" (chantools genimportscript --format electrum \ --recoverywindow 5000 \ --lndpaths)
- This provided a file on my umbrel node
- I copied this to my desktop by running a CMD command on my local desktop computer such as (scp umbrel@umbrel.local:/home/umbrel/results/genimportscript-2022-04-05-11-00-50.txt C:\Users\redacted\Desktop\genimportscript-2022-04-05-11-00-50.txt)
- I then installed electrum desktop wallet, and copied the private keys from the file when I booted up electrum for the first time (I had to select the option to create a wallet from private keys)
- In about 1 minute, it had a balance of my UTXO transaction (thought I understand this could take longer)</text>
      <sha1>ql2o9ickjjt7g2b2qvonqacah3irm74</sha1>
    </revision>
  </page>
  <page>
    <title>Backup/Recovery/en</title>
    <ns>0</ns>
    <id>398</id>
    <revision>
      <id>2157</id>
      <parentid>2145</parentid>
      <timestamp>2021-11-03T16:46:23Z</timestamp>
      <contributor>
        <username>FuzzyBot</username>
        <id>29</id>
      </contributor>
      <comment>Updating to match new version of source page</comment>
      <origin>2157</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="4917" sha1="rdfbxgxar4cz6f0jxu2phei8jwey4pb" xml:space="preserve">&lt;languages/&gt;
Running an LN Node involves a certain level of risk and there is a possibility to lose funds however by following some simple steps you could drastically reduce the possibility of losing funds.

== Channel backup ==

=== Static Channel Backups (SCB) ===

LND can store a backup file of your channels using a method called Static Channel Backups (SCB).
Instead of trying to maintain the latest channel state, the static channel backup package will attempt to notify remote peers to force close the channel. This will prevent users from accidentally broadcasting an old state and allow them to close out and receive their local balance. Note that when you use an SCB you will receive your funds fairly quickly as the time lock for force closures will only apply to the peers initiating the force closure and not the other peer.

An SCB file is updated when a channel is opened or closed. Channel information is added to the SCB when it's opened and is removed from the SCB when it's closed.

IMPORTANT NOTE: SCBs will not restore your node back to normal, they are only a way to recover all the funds in your on-chain wallet and the funds on the local side of your channels (off-chain).

=== How to obtain an SCB? ===

There are several ways to obtain an SCB.

* Using the BoS Telegram bot (recommended): [[Special:MyLanguage/Umbrel - Installing BoS|Umbrel - Installing BoS]] 
* Umbrel users: Can contact Umbrel for receiving your SCB if your node goes down.
* Non-Umbrel users: Using ThunderHub, there is an option to download the latest backup from the tools option.
* Using lncli: lncli exportchanbackup

BOS Telegram is a recommended way because it automatically sends you an SCB file every time a channel is opened/closed. The other methods are manual processes and there is a risk of not maintaining the latest backup.

== Recovery ==

Shit happens! If your node ever goes down and you can't bring it back up again:

=== You still have access to your node ===

You will need your 24-word cipher seed and the SCB. Follow [https://github.com/lightningnetwork/lnd/blob/master/docs/recovery.md#recovering-using-scbs these instructions] (Use lncli restorechanbackup).

=== You don't have access to your node ===

In this scenario, for example, if your node has been destroyed in a nuclear attack, you will need to start a new node to recover funds.

You will need your 24-word cipher seed and the SCB. You can set up a new node in Neutrino mode to save time. Neutrino is a lightweight client that allows you to run an LN node without Bitcoin Core.
You can create a new Neutrino node by following [https://github.com/alexbosworth/ln-service these instructions by Alex Bosworth]. These instructions are for creating a node on AWS EC2, however, you can create one on your laptop/desktop or on a Raspberry Pi.

After you start a new node on Neutrino, you can follow [https://github.com/lightningnetwork/lnd/blob/master/docs/recovery.md#recovering-using-scbs the same recovery instructions]. (Use lncli create -multi_file=channel.backup)

Note: Replace channel.backup with the name of your backup file.

=== ALL HOPE IS LOST (No SCB) ===

If you don't have an SCB and all you have is your 24-word cipher seed, there is a possibility to recover your funds (no promises).

First, contact all your peers and ask them to force close on you manually.

After the force closure is confirmed, follow [https://github.com/guggero/chantools/blob/master/doc/chantools_genimportscript.md these instructions].

=== Exception scenarios === 

==== Node goes down during an in-flight HTLC ====

If there was a payment that was in-flight that was being routed through your node or payment you were making and your node goes down and does not come back up, sorry, there is no way to recover funds that are stuck in the HTLC as of now but you can recover all the other on-chain and off-chain funds. This is probably a very extreme scenario.

==== You initiated a force closure, funds are still stuck in time-lock ====

If you initiate a force closure, the funds are locked for a certain number of blocks. If the node goes down during the time-lock period of a force closure initiated by you, unfortunately, LND has a bug today which removes the channel details from the latest SCB before the time-lock expires. The way to recover these funds would be to use an older SCB that you might have before the channel details were removed and use it start the recovery as shown in the previous steps and you will receive your funds back to your on-chain wallet after the time-lock expires. BOS Telegram bot can be a real savior in this scenario because the chat history with the bot will have older SCBs that you can use to recover funds. Lightning Labs say they will be fixing this in 0.14.0-beta.

If you don't have an older SCB, unfortunately, there is no other way as of today to recover those funds, this also is an extreme scenario.</text>
      <sha1>rdfbxgxar4cz6f0jxu2phei8jwey4pb</sha1>
    </revision>
  </page>
  <page>
    <title>Backup/Recovery/es</title>
    <ns>0</ns>
    <id>604</id>
    <revision>
      <id>2158</id>
      <parentid>2147</parentid>
      <timestamp>2021-11-03T17:21:33Z</timestamp>
      <contributor>
        <username>FuzzyBot</username>
        <id>29</id>
      </contributor>
      <comment>Updating to match new version of source page</comment>
      <origin>2158</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="8754" sha1="idwd2w9zzg0xjc3fiv6ud2hvornktg4" xml:space="preserve">&lt;languages/&gt;
Operar un Nodo LN implica un cierto nivel de riesgo y existe la posibilidad de perder fondos. Sin embargo, siguiendo algunos pasos sencillos se puede reducir drásticamente la posibilidad de perder fondos.

Veamos primero sobre backup de los canales:

&lt;div lang="en" dir="ltr" class="mw-content-ltr"&gt;
=== Static Channel Backups (SCB) ===
&lt;/div&gt;

LND tiene una forma de obtener un archivo que almacena un backup de sus canales utilizando un método llamado Backup Estático de Canales o SCB (del inglés: Static Channel Backups).
En lugar de intentar mantener el último estado del canal, el paquete de SCB intentará notificar a los peers remotos para que fuercen el cierre del canal. Esto evitará que los usuarios transmitan accidentalmente un estado antiguo y les permitirá cerrarlo y recibir su saldo local. Tenga en cuenta que cuando utilice un SCB recibirá sus fondos con bastante rapidez ya que el bloqueo de tiempo para los cierres forzados sólo se aplicará a los peers que inicien el cierre forzado y no al otro peer. 
Un archivo SCB se actualiza cuando se abre o se cierra un canal. La información del canal se añade a la SCB cuando se abre y se elimina de la SCB cuando se cierra.

&lt;div lang="en" dir="ltr" class="mw-content-ltr"&gt;
An SCB file is updated when a channel is opened or closed. Channel information is added to the SCB when it's opened and is removed from the SCB when it's closed.
&lt;/div&gt;

NOTA IMPORTANTE: Los SCBs no restaurarán su nodo de vuelta a la normalidad, son sólo una forma de recuperar todos los fondos en su billetera on-chain y los fondos en el lado local de sus canales (off-chain).

¿Cómo se obtiene un SCB?
Hay varias maneras de obtener un SCB.

&lt;div lang="en" dir="ltr" class="mw-content-ltr"&gt;
There are several ways to obtain an SCB.
&lt;/div&gt;

1. Utilizando el Telegram bot BOS (recomendado):
https://plebnet.wiki/wiki/Umbrel_-_Installing_BoS/es

BOS Telegram es una forma recomendada porque te envía automáticamente un archivo SCB a tu bot de telegram cada vez que se abre/cierra un canal, los otros métodos son un proceso manual y existe el riesgo de no mantener el último backup.

RECUPERACIÓN (Escenarios):

Shit happens! Si tu nodo se cae y no puedes volver a subirlo:

1. Todavía tienes acceso a tu nodo: Necesitarás tu seed de 24 palabras y el SCB. Siga estas instrucciones después -&gt; https://github.com/lightningnetwork/lnd/blob/master/docs/recovery.md#recovering-using-scbs  (Use lncli restorechanbackup)

&lt;div lang="en" dir="ltr" class="mw-content-ltr"&gt;
You will need your 24-word cipher seed and the SCB. Follow [https://github.com/lightningnetwork/lnd/blob/master/docs/recovery.md#recovering-using-scbs these instructions] (Use lncli restorechanbackup).
&lt;/div&gt;

2. Existe la posibilidad de que no tengas acceso a tu nodo (podría haber sido destruido en un ataque nuclear): En este escenario, necesitarás iniciar un nuevo nodo para recuperar los fondos. 
Necesitarás tu seed de 24 palabras y el SCB. Puedes configurar un nuevo nodo en modo neutrino para ahorrar tiempo, neutrino es un cliente ligero que te permite ejecutar un nodo LN sin Bitcoin core.
Puedes crear un nuevo nodo neutrino siguiendo estas instrucciones de Alex Bosworth: https://github.com/alexbosworth/ln-service
Estas instrucciones son para crear un nodo en AWS EC2, sin embargo, puedes crear uno en tu laptop/desktop o en una Raspberry Pi.
Después de iniciar un nuevo nodo en neutrino, puedes seguir las mismas instrucciones de recuperación: https://github.com/lightningnetwork/lnd/blob/master/docs/recovery.md#recovering-using-scbs (usa lncli create -multi_file=channel.backup)
Nota: Sustituye channel.backup por el nombre de tu archivo de backup.

&lt;div lang="en" dir="ltr" class="mw-content-ltr"&gt;
In this scenario, for example, if your node has been destroyed in a nuclear attack, you will need to start a new node to recover funds.
&lt;/div&gt;

&lt;div lang="en" dir="ltr" class="mw-content-ltr"&gt;
You will need your 24-word cipher seed and the SCB. You can set up a new node in Neutrino mode to save time. Neutrino is a lightweight client that allows you to run an LN node without Bitcoin Core.
You can create a new Neutrino node by following [https://github.com/alexbosworth/ln-service these instructions by Alex Bosworth]. These instructions are for creating a node on AWS EC2, however, you can create one on your laptop/desktop or on a Raspberry Pi.
&lt;/div&gt;

&lt;div lang="en" dir="ltr" class="mw-content-ltr"&gt;
After you start a new node on Neutrino, you can follow [https://github.com/lightningnetwork/lnd/blob/master/docs/recovery.md#recovering-using-scbs the same recovery instructions]. (Use lncli create -multi_file=channel.backup)
&lt;/div&gt;

&lt;div lang="en" dir="ltr" class="mw-content-ltr"&gt;
Note: Replace channel.backup with the name of your backup file.
&lt;/div&gt;

3. TODA ESPERANZA SE HA PERDIDO (Sin SCB): Si no tienes un SCB y todo lo que tienes es tu seed de 24 palabras, hay una posibilidad de recuperar tus fondos (sin promesas). Primero, contacta con todos tus compañeros y pídeles que te fuercen el cierre manualmente. Después de que el cierre forzado se confirme, sigue estas instrucciones: https://github.com/guggero/chantools/blob/master/doc/chantools_genimportscript.md

&lt;div lang="en" dir="ltr" class="mw-content-ltr"&gt;
If you don't have an SCB and all you have is your 24-word cipher seed, there is a possibility to recover your funds (no promises).
&lt;/div&gt;

&lt;div lang="en" dir="ltr" class="mw-content-ltr"&gt;
First, contact all your peers and ask them to force close on you manually.
&lt;/div&gt;

&lt;div lang="en" dir="ltr" class="mw-content-ltr"&gt;
After the force closure is confirmed, follow [https://github.com/guggero/chantools/blob/master/doc/chantools_genimportscript.md these instructions].
&lt;/div&gt;

Escenarios de excepción: 

1. El nodo se cae durante un in-flight HTLC: Si había un pago in-flight que estaba siendo enrutado a través de tu nodo o pago que estabas haciendo y tu nodo se cae y no vuelve a subir, lo siento, no hay manera de recuperar los fondos que están atascados en el HTLC a partir de ahora, pero puedes recuperar todos los otros fondos on y off-chain. Este es probablemente un escenario muy extremo.

&lt;div lang="en" dir="ltr" class="mw-content-ltr"&gt;
If there was a payment that was in-flight that was being routed through your node or payment you were making and your node goes down and does not come back up, sorry, there is no way to recover funds that are stuck in the HTLC as of now but you can recover all the other on-chain and off-chain funds. This is probably a very extreme scenario.
&lt;/div&gt;

2. Iniciaste un cierre forzado, los fondos siguen bloqueados por time-lock: Si inicias un cierre forzado, los fondos se bloquean durante un cierto número de bloques. Si el nodo se cae durante el período de bloqueo de tiempo de un cierre forzado iniciado por usted, desafortunadamente, LND tiene un bug hoy en día que elimina los detalles del canal del último SCB antes de que el bloqueo de tiempo expire. La forma de recuperar estos fondos sería utilizar un SCB más antiguo que puedas tener antes de que los detalles del canal fueran eliminados y utilizarlo para iniciar la recuperación como se muestra en los pasos anteriores y recibirás tus fondos de vuelta a tu cartera en la cadena después de que el tiempo de bloqueo expire. El bot de BOS Telegram puede ser un verdadero salvador en este escenario porque el historial de chat con el bot tendrá SCBs más antiguos que puedes usar para recuperar los fondos. Lightning Labs dice que arreglará esto en la versión 0.14.0-beta.
Si no tienes un SCB más antiguo, desafortunadamente, no hay otra manera a partir de hoy de recuperar esos fondos, esto también es un escenario extremo.

&lt;div lang="en" dir="ltr" class="mw-content-ltr"&gt;
If you initiate a force closure, the funds are locked for a certain number of blocks. If the node goes down during the time-lock period of a force closure initiated by you, unfortunately, LND has a bug today which removes the channel details from the latest SCB before the time-lock expires. The way to recover these funds would be to use an older SCB that you might have before the channel details were removed and use it start the recovery as shown in the previous steps and you will receive your funds back to your on-chain wallet after the time-lock expires. BOS Telegram bot can be a real savior in this scenario because the chat history with the bot will have older SCBs that you can use to recover funds. Lightning Labs say they will be fixing this in 0.14.0-beta.
&lt;/div&gt;

&lt;div lang="en" dir="ltr" class="mw-content-ltr"&gt;
If you don't have an older SCB, unfortunately, there is no other way as of today to recover those funds, this also is an extreme scenario.
&lt;/div&gt;</text>
      <sha1>idwd2w9zzg0xjc3fiv6ud2hvornktg4</sha1>
    </revision>
  </page>
  <page>
    <title>Backup/Recovery/fr</title>
    <ns>0</ns>
    <id>1227</id>
    <revision>
      <id>2151</id>
      <parentid>2148</parentid>
      <timestamp>2021-11-03T16:26:02Z</timestamp>
      <contributor>
        <username>FuzzyBot</username>
        <id>29</id>
      </contributor>
      <comment>Updating to match new version of source page</comment>
      <origin>2151</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="5494" sha1="o9sxw72rlk04lovv78x8wre5uqqqwdi" xml:space="preserve">&lt;languages/&gt;
Gérer un node Lightning est risqué et il est possible de perdre vos fonds. Néanmoins, les étapes ci-dessous vous permettent de drastiquement réduire cette possibilité.

== Sauvegarde des canaux ==

=== Static Channel Backups (SCB) ===

LND peut générer un fichier de sauvegarde de vos canaux en utilisant la méthode "Static Channel Backups" (SCB). Au lieu d'essayer de maintenir l'état du canal le plus récent, la méthode SCB tente de notifier vos pairs afin qu'ils forcent la fermeture du canal (force close). Ceci empêche des utilisateurs de diffuser accidentellement un ancien état et cela leur permet de fermer le canal et de recevoir leur solde local (local balance). Quand vous utilisez un SCB vous recevez vos fonds assez rapidement dans la mesure où le verrouillage temporel (time-lock) pour les fermetures forcées (force closures) s'applique seulement aux pairs qui initient la fermeture forcée et non à l'autre pair.

Un fichier SCB est mis à jour dès qu'un canal est ouvert ou fermé. Les information sur le canal sont ajoutées au SCB à l'ouverture du canal et sont supprimées du SCB lors de sa fermeture.

IMPORTANT : Les SCB ne rétablissent pas votre nœud à son état normal. Les SCB servent uniquement à récupérer tous les fonds de votre portefeuille on-chain et le solde local de vos canaux (off-chain).

=== Comment obtenir un SCB ? ===

Il y a différentes manières d'obtenir un SCB.

* Grâce au bot Telegram BoS (recommandé) : [[Special:MyLanguage/Umbrel - Installing BoS|Umbrel - Installer BoS]]
* Si vous utilisez Umbrel : Vous pouvez contacter Umbrel pour recevoir votre SCB si votre nœud tombe en panne,
* Si vous n'utilisez pas Umbrel : avec ThunderHub, vous pouvez télécharger la dernière sauvegarde dans les outils et options (tools option),
* Avec lncli en utilisant la commande "lncli exportchanbackup".

Le bot Telegram BoS est recommandé car il vous envoie automatiquement un fichier SCB dès qu'un canal est ouvert ou fermé. À l'inverse, les autres méthodes sont manuelles et peuvent ne pas être maintenues à jour.

== Récupération ==

"Shit happens!" Si votre nœud tombe en panne et que vous ne pouvez pas le redémarrer alors différentes solutions existent.

=== Si vous avez toujours accès à votre nœud ===

Vous aurez besoin de vos 24 mots et du SCB. Suivez [https://github.com/lightningnetwork/lnd/blob/master/docs/recovery.md#recovering-using-scbs ces instructions] (Utilisez lncli restorechanbackup).

=== Si vous n'avez plus accès à votre nœud ===

Dans ce cas-là (par exemple, si notre nœud a été détruit dans une attaque nucléaire), vous devrez créer un nouveau nœud pour récupérer vos fonds.

Vous aurez besoin de vos 24 mots et du SCB. Vous pouvez démarrer un nouveau nœud avec Neutrino pour gagner du temps. Neutrino est un client léger qui permet de faire tourner un nœud Lightning sans Bitcoin Core. Vous pouvez créer un nœud Neutrino en suivant [https://github.com/alexbosworth/ln-service ces instructions]. Ces instructions expliquent comment créer un nœud sur AWS EC2 mais vous pouvez de la même manière créer votre nœud sur votre ordinateur ou sur un Raspberry Pi.

Une fois votre nœud Neutrino lancé, suivez les [https://github.com/lightningnetwork/lnd/blob/master/docs/recovery.md#recovering-using-scbs mêmes instructions de récupération] (utilisez lncli create -multi_file=channel.backup)

Note : Remplacez channel.backup par le nom de votre fichier de sauvegarde.

=== TOUT ESPOIR EST PERDU (pas de SCB) ===

Si vous n'avez pas de SCB et que vous n'avez que vos 24 mots alors il est possible de récupérer vos fonds mais sans garantie de succès.

Tout d'abord, contactez tous vos pairs et demandez leur de fermer de force (force close) manuellement vos canaux.

Une fois la fermeture de force confirmée, suivez [https://github.com/guggero/chantools/blob/master/doc/chantools_genimportscript.md ces instructions].

=== Exceptions === 

==== Votre nœud tombe en panne pendant un HTLC "in-flight" ====

Si votre nœud est tombé en panne pendant qu'un paiement "in-flight" était en train d'être routé par votre nœud ou pendant que vous faisiez un paiement alors il n'y a malheureusement aucun moyen de récupérer ces fonds. Ces fonds sont bloqué dans le HTLC (Hashed TimeLock Contract). Vous pouvez en revanche récupérer le reste de vos fonds on-chain et off-chain.

==== Vous initiez une fermeture de force et vos fonds sont toujours bloqués dans un verrou temporel ====

Si vous initiez une fermeture de force, vos fonds sont bloqués pendant un certain nombre de blocs. Si votre nœud tombe en panne pendant le verrou temporelle d'une fermeture de force que vous avez initiée alors malheureusement LND comporte à ce jour un bug qui retire du SCB les détails du canal avant que le verrou temporel n'expire. Ces fonds peuvent être récupérés à l'aide d'un SCB plus ancien (avant que les détails du canal n'aient été supprimés). Utilisez ce SCB pour récupérer vos fonds comme expliqué ci-dessus. Vous recevrez vos fonds sur votre portemonnaie on-chain à l'expiration du verrou temporel. Le bot Telegram BoS est votre sauveur dans ce cas de figure car l'historique de conversation avec le bot contient tous les anciens SCB. D'après Lightning Labs, ce but devrait être résolu dans la version 0.14.0-beta.

Si vous n'avez pas un SCB plus ancien alors il n'y a malheureusement à ce jour aucun moyen de récupérer vos fonds.</text>
      <sha1>o9sxw72rlk04lovv78x8wre5uqqqwdi</sha1>
    </revision>
  </page>
  <page>
    <title>Balance of Satoshis</title>
    <ns>0</ns>
    <id>27</id>
    <revision>
      <id>1629</id>
      <parentid>816</parentid>
      <timestamp>2021-10-16T21:10:56Z</timestamp>
      <contributor>
        <username>VS</username>
        <id>18</id>
      </contributor>
      <origin>1629</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="4654" sha1="id3a1vpc447rdw15ne41mm0eqnme319" xml:space="preserve">&lt;languages/&gt;
&lt;translate&gt;
&lt;!--T:1--&gt;
Balance of Satoshis (abbr: bos) is a set of commands for working with LND balances. It is maintained by its creator, Alex Bosworth. [https://github.com/alexbosworth/balanceofsatoshis Source code on Github].

&lt;!--T:2--&gt;
Active user support also takes place on Telegram Channel: [https://t.me/balanceofsatoshis @balanceofsatoshis].


== Commands == &lt;!--T:3--&gt;

[https://github.com/niteshbalusu11/BOS-Commands-Document detailed documentation here]

&lt;!--T:4--&gt;
&lt;syntaxhighlight lang="text" line&gt;
  bos --help

     &lt;!--T:5--&gt;
bos 10.4.3

     &lt;!--T:6--&gt;
USAGE

       &lt;!--T:7--&gt;
bos &lt;command&gt; [options]

     &lt;!--T:8--&gt;
COMMANDS

       &lt;!--T:9--&gt;
accounting &lt;category&gt;               Get an accounting rundown
       advertise                           Broadcast advertisement
       balance                             Get total tokens
       broadcast &lt;tx&gt;                      Submit a signed transaction to the mempool
       call [method]                       Make a raw API call and to get a raw API response
       cert-validity-days                  Number of days until the cert is invalid
       chain-deposit [amount]              Deposit coins in the on-chain wallet
       chainfees                           Get the current chain fee estimates
       chart-chain-fees                    Get a chart of chain fee expenses
       chart-fees-earned [via_peer]        Get a chart of earned routing fees
       chart-fees-paid                     Get a chart of paid routing fees
       chart-payments-received             Get a chart of received payments
       closed                              Get the status of a channel closings
       credentials                         Export local credentials
       fees                                Show and adjust outbound fee rates
       find &lt;query&gt;                        Find a record
       forwards                            Show recent forwarding earnings
       fund &lt;address_amount...&gt;            Make a signed transaction spending on-chain funds
       gateway                             Request gateway for https://ln-operator.github.io/
       inbound-channel-rules               Enforce rules for inbound channels
       inbound-liquidity                   Get inbound liquidity size
       increase-inbound-liquidity          Increase node inbound liquidity
       increase-outbound-liquidity         Move on-chain funds off-chain
       market [pair] [exchange]            Get the history of prices on a market
       nodes [node]                        List and edit saved nodes
       open &lt;peer_public_keys...&gt;          Open channels using an external wallet for funding
       open-balanced-channel               Open a dual-funded channel with a node
       outbound-liquidity                  Get outbound liquidity size
       pay &lt;request&gt;                       Pay a payment request, probing first
       peers                               Get a list of channel-connected peers
       price [symbols...]                  Get the price
       probe &lt;to&gt; [amount]                 Check if a payment request is sendable
       rebalance                           Rebalance funds between peers
       reconnect                           Reconnect to disconnected channel partners
       remove-peer [public_key]            Close out with a channel-connected peer
       report                              Report about the node
       send &lt;to&gt;                           Send funds to a node
       services                            Run a KeySend paid services server
       swap-api-key                        Purchase a swap API key or inspect a swap API key
       swap-in [amount]                    Trade on-chain coins for off-chain via submarine swap
       tags [tag]                          View or adjust the set of tagged nodes
       telegram                            Post updates to a Telegram bot
       transfer &lt;to&gt; [amount]              Send funds to a saved node
       unlock &lt;path_to_password_file&gt;      Unlock wallet if locked
       use &lt;server_id&gt;                     Use a paid KeySend service from a services provider
       utxos                               Get a list of utxos
       help &lt;command&gt;                      Display help for a specific command

     &lt;!--T:10--&gt;
GLOBAL OPTIONS

       &lt;!--T:11--&gt;
-h, --help         Display help
       -V, --version      Display version
       --no-color         Disable colors
       --quiet            Quiet mode - only displays warn and error messages
       -v, --verbose      Verbose mode - will also output debug messages
&lt;/syntaxhighlight&gt;
&lt;/translate&gt;</text>
      <sha1>id3a1vpc447rdw15ne41mm0eqnme319</sha1>
    </revision>
  </page>
  <page>
    <title>Balance of Satoshis/en</title>
    <ns>0</ns>
    <id>932</id>
    <revision>
      <id>1455</id>
      <timestamp>2021-10-02T20:28:43Z</timestamp>
      <contributor>
        <username>FuzzyBot</username>
        <id>29</id>
      </contributor>
      <comment>Updating to match new version of source page</comment>
      <origin>1455</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="4419" sha1="rq6k9mkw2vp1mvimpun8qittpdrk3ni" xml:space="preserve">&lt;languages/&gt;
Balance of Satoshis (abbr: bos) is a set of commands for working with LND balances. It is maintained by its creator, Alex Bosworth. [https://github.com/alexbosworth/balanceofsatoshis Source code on Github].

Active user support also takes place on Telegram Channel: [https://t.me/balanceofsatoshis @balanceofsatoshis].


== Commands ==

&lt;syntaxhighlight lang="text" line&gt;
  bos --help

     bos 10.4.3

     USAGE

       bos &lt;command&gt; [options]

     COMMANDS

       accounting &lt;category&gt;               Get an accounting rundown
       advertise                           Broadcast advertisement
       balance                             Get total tokens
       broadcast &lt;tx&gt;                      Submit a signed transaction to the mempool
       call [method]                       Make a raw API call and to get a raw API response
       cert-validity-days                  Number of days until the cert is invalid
       chain-deposit [amount]              Deposit coins in the on-chain wallet
       chainfees                           Get the current chain fee estimates
       chart-chain-fees                    Get a chart of chain fee expenses
       chart-fees-earned [via_peer]        Get a chart of earned routing fees
       chart-fees-paid                     Get a chart of paid routing fees
       chart-payments-received             Get a chart of received payments
       closed                              Get the status of a channel closings
       credentials                         Export local credentials
       fees                                Show and adjust outbound fee rates
       find &lt;query&gt;                        Find a record
       forwards                            Show recent forwarding earnings
       fund &lt;address_amount...&gt;            Make a signed transaction spending on-chain funds
       gateway                             Request gateway for https://ln-operator.github.io/
       inbound-channel-rules               Enforce rules for inbound channels
       inbound-liquidity                   Get inbound liquidity size
       increase-inbound-liquidity          Increase node inbound liquidity
       increase-outbound-liquidity         Move on-chain funds off-chain
       market [pair] [exchange]            Get the history of prices on a market
       nodes [node]                        List and edit saved nodes
       open &lt;peer_public_keys...&gt;          Open channels using an external wallet for funding
       open-balanced-channel               Open a dual-funded channel with a node
       outbound-liquidity                  Get outbound liquidity size
       pay &lt;request&gt;                       Pay a payment request, probing first
       peers                               Get a list of channel-connected peers
       price [symbols...]                  Get the price
       probe &lt;to&gt; [amount]                 Check if a payment request is sendable
       rebalance                           Rebalance funds between peers
       reconnect                           Reconnect to disconnected channel partners
       remove-peer [public_key]            Close out with a channel-connected peer
       report                              Report about the node
       send &lt;to&gt;                           Send funds to a node
       services                            Run a KeySend paid services server
       swap-api-key                        Purchase a swap API key or inspect a swap API key
       swap-in [amount]                    Trade on-chain coins for off-chain via submarine swap
       tags [tag]                          View or adjust the set of tagged nodes
       telegram                            Post updates to a Telegram bot
       transfer &lt;to&gt; [amount]              Send funds to a saved node
       unlock &lt;path_to_password_file&gt;      Unlock wallet if locked
       use &lt;server_id&gt;                     Use a paid KeySend service from a services provider
       utxos                               Get a list of utxos
       help &lt;command&gt;                      Display help for a specific command

     GLOBAL OPTIONS

       -h, --help         Display help
       -V, --version      Display version
       --no-color         Disable colors
       --quiet            Quiet mode - only displays warn and error messages
       -v, --verbose      Verbose mode - will also output debug messages
&lt;/syntaxhighlight&gt;</text>
      <sha1>rq6k9mkw2vp1mvimpun8qittpdrk3ni</sha1>
    </revision>
  </page>
  <page>
    <title>Balancing Nodes</title>
    <ns>0</ns>
    <id>42</id>
    <revision>
      <id>817</id>
      <parentid>737</parentid>
      <timestamp>2021-10-02T19:46:26Z</timestamp>
      <contributor>
        <username>Lucasdcf</username>
        <id>27</id>
      </contributor>
      <comment>Marked this version for translation</comment>
      <origin>817</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="9745" sha1="bf918avxdbelqa1v271sidmds88yeoz" xml:space="preserve">&lt;languages/&gt;
&lt;translate&gt;
= Intro = &lt;!--T:1--&gt;
Most new NodeRunners struggle with the concept of balancing the node and channel and in the process, they end up being too fixated on rebalancing and targeting that magic 50:50 balance on each and every channel at tremendous cost and frustration. If your inbound &lt;&gt; outbound it is mathematically impossible to achieve 50:50 split on every channel so stop wasting time and sats on obsessive rebalancing.

&lt;!--T:2--&gt;
Let us look at the concept of balance from a holistic level.

= What is a balanced node = &lt;!--T:3--&gt;
A perfectly balanced node is one where 
Sum of Local liquidity is equal to the sum of Remote liquidity
Sum of Localliquidity on every channel is equal to sum of Remote liquidity on that channel.

&lt;!--T:4--&gt;
It does not exist.

&lt;!--T:5--&gt;
You can also consider a perfectly balanced node as a mirage. It is not possible. If a node is doing its jobs, there will be movements of Sats on channels.


==Why balancing is required== &lt;!--T:6--&gt;

&lt;!--T:7--&gt;
The way LND protocol is designed, the channel capacity (girth) is available publicly. You can check it on graph, public explorers (like https://amboss.space/), and even on block chain. The channel id is composed of Block_Transaction_Output. For example, channel id &lt;pre&gt;690334x2723x1&lt;/pre&gt; indicates that this channel was opened in block 690334 transaction number 2723 in that block and output 1 (remember first output is x0) in that transaction. 

&lt;!--T:8--&gt;
However, the local and remote balance of the channel is not available publicly and to the network. It can be probed and guessed but it is not published as part of network gossip (to avoid transmitting too many gossip messages and overwhelming the network).

&lt;!--T:9--&gt;
Imagine a network where B-&gt;A-&gt;M (your node) -&gt;Z-&gt;Y

&lt;!--T:10--&gt;
When node B wants to send some sats to node Y, it can create a route, which could pass via your node M, but if you are not a direct peer of B, Node B would never know how much is on your local balance to send outward towards Y. 
Node B would have Local/Remote information about channel B-&gt;A, but not about Local/Remote balance of A-&gt;M, M-&gt;Z, Z-&gt;Y. Node B would only know the capacity of the channels but not the Local/Remote balance.
Node B is the initiator node, it will use its logic to guess and most senders assume the channel has 50% of the capacity available as local.
If the lowest capacity channel in this path is A-&gt;M for 1_000_000 Sats, B would assume it can send at least 500_000 Sats + Fees. It will create and HTLC for that amount and pass it on to A, who will pass it on to M keeping the fees for A-&gt;M, who will pass it on to Z keeping the fees for M-&gt;Z, who will pass it on to Y, keeping the fees for Z-&gt;Y. However, if M-&gt;Z only has 200_000 sats on local, this HTLC will fail at that point (which you see as &lt;pre&gt;failure: TemporaryChannelFailure at 689892x1307x0 from nofrixion_tokyo&lt;/pre&gt; if you run bos rebalance). 
If there is no other route, the payment will fail and B can only send 200_000 sats on this route.

&lt;!--T:11--&gt;
To prevent such failed HTLC, which also punish your node (M) in the eyes of B (sender) because you caused them the inconvenience of trying a route where there were not enough sats on your local side, it is *advised* to keep your channels balanced.

&lt;!--T:12--&gt;
*Cetaris Paribus, your local and inbound liquidity is constant*
This could be a difficult concept to understand but unless you are sending payments (or receiving invoices), and you are not opening new channels and plebs are not opening channels into you, your total node capacity, your Local, and your Remote will remain the same. No amount of routing will change this balance (except the small amount of fees you will earn for routing).

&lt;!--T:13--&gt;
Imagine your node (M) 
* Channel 1 with A 1_000_000 girth, 300_000 Remote, 700_000 Local. Imagine your fee on this channel is 2_000 Sats (base fee)
* Channel 2 with Z 2_000_000 girth, 1_200_000 Remote, 800_000 Local. Imagine your fee on this channel is 1_000 Sats (base fee)

&lt;!--T:14--&gt;
Your node would show a total of 1_500_000 Remote and 1_500_000 Local. Pretty good balance even though individual channels are not balanced.

&lt;!--T:15--&gt;
If A sends to Z a transaction of 200_000 for which you earn a fee of 1_000 (lucky you). Note, the fee on Channel M-&gt;Z is applied for the transaction not the fee for channel A-&gt;M. 
The channels will look like this

&lt;!--T:16--&gt;
* Channel 1 with A 1_000_000 girth, (300_000 - 200_000 - 1_000 (fees)) = 99_000 Remote, (700_000 + 200_000 + 1_000 (fees)) = 901_000 Local.
* Channel 2 with Z 2_000_000 girth, (1_200_000 + 200_000) = 1_400_000 Remote, (800_000 - 200_000) = 600_000 Local.

&lt;!--T:17--&gt;
Note, that the fee was calculated for channel M-&gt;Z but it is collected on channel A-&gt;M. 

&lt;!--T:18--&gt;
And your node will now show a total of 1_499_000 Remote and 1_501_000 Local. 
Your channels have gone out of balance but your Local is still the same + fees earned (1_000)


==What are your options now== &lt;!--T:19--&gt;

&lt;!--T:20--&gt;
# Do Nothing
Doing nothing is usually a valid and zero-cost option. If you do nothing, you are hoping for traffic to flow from Z-&gt;A in future which will auto-balance your channels and you will also earn fees in the process. This should usually be the first option any node runner should think of instead of rushing into rebalancing routines.
# Circular Rebalancing
If doing nothing is not helping and you are not seeing two-way traffic, and at the same time you see a lot of traffic going to Z (which is failing at your node and eventually using other routes) and you want to be part of the action to earn fees for that traffic you can do what is known as circular rebalance. Which is essentially paying yourself which goes OUT of the channel with local balance and comes back in from the channel with remote provided there exist a path. Doing this cost the routing fees and you must evaluate carefully what you pay for rebalacne v/s what you earn on routing. 
If your routing fees for M-&gt;Z are very low and the rebalance fees is very high, you will make a loss over time.
Plebs sometimes ask if Circular Rebalancing is bad. Well there is no good or bad - circular rebalancing is a "tool" and costs to use the tool. It can be used to fix a channel or it can be used to create a DIY disaster.
# Loop out
This is the most expensive route. You payout to a custodial lightning wallet (or LOOP service) and take the coin on-chain.


==How to achieve balance with fees== &lt;!--T:21--&gt;

&lt;!--T:22--&gt;
If you visualise the node as a tap between connected water tanks, your fees determine how much the tap is open.

&lt;!--T:23--&gt;
Low Fee will encourage movement from Local to Remote. You decide what fee you are comfortable with based on your profitability expectations. If you have a lot of local balance on a channel, consider lowering the fees to the level you are comfortable with and it should encourage routing out to remote. Remember, you can bring the horse to water but you cannot make it drink. In the same way just because you have a lot of liquidity on local and set fees to super-low does not mean the sats will move to remote. It depends a lot also on your peer, and how that peer is connected. If the peer has set all their channels on super-high fees, then nothing will move from your node to them, because nothing will move from their node to further out into the network. The only time your channel will be used is if someone is sending a payment specifically to your peer. Many wallets and merchants fall in this category. Think of it as being connected to a village with 8 lane highway but only a few dirt roads leaving the village further out. Who would use that highway? In essence, think before you open a channel with a peer and see how well connected they are and if they are running their node with the same love and care you put into your node.

&lt;!--T:24--&gt;
Setting a high fee, when you do not have local liquidity, gives a signal to the network that you are moving to the hard shoulder on a motorway when you are running out of fuel instead of blocking a lane. This will reduce failed HTLC events on your node because a sender tries cheaper routes first before trying expensive routes. 

&lt;!--T:25--&gt;
Remember you only earn fees on your local -&gt; moving to -&gt; remote. 

&lt;!--T:26--&gt;
And when your sats are on Remote, you are at the mercy of your peer and their fees to allow routing back to you.

&lt;!--T:27--&gt;
Plebs make the noob mistake of setting very low fees when their sats are local, then complain when the sats move to remote and do not come back without expensive rebalancing. Think of it this way. You roll a heavy rock up the hill (at a high rebalancing rate) and then provided a smooth path down so the rock keeps tumbling down again to your local. Your fees should be higher than your cost of rebalancing (or your flow should be two way flow so there is natural rebalancing). See the section on running a profitable node [[Special:MyLanguage/FeesAndProfitability|FeesAndProfitability]].


=== Some Practical Ways To Get Your Sats on Local again === &lt;!--T:28--&gt;

&lt;!--T:29--&gt;
# Do nothing, let it flow naturally. Set fees to encourage.
# Do circular rebalance, it will cost. Set future fees accordingly.
# Create a route that will encourage the network to push liquidity through your node. For example a reasonably priced LOOP channel (which is in demand) can push most remote sats to your node (and go out to remote on LOOP).
# Ask a friendly node to pay your node via your peer you want to pull sats from using &lt;code&gt;bos send --in&lt;/code&gt;. It will cost but you can get your sats on local and set fee accordingly in future. You can pay your friend on-chain OR return the favour in future.
&lt;/translate&gt;</text>
      <sha1>bf918avxdbelqa1v271sidmds88yeoz</sha1>
    </revision>
  </page>
  <page>
    <title>Balancing Nodes/en</title>
    <ns>0</ns>
    <id>397</id>
    <revision>
      <id>892</id>
      <timestamp>2021-10-02T19:47:59Z</timestamp>
      <contributor>
        <username>FuzzyBot</username>
        <id>29</id>
      </contributor>
      <comment>Updating to match new version of source page</comment>
      <origin>892</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="9381" sha1="2pzqllkmg9o2x5c9rnyigi30isemr8o" xml:space="preserve">&lt;languages/&gt;
= Intro =
Most new NodeRunners struggle with the concept of balancing the node and channel and in the process, they end up being too fixated on rebalancing and targeting that magic 50:50 balance on each and every channel at tremendous cost and frustration. If your inbound &lt;&gt; outbound it is mathematically impossible to achieve 50:50 split on every channel so stop wasting time and sats on obsessive rebalancing.

Let us look at the concept of balance from a holistic level.

= What is a balanced node =
A perfectly balanced node is one where 
Sum of Local liquidity is equal to the sum of Remote liquidity
Sum of Localliquidity on every channel is equal to sum of Remote liquidity on that channel.

It does not exist.

You can also consider a perfectly balanced node as a mirage. It is not possible. If a node is doing its jobs, there will be movements of Sats on channels.


==Why balancing is required==

The way LND protocol is designed, the channel capacity (girth) is available publicly. You can check it on graph, public explorers (like https://amboss.space/), and even on block chain. The channel id is composed of Block_Transaction_Output. For example, channel id &lt;pre&gt;690334x2723x1&lt;/pre&gt; indicates that this channel was opened in block 690334 transaction number 2723 in that block and output 1 (remember first output is x0) in that transaction. 

However, the local and remote balance of the channel is not available publicly and to the network. It can be probed and guessed but it is not published as part of network gossip (to avoid transmitting too many gossip messages and overwhelming the network).

Imagine a network where B-&gt;A-&gt;M (your node) -&gt;Z-&gt;Y

When node B wants to send some sats to node Y, it can create a route, which could pass via your node M, but if you are not a direct peer of B, Node B would never know how much is on your local balance to send outward towards Y. 
Node B would have Local/Remote information about channel B-&gt;A, but not about Local/Remote balance of A-&gt;M, M-&gt;Z, Z-&gt;Y. Node B would only know the capacity of the channels but not the Local/Remote balance.
Node B is the initiator node, it will use its logic to guess and most senders assume the channel has 50% of the capacity available as local.
If the lowest capacity channel in this path is A-&gt;M for 1_000_000 Sats, B would assume it can send at least 500_000 Sats + Fees. It will create and HTLC for that amount and pass it on to A, who will pass it on to M keeping the fees for A-&gt;M, who will pass it on to Z keeping the fees for M-&gt;Z, who will pass it on to Y, keeping the fees for Z-&gt;Y. However, if M-&gt;Z only has 200_000 sats on local, this HTLC will fail at that point (which you see as &lt;pre&gt;failure: TemporaryChannelFailure at 689892x1307x0 from nofrixion_tokyo&lt;/pre&gt; if you run bos rebalance). 
If there is no other route, the payment will fail and B can only send 200_000 sats on this route.

To prevent such failed HTLC, which also punish your node (M) in the eyes of B (sender) because you caused them the inconvenience of trying a route where there were not enough sats on your local side, it is *advised* to keep your channels balanced.

*Cetaris Paribus, your local and inbound liquidity is constant*
This could be a difficult concept to understand but unless you are sending payments (or receiving invoices), and you are not opening new channels and plebs are not opening channels into you, your total node capacity, your Local, and your Remote will remain the same. No amount of routing will change this balance (except the small amount of fees you will earn for routing).

Imagine your node (M) 
* Channel 1 with A 1_000_000 girth, 300_000 Remote, 700_000 Local. Imagine your fee on this channel is 2_000 Sats (base fee)
* Channel 2 with Z 2_000_000 girth, 1_200_000 Remote, 800_000 Local. Imagine your fee on this channel is 1_000 Sats (base fee)

Your node would show a total of 1_500_000 Remote and 1_500_000 Local. Pretty good balance even though individual channels are not balanced.

If A sends to Z a transaction of 200_000 for which you earn a fee of 1_000 (lucky you). Note, the fee on Channel M-&gt;Z is applied for the transaction not the fee for channel A-&gt;M. 
The channels will look like this

* Channel 1 with A 1_000_000 girth, (300_000 - 200_000 - 1_000 (fees)) = 99_000 Remote, (700_000 + 200_000 + 1_000 (fees)) = 901_000 Local.
* Channel 2 with Z 2_000_000 girth, (1_200_000 + 200_000) = 1_400_000 Remote, (800_000 - 200_000) = 600_000 Local.

Note, that the fee was calculated for channel M-&gt;Z but it is collected on channel A-&gt;M. 

And your node will now show a total of 1_499_000 Remote and 1_501_000 Local. 
Your channels have gone out of balance but your Local is still the same + fees earned (1_000)


==What are your options now==

# Do Nothing
Doing nothing is usually a valid and zero-cost option. If you do nothing, you are hoping for traffic to flow from Z-&gt;A in future which will auto-balance your channels and you will also earn fees in the process. This should usually be the first option any node runner should think of instead of rushing into rebalancing routines.
# Circular Rebalancing
If doing nothing is not helping and you are not seeing two-way traffic, and at the same time you see a lot of traffic going to Z (which is failing at your node and eventually using other routes) and you want to be part of the action to earn fees for that traffic you can do what is known as circular rebalance. Which is essentially paying yourself which goes OUT of the channel with local balance and comes back in from the channel with remote provided there exist a path. Doing this cost the routing fees and you must evaluate carefully what you pay for rebalacne v/s what you earn on routing. 
If your routing fees for M-&gt;Z are very low and the rebalance fees is very high, you will make a loss over time.
Plebs sometimes ask if Circular Rebalancing is bad. Well there is no good or bad - circular rebalancing is a "tool" and costs to use the tool. It can be used to fix a channel or it can be used to create a DIY disaster.
# Loop out
This is the most expensive route. You payout to a custodial lightning wallet (or LOOP service) and take the coin on-chain.


==How to achieve balance with fees==

If you visualise the node as a tap between connected water tanks, your fees determine how much the tap is open.

Low Fee will encourage movement from Local to Remote. You decide what fee you are comfortable with based on your profitability expectations. If you have a lot of local balance on a channel, consider lowering the fees to the level you are comfortable with and it should encourage routing out to remote. Remember, you can bring the horse to water but you cannot make it drink. In the same way just because you have a lot of liquidity on local and set fees to super-low does not mean the sats will move to remote. It depends a lot also on your peer, and how that peer is connected. If the peer has set all their channels on super-high fees, then nothing will move from your node to them, because nothing will move from their node to further out into the network. The only time your channel will be used is if someone is sending a payment specifically to your peer. Many wallets and merchants fall in this category. Think of it as being connected to a village with 8 lane highway but only a few dirt roads leaving the village further out. Who would use that highway? In essence, think before you open a channel with a peer and see how well connected they are and if they are running their node with the same love and care you put into your node.

Setting a high fee, when you do not have local liquidity, gives a signal to the network that you are moving to the hard shoulder on a motorway when you are running out of fuel instead of blocking a lane. This will reduce failed HTLC events on your node because a sender tries cheaper routes first before trying expensive routes. 

Remember you only earn fees on your local -&gt; moving to -&gt; remote. 

And when your sats are on Remote, you are at the mercy of your peer and their fees to allow routing back to you.

Plebs make the noob mistake of setting very low fees when their sats are local, then complain when the sats move to remote and do not come back without expensive rebalancing. Think of it this way. You roll a heavy rock up the hill (at a high rebalancing rate) and then provided a smooth path down so the rock keeps tumbling down again to your local. Your fees should be higher than your cost of rebalancing (or your flow should be two way flow so there is natural rebalancing). See the section on running a profitable node [[Special:MyLanguage/FeesAndProfitability|FeesAndProfitability]].


=== Some Practical Ways To Get Your Sats on Local again ===

# Do nothing, let it flow naturally. Set fees to encourage.
# Do circular rebalance, it will cost. Set future fees accordingly.
# Create a route that will encourage the network to push liquidity through your node. For example a reasonably priced LOOP channel (which is in demand) can push most remote sats to your node (and go out to remote on LOOP).
# Ask a friendly node to pay your node via your peer you want to pull sats from using &lt;code&gt;bos send --in&lt;/code&gt;. It will cost but you can get your sats on local and set fee accordingly in future. You can pay your friend on-chain OR return the favour in future.</text>
      <sha1>2pzqllkmg9o2x5c9rnyigi30isemr8o</sha1>
    </revision>
  </page>
  <page>
    <title>Bash aliases</title>
    <ns>0</ns>
    <id>29</id>
    <revision>
      <id>818</id>
      <parentid>740</parentid>
      <timestamp>2021-10-02T19:46:33Z</timestamp>
      <contributor>
        <username>Lucasdcf</username>
        <id>27</id>
      </contributor>
      <comment>Marked this version for translation</comment>
      <origin>818</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="1719" sha1="rk8t4laigihq65msrox3h5t6vcb7gbe" xml:space="preserve">&lt;languages/&gt;
&lt;translate&gt;
&lt;!--T:1--&gt;
Bash aliases are used to create shorter versions of more complex commands that would otherwise be too long and tedious to type in. In this case, we see aliases for commands that are focussed on operating a lightning node.

&lt;!--T:2--&gt;
Rather than simply adding all these aliases to your .bash_aliases, consider reading through them carefully, and testing them out first to understand what they do.

&lt;!--T:3--&gt;
WORK IN PROGRESS

&lt;!--T:4--&gt;
&lt;syntaxhighlight lang="bash" line&gt;

&lt;!--T:5--&gt;
# linux default bitcoin regtest path
alias brdir="cd ~/.bitcoin/regtest"

&lt;!--T:6--&gt;
alias bc='bitcoin-cli'
alias bt='bitcoin-cli -testnet'
alias br='bitcoin-cli -regtest'
alias gbinfo='bitcoin-cli getblockchaininfo'

&lt;!--T:7--&gt;
alias lnchannelcaps='lncli describegraph | jq '\''.nodes[].total_channel_capacities=0 | foreach .nodes[] as ( . ; foreach .edges[] as ( . ; if .node1_pub==.pub_key then (|.total_channel_capacities=.total_channel_capacity+(.capacity|tonumber)) else empty end; .) ; .)'\'''
alias lnactive='lncli listchannels | jq '\''[ .channels | .[] | select(.active=true) ] | length '\'''
alias lnchaninfo='lncli listchannels | jq '\''[ .channels | .[] | { "remote_pubkey" : .remote_pubkey, "capacity": .capacity|tonumber, "local_balance": .local_balance|tonumber, "remote_balance": .remote_balance|tonumber } ]'\'''


&lt;!--T:8--&gt;
alias channels='lncli listchannels'
alias channelbalance='lncli channel balance'
alias pendingchannels='lncli pendingchannels'
alias openchannel='lncli openchannel'
alias connect='lncli connect'
alias payinvoice'lncli payinvoice'
alias addinvoie='lncli addinvoice'

&lt;!--T:9--&gt;
&lt;/syntaxhighlight&gt;

&lt;!--T:10--&gt;
[[File:Bash_aliases.jpeg|500px]]
&lt;/translate&gt;</text>
      <sha1>rk8t4laigihq65msrox3h5t6vcb7gbe</sha1>
    </revision>
  </page>
  <page>
    <title>Bash aliases/en</title>
    <ns>0</ns>
    <id>386</id>
    <revision>
      <id>879</id>
      <timestamp>2021-10-02T19:47:33Z</timestamp>
      <contributor>
        <username>FuzzyBot</username>
        <id>29</id>
      </contributor>
      <comment>Updating to match new version of source page</comment>
      <origin>879</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="1583" sha1="di1f2ehn5qzlz1xwrhz6q621ds6tib2" xml:space="preserve">&lt;languages/&gt;
Bash aliases are used to create shorter versions of more complex commands that would otherwise be too long and tedious to type in. In this case, we see aliases for commands that are focussed on operating a lightning node.

Rather than simply adding all these aliases to your .bash_aliases, consider reading through them carefully, and testing them out first to understand what they do.

WORK IN PROGRESS

&lt;syntaxhighlight lang="bash" line&gt;

# linux default bitcoin regtest path
alias brdir="cd ~/.bitcoin/regtest"

alias bc='bitcoin-cli'
alias bt='bitcoin-cli -testnet'
alias br='bitcoin-cli -regtest'
alias gbinfo='bitcoin-cli getblockchaininfo'

alias lnchannelcaps='lncli describegraph | jq '\''.nodes[].total_channel_capacities=0 | foreach .nodes[] as ( . ; foreach .edges[] as ( . ; if .node1_pub==.pub_key then (|.total_channel_capacities=.total_channel_capacity+(.capacity|tonumber)) else empty end; .) ; .)'\'''
alias lnactive='lncli listchannels | jq '\''[ .channels | .[] | select(.active=true) ] | length '\'''
alias lnchaninfo='lncli listchannels | jq '\''[ .channels | .[] | { "remote_pubkey" : .remote_pubkey, "capacity": .capacity|tonumber, "local_balance": .local_balance|tonumber, "remote_balance": .remote_balance|tonumber } ]'\'''


alias channels='lncli listchannels'
alias channelbalance='lncli channel balance'
alias pendingchannels='lncli pendingchannels'
alias openchannel='lncli openchannel'
alias connect='lncli connect'
alias payinvoice'lncli payinvoice'
alias addinvoie='lncli addinvoice'

&lt;/syntaxhighlight&gt;

[[File:Bash_aliases.jpeg|500px]]</text>
      <sha1>di1f2ehn5qzlz1xwrhz6q621ds6tib2</sha1>
    </revision>
  </page>
  <page>
    <title>BoS Telegram AutoStart</title>
    <ns>0</ns>
    <id>59</id>
    <revision>
      <id>2168</id>
      <parentid>1515</parentid>
      <timestamp>2021-11-08T21:08:20Z</timestamp>
      <contributor>
        <username>BrightLight</username>
        <id>40</id>
      </contributor>
      <origin>2168</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="3682" sha1="kn17aaux6yro7i92dl5u64cu6rims4d" xml:space="preserve">&lt;languages/&gt;
&lt;translate&gt;

==Creating BoS Telegram AutoStart== &lt;!--T:1--&gt;

&lt;!--T:2--&gt;
The following guide works on every linux distribution with the Systemd Software Manager Tool. I tested in with a Raspiblitz setup and the community tested it on umbrel. There are only some minor changes for the Umbrel setup, therefore two code snippets are shown. First is for Raspiblitz second for Umbrel.
(Everything can also be found in my git repo [https://github.com/ziggie1984/miscellanous.git gitrepo]).

(''If you have problems or find errors: Telegram @ziggiesmoke'')


===Prerequesties=== &lt;!--T:3--&gt;

&lt;!--T:4--&gt;
BoS has already been installed and an initial connection with your telegram bot has been established. Because if we want to put the bos telegram connection into the startup routine the API-Key of the Bot should already been entered.



===Checklist for Raspiblitz=== &lt;!--T:5--&gt;

&lt;!--T:6--&gt;
* Login via ssh: &lt;code&gt; ssh admin@ip.ip.ip.ip &lt;/code&gt; 
* Change to the following directory: &lt;code&gt; cd /etc/systemd/system/ &lt;/code&gt;
* Create a so called unit-file: &lt;code&gt; sudo touch bos-telegram.service &lt;/code&gt;
* open file with: &lt;code&gt; sudo nano bos-telegram.service &lt;/code&gt;
* copy the following content into it, change CONNECTIONCODE with your own code:
&lt;pre&gt;
#Systemd unit for Bos-Telegram Bot
#/etc/systemd/system/bos-telegram.service
[Unit]
Description=bos-telegram
Wants=lnd.service 
After=lnd.service 


&lt;!--T:7--&gt;
[Service] 
ExecStart=/home/bos/.npm-global/bin/bos telegram --connect CONNECTIONCODE 
User=bos
Restart=always
TimeoutSec=120
RestartSec=30
StandardOutput=null
StandardError=journal

&lt;!--T:8--&gt;
[Install]
WantedBy=multi-user.target  
&lt;/pre&gt;
* Save file and then type the following command in the terminal: &lt;code&gt; sudo systemctl enable bos-telegram.service &lt;/code&gt; 
* Reboot your node or it also works without rebooting by using this command: &lt;code&gt; sudo systemctl start bos-telegram.service &lt;/code&gt; 
* wait until your telegram bot shows the new connection to check whether the service is running properly you can type: sudo systemctl status bos-telegram.service. Remember lighting needs to be up and unlocked before the bot is able to start.

===Checklist for Umbrel=== &lt;!--T:5--&gt;

&lt;!--T:6--&gt;
*	Open Terminal
*	Login via ssh: ssh umbrel@umbrel.local
It will ask your password. Use same password as when you log in via your browser (default password is moneyprintergobrrr but you probably have changed it already). NB: password is not visible when you tap or paste it.
*	Change to the following directory: cd /etc/systemd/system/
*	Create a so called unit-file: sudo touch bos-telegram.service
*	Open file with: sudo nano bos-telegram.service
*	Copy the following content into it, change CONNECTIONCODE with your own code that you got when you connected your bot:
&lt;pre&gt;
#Systemd unit for Bos-Telegram Bot
#/etc/systemd/system/bos-telegram.service
[Unit]
Description=bos-telegram
Wants=lnd.service 
After=lnd.service 


&lt;!--T:10--&gt;
[Service] 
ExecStart=/home/umbrel/.npm-global/bin/bos telegram --connect CONNECTIONCODE 
User=umbrel
Restart=always
TimeoutSec=120
RestartSec=30
StandardOutput=null
StandardError=journal

&lt;!--T:11--&gt;
[Install]
WantedBy=multi-user.target  
&lt;/pre&gt;
*	Save file and exit: ctrl + x
y enter
*	Reboot your node OR use this command without rebooting: sudo systemctl start bos-telegram.service
*	Wait until your Telegram bot shows the new connection (check the Telegram app for message ‘connected to…’). 
*	To check whether the service is running properly you can type: sudo systemctl status bos-telegram.service. Remember lighting needs to be up and unlocked before the bot is able to start.
*	All good, you can close Terminal
&lt;/translate&gt;</text>
      <sha1>kn17aaux6yro7i92dl5u64cu6rims4d</sha1>
    </revision>
  </page>
  <page>
    <title>BoS Telegram AutoStart/en</title>
    <ns>0</ns>
    <id>508</id>
    <revision>
      <id>1017</id>
      <timestamp>2021-10-02T19:50:05Z</timestamp>
      <contributor>
        <username>FuzzyBot</username>
        <id>29</id>
      </contributor>
      <comment>Updating to match new version of source page</comment>
      <origin>1017</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="1892" sha1="8abzyjtbn1enr1j0vn3xybi6f8fzqrk" xml:space="preserve">&lt;languages/&gt;

==Creating BoS Telegram AutoStart==

The following guide works on every linux distribution with the Systemd Software Manager Tool. I tested in with a Raspiblitz setup, but if you follow the installation process of the BoS tool, it should also work without problems on umbrel.
(Everything can also be found in my git repo [https://github.com/ziggie1984/miscellanous.git gitrepo]).


===Prerequesties===

BoS has already been installed and an initial connection with your telegram bot has been established. Because if we want to put the bos telegram connection into the startup routine the API-Key of the Bot should already been entered.



===Checklist for Raspiblitz===

* Login via ssh: &lt;code&gt; ssh admin@ip.ip.ip.ip &lt;/code&gt; 
* Change to the following directory: &lt;code&gt; cd /etc/systemd/system/ &lt;/code&gt;
* Create a so called unit-file: &lt;code&gt; sudo touch bos-telegram.service &lt;/code&gt;
* open file with: &lt;code&gt; sudo nano bos-telegram.service &lt;/code&gt;
* copy the following content into it, change CONNECTIONCODE with your own code:
&lt;pre&gt;
#Systemd unit for Bos-Telegram Bot
#/etc/systemd/system/bos-telegram.service
[Unit]
Description=bos-telegram
Wants=lnd.service 
After=lnd.service 


[Service] 
ExecStart=/home/bos/.npm-global/bin/bos telegram --connect VERBINDUNGSCODE 
User=bos
Restart=always
TimeoutSec=120
RestartSec=30
StandardOutput=null
StandardError=journal

[Install]
WantedBy=multi-user.target  &lt;/code&gt;
&lt;/pre&gt;
* Save file and then type the following command in the terminal: sudo systemctl enable bos-telegram.service
* Reboot your node
* wait until your telegram bot shows the new connection to check whether the service is running properly you can type: sudo systemctl status bos-telegram.service. Remember lighting needs to be up and unlocked before the bot is able to start.

''Please give a feedback on Telegram if the guide worked for you with umbrel, @ziggiesmoke''</text>
      <sha1>8abzyjtbn1enr1j0vn3xybi6f8fzqrk</sha1>
    </revision>
  </page>
  <page>
    <title>Charge-lnd BTCPayServer Setup</title>
    <ns>0</ns>
    <id>1256</id>
    <revision>
      <id>2174</id>
      <parentid>2173</parentid>
      <timestamp>2021-11-09T19:57:23Z</timestamp>
      <contributor>
        <username>Xenonfun</username>
        <id>3</id>
      </contributor>
      <comment>/* Sample fragment to do this */</comment>
      <origin>2174</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="2191" sha1="r898p9ul5b12egnzcyy7gwovquqkp30" xml:space="preserve">== Use the following systemd service definitions ==

=== /etc/systemd/system/charge-lnd.service ===

 &lt;nowiki&gt;

[Unit]
Documentation=https://github.com/accumulator/charge-lnd/blob/master/README.md
#Requires=lnd.service
#After=lnd.service

[Service]
Type=oneshot

# change /usr/local/bin and /var/lib/lnd to a path where you installed lnd
# and a path to its datadir respectively
ExecStart=/usr/local/bin/charge-lnd \
    --lnddir /var/lib/docker/volumes/generated_lnd_bitcoin_datadir/_data \
    --grpc localhost:10009 \
    --config /etc/lnd-charge.config

User=root
Group=root

# https://www.freedesktop.org/software/systemd/man/systemd.exec.html#Sandboxing
CapabilityBoundingSet=
LockPersonality=true
MemoryDenyWriteExecute=true
NoNewPrivileges=true
PrivateDevices=true
PrivateTmp=true
PrivateUsers=true
ProtectClock=true
ProtectControlGroups=true
ProtectHome=true
ProtectHostname=true
ProtectKernelLogs=true
ProtectKernelModules=true
ProtectKernelTunables=true
ProtectSystem=strict
RemoveIPC=true
RestrictAddressFamilies=AF_UNIX AF_INET AF_INET6
RestrictNamespaces=true
RestrictRealtime=true
RestrictSUIDSGID=true
SystemCallArchitectures=native
SystemCallFilter=@system-service
SystemCallFilter=~add_key clone3 get_mempolicy kcmp keyctl mbind move_pages name_to_handle_at personality process_vm_readv process_vm_writev request_key set_mempolicy setns unshare userfaultfd

# may have to be modified if your lnd or electrum server is somewhere else than localhost
IPAddressAllow=127.0.0.1/32 ::1/128
IPAddressDeny=any
 
&lt;/nowiki&gt;

=== /etc/systemd/system/charge-lnd.timer ===

 &lt;nowiki&gt;

[Unit]
Documentation=https://github.com/accumulator/charge-lnd/blob/master/README.md

[Timer]
# https://www.freedesktop.org/software/systemd/man/systemd.time.html#Calendar%20Events
OnCalendar=*-*-* *:00:00 
RandomizedDelaySec=10s
Unit=charge-lnd.service
OnBootSec=1 m

[Install]
WantedBy=multi-user.target

&lt;/nowiki&gt;


Place your charge-lnd configuration in /etc/lnd-charge.config

You will need to expose port 10009 locally on LND to the host via a custom docker fragment.
=== Sample fragment to do this ===
 &lt;nowiki&gt;
version: "3"

services:
  lnd_bitcoin:
    ports:
      - "10009:10009"

&lt;/nowiki&gt;</text>
      <sha1>r898p9ul5b12egnzcyy7gwovquqkp30</sha1>
    </revision>
  </page>
  <page>
    <title>Claim on Amboss</title>
    <ns>0</ns>
    <id>52</id>
    <revision>
      <id>855</id>
      <parentid>742</parentid>
      <timestamp>2021-10-02T19:47:21Z</timestamp>
      <contributor>
        <username>Lucasdcf</username>
        <id>27</id>
      </contributor>
      <comment>Marked this version for translation</comment>
      <origin>855</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="1692" sha1="sd4j3kytmw3oxr1fql7vpd9kj0ovoby" xml:space="preserve">&lt;languages/&gt;
&lt;translate&gt;

==Intro== &lt;!--T:1--&gt;

&lt;!--T:2--&gt;
Now that you have a node, claim it on a public directory if you want. It is not necessary because your node public key will always be listed but if you claim it, you can give a bit of personal touch.

&lt;!--T:3--&gt;
To claim your node, head over to [https://amboss.space/ Amboss] and search your node via its public key. When you find your node you can claim it. Click on claim this node.

&lt;!--T:4--&gt;
[[File:AmbossLogin.jpg |400px|thumb|left|Amboss Login]]Many plebes make the mistake to think that Amboss is asking for their private key here. NEVER REVEAL YOUR NODE's PRIVATE KEY (even if you can figure out how to find it). You just need to sign the message which is provided to you. The process is

&lt;!--T:5--&gt;
# Amboss provides you a message (you can copy it)
# You sign it with your node's special key which only your node knows. 
# Amboss verifies that signature with your public key which everyone knows. That reveals that the message was indeed signed by the person (or machine) who knows the private key.
# Amboss assigns the ownership of that node to you (since you proved you control the node).


=== How to sign the message === &lt;!--T:6--&gt;

&lt;!--T:7--&gt;
The simplest way to sign the message is to use &lt;code&gt; ~/umbrel/bin/lncli signmessage {copy the message amboss is asking you to sign} &lt;/code&gt; you will get back the signed message which you can copy-paste in the box Amboss is looking for the reply.

&lt;!--T:8--&gt;
You can also use RTL or Thunderhub tools to sign the message. Look under tools -&gt; sign message.

&lt;!--T:9--&gt;
A similar process is used to claim your node for plebnet [https://t.me/cheeserobot cheeserobot]
&lt;/translate&gt;</text>
      <sha1>sd4j3kytmw3oxr1fql7vpd9kj0ovoby</sha1>
    </revision>
  </page>
  <page>
    <title>Claim on Amboss/en</title>
    <ns>0</ns>
    <id>554</id>
    <revision>
      <id>1067</id>
      <timestamp>2021-10-02T19:50:43Z</timestamp>
      <contributor>
        <username>FuzzyBot</username>
        <id>29</id>
      </contributor>
      <comment>Updating to match new version of source page</comment>
      <origin>1067</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="1568" sha1="dzhet1hn5u05x7uao0sj7hmm73d6i0b" xml:space="preserve">&lt;languages/&gt;

==Intro==

Now that you have a node, claim it on a public directory if you want. It is not necessary because your node public key will always be listed but if you claim it, you can give a bit of personal touch.

To claim your node, head over to [https://amboss.space/ Amboss] and search your node via its public key. When you find your node you can claim it. Click on claim this node.

[[File:AmbossLogin.jpg |400px|thumb|left|Amboss Login]]Many plebes make the mistake to think that Amboss is asking for their private key here. NEVER REVEAL YOUR NODE's PRIVATE KEY (even if you can figure out how to find it). You just need to sign the message which is provided to you. The process is

# Amboss provides you a message (you can copy it)
# You sign it with your node's special key which only your node knows. 
# Amboss verifies that signature with your public key which everyone knows. That reveals that the message was indeed signed by the person (or machine) who knows the private key.
# Amboss assigns the ownership of that node to you (since you proved you control the node).


=== How to sign the message ===

The simplest way to sign the message is to use &lt;code&gt; ~/umbrel/bin/lncli signmessage {copy the message amboss is asking you to sign} &lt;/code&gt; you will get back the signed message which you can copy-paste in the box Amboss is looking for the reply.

You can also use RTL or Thunderhub tools to sign the message. Look under tools -&gt; sign message.

A similar process is used to claim your node for plebnet [https://t.me/cheeserobot cheeserobot]</text>
      <sha1>dzhet1hn5u05x7uao0sj7hmm73d6i0b</sha1>
    </revision>
  </page>
  <page>
    <title>Compacting Channel DB</title>
    <ns>0</ns>
    <id>1035</id>
    <revision>
      <id>2216</id>
      <parentid>2215</parentid>
      <timestamp>2021-12-30T18:39:03Z</timestamp>
      <contributor>
        <username>Itsneski</username>
        <id>20</id>
      </contributor>
      <comment>/* Clean failed payments */</comment>
      <origin>2216</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="4850" sha1="qu6f5xiaqkc0mlcs6xkjlpgj6dhd6f4" xml:space="preserve">The BOLT db, or channel.db, stores the entire history of payments processed by your LND node, including failed payments, failed htlcs from payments, and payment probes. The database is located at &lt;code&gt;~/umbrel/lnd/data/graph/mainnet/channel.db&lt;/code&gt; on Umbrel.

The file continuously grows and may eventually exceed the available disk space and/or slow things down. 1GB or 2GB size is reasonable, but your node may begin to slow down when the file reaches 6 - 8Gb.

Monitor channel.db, compact &amp; prune it when needed. Pruning refers to marking payment records for deletion. Compaction refers to removing the marked records from the database and thus reducing its size.

== Monitor channel.db size ==

Ways to monitor channel.db:

* periodically check the channel.db size by &lt;code&gt;ls -l &lt;channel.db path&gt;&lt;/code&gt;.
* install [https://github.com/itsneski/lightning-jet#telegram-bot Lightning Jet telegram bot]; the bot will notify when channel.db grows over the threshold.
* run [https://github.com/itsneski/lightning-jet Lightning Jet] &lt;code&gt;jet monitor&lt;/code&gt; or &lt;code&gt;jet channeldb&lt;/code&gt; tools; the tools will show a warning when channel db grows over the threshold.

== Create a backup ==

Backup channel.db payments prior to pruning and compaction: &lt;code&gt;lncli listpayments &gt; listpayments.bak&lt;/code&gt;. Place &lt;code&gt;listpayments.bak&lt;/code&gt; in a backup folder under your home directory, e.g. &lt;code&gt;~/listpayments_backup&lt;/code&gt;. Indicate current date in the file name, e.g. &lt;code&gt;listpayments.bak.2021.12.29&lt;/code&gt;.

== Enable pruning ==

[[Special:MyLanguage/LND_Configuration_Settings#BOLT_Database_optimizations_.28channel.db.29|Update lnd.conf]] to enable automated pruning.

Note: in lnd14 [https://github.com/alexbosworth/balanceofsatoshis BalanceOfSatoshis] automatically prunes the obsolete channel.db records generated as part of payment probes.

== Prune manually ==

Prune manually when automated pruning is not able to sufficiently reduce the size of channel.db.

=== Clean failed payments ===

Ways to clean failed payments based on lnd version, &lt;code&gt;lncli -v&lt;/code&gt;. Note: use this with caution and only when there is no other choice. Make sure to identify your version of lnd prior to calling any of the methods. Do not call a method multiple times in case of a failure. Message on Plebnet Noderunnes or Plebnet Advanced telegram groups in case of a failure.

* lnd13: [https://github.com/alexbosworth/balanceofsatoshis BalanceOfSatoshis] &lt;code&gt;bos delete-payments-history&lt;/code&gt;. This command will delete all payments, including successful ones, use it with caution. Details [https://github.com/niteshbalusu11/BOS-Commands-Document#delete-payments-history here].
* lnd14: [https://github.com/alexbosworth/balanceofsatoshis BalanceOfSatoshis] &lt;code&gt;bos clean-failed-payments&lt;/code&gt;. The command is safe to use as it only cleans failed payments.
* lnd13+: call [https://github.com/itsneski/lightning-jet Lightning Jet] &lt;code&gt;tools/prune-payments&lt;/code&gt; tool; the tool will only remove failed payments &amp; htlcs (lnd13 and up).
* lnd13+: write a script to call [https://api.lightning.community/#deleteallpayments LND API DeleteAllPayments] ([https://github.com/itsneski/lightning-jet/blob/main/tools/prune-payments example of a JavaScript code]), with &lt;code&gt;failed_payments_only&lt;/code&gt; and &lt;code&gt;failed_htlcs_only&lt;/code&gt; set to true. Please note that the flags are supported in lnd13 and up, and are not supported in lnd12. Take extra caution before calling this method, as if called in lnd12 it'll remove all payments, including good ones.

=== Re-establish channels with the biggest footprint ===

Ways to identify channels with the biggest footprint:

* call [https://api.lightning.community/#listchannels lncli listchannels], the &lt;code&gt;num_updates&lt;/code&gt; field indicates the number of channel state updates for a channel.
* [https://github.com/alexbosworth/balanceofsatoshis BalanceOfSatoshis] &lt;code&gt;bos &lt;alias/pubkey&gt;&lt;/code&gt;.
* [https://github.com/itsneski/lightning-jet Lightning Jet] &lt;code&gt;jet list-channels&lt;/code&gt; returns top 10 channels based on footprint.

Re-establish a channel(s) with the biggest footprint by closing the channel and creating a new one. Please note that there is a cost associated with closing and creating channels, so node operators should use this option carefully. 

== Compact ==

Steps to enable and trigger compaction:

# [[Special:MyLanguage/LND_Configuration_Settings#BOLT_Database_optimizations_.28channel.db.29|Update lnd.conf]] to enable compaction.
# Make sure to have enough disk space to support compaction, or lnd may fail to start. Compaction makes a copy of channel.db during lnd restart.
# Delete &lt;code&gt;~/umbrel/lnd/data/graph/mainnet/channel.db.last-compacted&lt;/code&gt; to trigger compaction on restart.
# Restart lnd: &lt;code&gt;cd ~/umbrel ; docker-compose restart lnd; docker-compose ps&lt;/code&gt;.</text>
      <sha1>qu6f5xiaqkc0mlcs6xkjlpgj6dhd6f4</sha1>
    </revision>
  </page>
  <page>
    <title>FAQ</title>
    <ns>0</ns>
    <id>61</id>
    <revision>
      <id>2240</id>
      <parentid>2239</parentid>
      <timestamp>2022-01-14T11:40:15Z</timestamp>
      <contributor>
        <username>VS</username>
        <id>18</id>
      </contributor>
      <comment>/* Q9 How do I monitor channel.db growth and keep it under control */</comment>
      <origin>2240</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="9516" sha1="b0705szzksik1qbq7v1tl4mnyns8teq" xml:space="preserve">&lt;languages/&gt;
&lt;translate&gt;
= FAQ = &lt;!--T:1--&gt;


== Q1 Recommendations for Good Peers == &lt;!--T:2--&gt;

&lt;!--T:3--&gt;
There is no straightforward recommendation. 

&lt;!--T:4--&gt;
1- I would recommend all my channels as good peers. My channel list is [https://amboss.space/node/03c5528c628681aa17ab9e117aa3ee6f06c750dfb17df758ecabcd68f1567ad8c1 public (like everyone else)]

&lt;!--T:5--&gt;
2- [https://terminal.lightning.engineering/ Terminal] ranks peers based on their criteria.

&lt;!--T:6--&gt;
3- [https://lnnodeinsight.com/ lnnode] helps you do channel simulation of how your centrality is impacted by adding someone as a peer. 

&lt;!--T:7--&gt;
4- [https://gridflare.xyz/ gridflare] provides recommendations individual to your own channel.

&lt;!--T:8--&gt;
5- Communicating within [https://t.me/plebnet plebnet groups] let you interact with node operators who you can judge from their interaction as good peers

&lt;!--T:9--&gt;
6- ultimately anyone willing to open up their node for routing and investing, time, effort, and sats to operate a lightning node is a good peer.

&lt;!--T:10--&gt;
Also see [[Special:MyLanguage/Opening channels|Opening channels]] and [[Special:MyLanguage/Resources|Resources]]


== Q2 Other node cannot connect to my TOR node == &lt;!--T:11--&gt;

&lt;!--T:12--&gt;
If the other node is a clearnet node, you would need to add them as peer first before they can connect/open channel to you. Otherwise, they'll get the error: "no suitable address found" when trying to connect to your node.

You can add peer via RTL/ThunderHub or other apps or using command line &lt;code&gt;~/umbrel/bin/lncli connect &lt;PubKey or URI of the peer&gt;&lt;/code&gt;. For example to connect to my node as peer, please use
 
&lt;code&gt;~/umbrel/bin/lncli connect 03c5528c628681aa17ab9e117aa3ee6f06c750dfb17df758ecabcd68f1567ad8c1&lt;/code&gt; 

&lt;!--T:13--&gt;
OR 

&lt;!--T:14--&gt;
&lt;code&gt;~/umbrel/bin/lncli connect 03c5528c628681aa17ab9e117aa3ee6f06c750dfb17df758ecabcd68f1567ad8c1@zacadqiqgi43tdv4ztjet2fh22f72ol2tokotp5cqdbszgx6tpyqdxad.onion:9735&lt;/code&gt;


== Q3 Viewing Stream-Lnd-HTLC output in human readable format == &lt;!--T:15--&gt;

&lt;!--T:16--&gt;
[https://github.com/smallworlnd/stream-lnd-htlcs steam-lnd-htlc] is script used to monitor HTLC events on your node. However the output is in JSON format which may not immediately be human readable format.
This can be solved by adding a custom alias 

&lt;!--T:17--&gt;
&lt;pre&gt;alias strhtlc='tail -f ~/stream-lnd-htlcs/htlc-stream.json | sed -e '\''s/, /\n/g'\'' -e '\''s/{/\n{\n/g'\'' -e '\''s/}/\n}/g'\'' -e '\''s/'\''\'\'''\''//g'\'''&lt;/pre&gt;

&lt;!--T:18--&gt;
replace &lt;code&gt;~/stream-lnd-htlcs/htlc-stream.json&lt;/code&gt; by the actual path of your output file from stream-lnd-htlc script.

&lt;!--T:19--&gt;
after this each time you type &lt;code&gt;strhtlc&lt;/code&gt; you will start looking at the output which you can read on screen. To stop press ctrl-c

&lt;!--T:20--&gt;
you can add this line in your aliases files so that it is remembered each time. 

&lt;!--T:21--&gt;
&lt;code&gt;nano ~/.bash_aliases&lt;/code&gt; add the line &lt;pre&gt;alias strhtlc='tail -f ~/stream-lnd-htlcs/htlc-stream.json | sed -e '\''s/, /\n/g'\'' -e '\''s/{/\n{\n/g'\'' -e '\''s/}/\n}/g'\'' -e '\''s/'\''\'\'''\''//g'\'''&lt;/pre&gt;


&lt;!--T:22--&gt;
Save and Exit &lt;code&gt;ctrl-x then Y then enter&lt;/code&gt;


== Q4 How do I run stream-lnd-htlc 24x7 == &lt;!--T:23--&gt;

&lt;!--T:24--&gt;
1. You can run in TMUX. See [[Special:MyLanguage/Umbrel_-_Installing_BoS#TMUX_Instructions|Umbrel_-_Installing_BoS#TMUX_Instructions]] for high-level instructions on installing tmux. 

&lt;!--T:25--&gt;
2. Use disown &lt;code&gt;python3 stream-lnd-htlcs.py --lnd-dir ~/umbrel/lnd --silent SILENT --human-dates HUMANDATES 1&gt;/tmp/stream-lnd-htlc.log 2&gt;&amp;1 &amp; disown&lt;/code&gt;


== Q5 Is there a minimum amount of capital required for running a profitable node == &lt;!--T:26--&gt;

&lt;!--T:27--&gt;
Theoretically yes, you need to understand that for being profitable you need to recover the initial investments as well as ongoing costs. 
Your investments are in the hardware, UPS, etc. 
Your ongoing costs are electricity, internet charges, hosting fees if you run in the cloud, and channel open/close costs. In addition, you may optionally spend on rebalancing.

&lt;!--T:28--&gt;
Therefore a very small node is unlikely to return to profitability over its useful life before new investments in hardware would be needed.

&lt;!--T:29--&gt;
Considering the cost of hardware around 1.5M Sat and the expected lifetime of hardware as 5 years, a 10 M Sat node would need to earn 300_000 Sat a year (1_500_000/5) or 2,500 ppm (300_000/12/10) net profit per month to recover the investment. Assuming the node can route 100% of the local balance in a month, the node would need to earn 2,500 ppm net fees for each routing. In the same situation, a 100 M Sat node would need to earn the same 300_000 Sats a year but it drops to 250 ppm (300_000/12/100) net profit per month to recover the investment. Assuming the node can route 100% of the local balance in a month, the node can be profitable with just 250 ppm net fees for each routing.

&lt;!--T:30--&gt;
Therefore larger the node, the higher the chances of achieving profitability. 

&lt;!--T:31--&gt;
Do read further on [https://plebnet.wiki/wiki/Main_Page#Running_A_Profitable_Routing_Node running a profitable node] and all related sub-sections.


== Q6 How to allocate capital on a node? If I have 100 M Sat, how should I divide it? == &lt;!--T:32--&gt;

&lt;!--T:33--&gt;
There is genuinely no straight answer to this question and each node is unique in its objective and structure. However, it is easier to build a base first before worrying about centrality and hopness.
Generally as a rule of thumb keep 
# 30% capital for big chunky channels possibly to main routes (which you would discover only after watching the flow). These could the from the top 50 or 100 from [https://terminal.lightning.engineering/#/03c5528c628681aa17ab9e117aa3ee6f06c750dfb17df758ecabcd68f1567ad8c1 Terminal Engineering] or channels which improve your centrality, betweenness, and hopness. See the section on [[Special:MyLanguage/Resources|Resources]] for more details. 
# 40% for swaps/balanced channels you open in community which gives you one inbound to one outbound with well-connected nodes (you can do rings/triangle etc). Plebnet, #Plebs2Salvador, and other swap services are good place for these nodes.
# Remaining 30% for building the community/fun projects/helping/mentoring beginners nodes. The smaller nodes today could be next big deal for tomorrow.

== Q7 How much do I wait if I initiate force close? How can I control it? == &lt;!--T:34--&gt;

&lt;!--T:35--&gt;
When you initiate a force close, you will need to wait for "to-self-delay" number of blocks before your funds are returned. This is to protect your peer from a malicious close by your side and allowing them time to dispute the channel state. 
You do not control how much delay your peer imposes on you. At the time of channel open the peers negotiate to_self_delay. You impose on them, they impose on you. The following pameters in lnd.conf control the delay.

&lt;pre&gt;
; The default number of blocks we will require our channel counterparty to wait
; before accessing its funds in case of unilateral close. If this is not set, we
; will scale the value according to the channel size.

bitcoin.defaultremotedelay=144

; The maximum number of blocks we will limit the wait that our own funds are
; encumbered by in the case when our node unilaterally closes. If a remote peer
; proposes a channel with a delay above this amount, lnd will reject the
; channel.

bitcoin.maxlocaldelay=2016
&lt;/pre&gt;

If defaultremotedelay is not set, then the delay is scaled up along with channel size. 144 blocks is roughly 24 hours. Please note this is the delay you propose to offer to your peer (i.e. if they force close, they would have to wait 144 blocks before claiming your funds).

MaxLocalDelay defines what is the maximum you are prepared to accept. If your peer proposes more than this, the channel is not accepted. Keeping it too high exposes you to long delays in force close. Keeping it too low may reject some channel open requests. 2016 blocks is roughly 14 days. 
&lt;/translate&gt;

== Q8 How do I set up a clearnet and tor hybrid node? ==
If privacy is not a big concern for you, running your node on clearnet has advantage of improved latency and reliability. An excellent guide is written by [https://github.com/blckbx/lnd-hybrid-mode fellow plebs here] which you will find useful.

== Q9 How do I monitor channel.db growth and keep it under control ==
First - keep an eye. &lt;code&gt;ls -l `find ~ -name channel.db`&lt;/code&gt; and see what size it is and how it is growing over time. Every HTLC you accepts add to the channel.db growth. Failed HTLC are cleaned up by lnd but the space is not released without compacting. If channel db goes beyond 10GB it can impact the performance, specially on pi node runners.

Second - compact it. lnd configuration section has steps to [https://plebnet.wiki/wiki/LND_Configuration_Settings#BOLT_Database_optimizations_.28channel.db.29 configure automatic channel db compacting on start up]. Remember you will need to re-start lnd and compacting can take time specially for very bloated data base.

Third - Keep an eye on disk hoggers. &lt;code&gt; lncli listchannels | jq -r '.[][]| [.num_updates, .remote_pubkey, .chan_id] | @tsv' | sort -rn | head -10 &lt;/code&gt; will give you top 10 peers-channel hogging your disk space. You can rechannel with them (i.e. close channel and reopen). It will start from clean slate. The first column of this output shows number of updates. Each update is 0.51 KB approximately.</text>
      <sha1>b0705szzksik1qbq7v1tl4mnyns8teq</sha1>
    </revision>
  </page>
  <page>
    <title>FAQ/en</title>
    <ns>0</ns>
    <id>943</id>
    <revision>
      <id>1468</id>
      <timestamp>2021-10-02T20:38:52Z</timestamp>
      <contributor>
        <username>FuzzyBot</username>
        <id>29</id>
      </contributor>
      <comment>Updating to match new version of source page</comment>
      <origin>1468</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="5889" sha1="g5vnz8mzlvbw8q6dtmjnemvtgiecu1o" xml:space="preserve">&lt;languages/&gt;
= FAQ =


== Q1 Recommendations for Good Peers ==

There is no straightforward recommendation. 

1- I would recommend all my channels as good peers. My channel list is [https://amboss.space/node/03c5528c628681aa17ab9e117aa3ee6f06c750dfb17df758ecabcd68f1567ad8c1 public (like everyone else)]

2- [https://terminal.lightning.engineering/ Terminal] ranks peers based on their criteria.

3- [https://lnnodeinsight.com/ lnnode] helps you do channel simulation of how your centrality is impacted by adding someone as a peer. 

4- [https://gridflare.xyz/ gridflare] provides recommendations individual to your own channel.

5- Communicating within [https://t.me/plebnet plebnet groups] let you interact with node operators who you can judge from their interaction as good peers

6- ultimately anyone willing to open up their node for routing and investing, time, effort, and sats to operate a lightning node is a good peer.

Also see [[Special:MyLanguage/Opening channels|Opening channels]] and [[Special:MyLanguage/Resources|Resources]]


== Q2 Other node cannot connect to my TOR node ==

If the other node is a clearnet node, you would need to add them as peer first before they can connect/open channel to you. 
You can add peer via RTL/ThunderHub or other apps or using command line &lt;code&gt;~/umbrel/bin/lncli connect &lt;PubKey or URI of the peer&gt;&lt;/code&gt;. For example to connect to my node as peer, please use
 
&lt;code&gt;~/umbrel/bin/lncli connect 03c5528c628681aa17ab9e117aa3ee6f06c750dfb17df758ecabcd68f1567ad8c1&lt;/code&gt; 

OR 

&lt;code&gt;~/umbrel/bin/lncli connect 03c5528c628681aa17ab9e117aa3ee6f06c750dfb17df758ecabcd68f1567ad8c1@zacadqiqgi43tdv4ztjet2fh22f72ol2tokotp5cqdbszgx6tpyqdxad.onion:9735&lt;/code&gt;


== Q3 Viewing Stream-Lnd-HTLC output in human readable format ==

[https://github.com/smallworlnd/stream-lnd-htlcs steam-lnd-htlc] is script used to monitor HTLC events on your node. However the output is in JSON format which may not immediately be human readable format.
This can be solved by adding a custom alias 

&lt;pre&gt;alias strhtlc='tail -f ~/stream-lnd-htlcs/htlc-stream.json | sed -e '\''s/, /\n/g'\'' -e '\''s/{/\n{\n/g'\'' -e '\''s/}/\n}/g'\'' -e '\''s/'\''\'\'''\''//g'\'''&lt;/pre&gt;

replace &lt;code&gt;~/stream-lnd-htlcs/htlc-stream.json&lt;/code&gt; by the actual path of your output file from stream-lnd-htlc script.

after this each time you type &lt;code&gt;strhtlc&lt;/code&gt; you will start looking at the output which you can read on screen. To stop press ctrl-c

you can add this line in your aliases files so that it is remembered each time. 

&lt;code&gt;nano ~/.bash_aliases&lt;/code&gt; add the line &lt;pre&gt;alias strhtlc='tail -f ~/stream-lnd-htlcs/htlc-stream.json | sed -e '\''s/, /\n/g'\'' -e '\''s/{/\n{\n/g'\'' -e '\''s/}/\n}/g'\'' -e '\''s/'\''\'\'''\''//g'\'''&lt;/pre&gt;


Save and Exit &lt;code&gt;ctrl-x then Y then enter&lt;/code&gt;


== Q4 How do I run stream-lnd-htlc 24x7 ==

1. You can run in TMUX. See [[Special:MyLanguage/Umbrel_-_Installing_BoS#TMUX_Instructions|Umbrel_-_Installing_BoS#TMUX_Instructions]] for high-level instructions on installing tmux. 

2. Use disown &lt;code&gt;python3 stream-lnd-htlcs.py --lnd-dir ~/umbrel/lnd --silent SILENT --human-dates HUMANDATES 1&gt;/tmp/stream-lnd-htlc.log 2&gt;&amp;1 &amp; disown&lt;/code&gt;


== Q5 Is there a minimum amount of capital required for running a profitable node ==

Theoretically yes, you need to understand that for being profitable you need to recover the initial investments as well as ongoing costs. 
Your investments are in the hardware, UPS, etc. 
Your ongoing costs are electricity, internet charges, hosting fees if you run in the cloud, and channel open/close costs. In addition, you may optionally spend on rebalancing.

Therefore a very small node is unlikely to return to profitability over its useful life before new investments in hardware would be needed.

Considering the cost of hardware around 1.5M Sat and the expected lifetime of hardware as 5 years, a 10 M Sat node would need to earn 300_000 Sat a year (1_500_000/5) or 2,500 ppm (300_000/12/10) net profit per month to recover the investment. Assuming the node can route 100% of the local balance in a month, the node would need to earn 2,500 ppm net fees for each routing. In the same situation, a 100 M Sat node would need to earn the same 300_000 Sats a year but it drops to 250 ppm (300_000/12/100) net profit per month to recover the investment. Assuming the node can route 100% of the local balance in a month, the node can be profitable with just 250 ppm net fees for each routing.

Therefore larger the node, the higher the chances of achieving profitability. 

Do read further on [https://plebnet.wiki/wiki/Main_Page#Running_A_Profitable_Routing_Node running a profitable node] and all related sub-sections.


== Q6 How to allocate capital on a node? If I have 100 M Sat, how should I divide it? ==

There is genuinely no straight answer to this question and each node is unique in its objective and structure. However, it is easier to build a base first before worrying about centrality and hopness.
Generally as a rule of thumb keep 
# 30% capital for big chunky channels possibly to main routes (which you would discover only after watching the flow). These could the from the top 50 or 100 from [https://terminal.lightning.engineering/#/03c5528c628681aa17ab9e117aa3ee6f06c750dfb17df758ecabcd68f1567ad8c1 Terminal Engineering] or channels which improve your centrality, betweenness, and hopness. See the section on [[Special:MyLanguage/Resources|Resources]] for more details. 
# 40% for swaps/balanced channels you open in community which gives you one inbound to one outbound with well-connected nodes (you can do rings/triangle etc). Plebnet, #Plebs2Salvador, and other swap services are good place for these nodes.
# Remaining 30% for building the community/fun projects/helping/mentoring beginners nodes. The smaller nodes today could be next big deal for tomorrow.</text>
      <sha1>g5vnz8mzlvbw8q6dtmjnemvtgiecu1o</sha1>
    </revision>
  </page>
  <page>
    <title>Fees And Profitability</title>
    <ns>0</ns>
    <id>41</id>
    <revision>
      <id>2226</id>
      <parentid>2225</parentid>
      <timestamp>2022-01-08T15:37:16Z</timestamp>
      <contributor>
        <username>VS</username>
        <id>18</id>
      </contributor>
      <origin>2226</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="23053" sha1="ryng8rh53cl383t90j96kbzw0c6kvf1" xml:space="preserve">&lt;languages/&gt;
&lt;translate&gt;


== Intro == &lt;!--T:1--&gt;

&lt;!--T:2--&gt;
WARNING: Running a routing node is not for generating a primary source of income. The lightning technology is still developing at a very fast pace. The strategy which may generate some income would stop working very soon and something else will take their place. Do not commit more than you what you can have fun with when you enter the rabbit hole of a routing node.

&lt;!--T:3--&gt;
Having said that, most people enter the rabbit hole of a routing node to have fun but also generate some income, however small. The excitement to watch the first route pass through your node with 1 Sat fees is an amazing moment for many.

&lt;!--T:4--&gt;
To understand node profitability you must understand the various components of the economics of routing node.



== Components of Profitability == &lt;!--T:5--&gt;

&lt;!--T:6--&gt;
* Costs
you will incur the following costs during your routing node journey.

&lt;!--T:7--&gt;
# Capital Expense: One time expenses incurred for setting up your node. 
## Cost of node hardware and peripherals.
## Cost of UPS and other peripherals.

&lt;!--T:8--&gt;
You should aim to recover the cost of capital expenditures over the useful life of the expense. i.e. if the node is going to last you 3 years before you decide to upgrade, you must aim to recover 1/3 of the cost every year. In accounting terms this is called depreciation.

&lt;!--T:9--&gt;
# Cost Of Goods Sold 
## Channel Rebalancing Fee Paid if any. 
## Operating Expenses
## Chanel Open and Close Fees paid on-chain
# Other Expenses (minor but could be significant for some)
## Electricity Cost
## Network Bandwidth Cost

&lt;!--T:10--&gt;
Against these costs, you will earn routing fees as Income. If you offer other services via your node, you might have additional income. 

&lt;!--T:11--&gt;
You should measure the profitability of your node as below

&lt;!--T:12--&gt;
Gross Margin = Fee Earned - Cost of Good Sold (Fee Paid)

&lt;!--T:13--&gt;
Operating Margin = Gross Margin - Operating Expenses (Channel Open/Close fees and other costs)

&lt;!--T:14--&gt;
And finally, you have cash flow
Net Cash Flow = Cummulative Operating Margin - CAPEX

&lt;!--T:15--&gt;
Your aim should be to be positive on all these metrics. Of course, it takes time for a node to be fully profitable.



== Setting Routing Fees == &lt;!--T:16--&gt;

&lt;!--T:17--&gt;
Before you set your routing fees, you should have a good understanding of your costs. 

&lt;!--T:18--&gt;
Your routing fees is set up on each channel as
#Base Fees in mSat (1000 mSat = 1 Sat)
#Fee Rate in ppm   (1 ppm = 1 Sat per 1_000_000 Sat routed)

&lt;!--T:19--&gt;
You earn routing fees *only on flows going out of your channel*. In other words you earn fees for sending your Local Balance to Remote Balance of a channel. Your fees on the incoming channel are not relevant for the purpose for fee earned.

&lt;!--T:20--&gt;
Fee Earned = Base Fee/1_000 + Routed Amount * Fee Rate / 1_000_000

&lt;!--T:21--&gt;
Assume you had a Base Fee of 10_000 mSat and Fee Rate of 200 ppm. Now assume a payment of 750_000 Sats is forwarded via your node on this channel. The fee you will earn for this transaction would be &lt;pre&gt;10_000/1_000 + 200 * 750_000/1_000_000 = 10 + 150 = 160 Sats&lt;/pre&gt;



== Keeping an Eye == &lt;!--T:22--&gt;

&lt;!--T:23--&gt;
At a very high level Node P&amp;L = Net Sats = Earned - Paid - Chain-fees - PaidToBuyLiquidity - LoopOutCustodialFees

&lt;!--T:24--&gt;
Earned = Sats earned in a period ;
 
use-&gt; bos chart-fees-earned —days 7

&lt;!--T:25--&gt;
Paid = Sats paid for rebalancing, etc. ; 
use-&gt; bos chart-fees-paid —days 7

&lt;!--T:26--&gt;
Chain-fees = amount paid for on-chain fees close/open ; 
use-&gt; bos chart-chain-fees —days 7

&lt;!--T:27--&gt;
PaidToBuyLiquidity = example if you paid LNBIG 15k Sats to open an Inbound channel to you

&lt;!--T:28--&gt;
LoopOutCustodialFees = any Strike or Wallet Loop-out/Loop-in cost or Fees for transfer of funds to Node on-chain wallet

&lt;!--T:29--&gt;
If the Net Sats numbers every week is improving and moving towards positive (making profits), you are doing good.  If going another direction, not so good and analyze why it is negative.

&lt;!--T:30--&gt;
Once you have the measurement system in place for your node, you can then begin to benchmark how much +ve or -ve your peers are at, if someone is willing to share.

&lt;!--T:31--&gt;
You can also run the #s for days 30 or 60 or 90



== Your Node Routing KPI == &lt;!--T:32--&gt;

&lt;!--T:33--&gt;
If you do not measure you do not improve. Most new node runners worry that their node is not doing anything but if asked why they think that, they have no quality data. The first step in improving your node profitability is to first understand what is the performance and how it is taking shape week by week.

&lt;!--T:34--&gt;
A week (7 days ) is not a long time in node running. If you have to make changes in fee policy, routing policy, selecting new nodes to open channel with, and to make any other decisions regarding your node, give yourself a weeks time to think about and analyse. Lightning is a long term play and there is no need to be a grasshopper jumping from one idea to other, only to spend sats in the process. Adopt a policy and give it at least a week if not more to see the results. 

&lt;!--T:35--&gt;
You can use the weekend to deep dive your node performance and discuss with your mentors or in the group your reflections. 

&lt;!--T:36--&gt;
The following KPIs are suggested for measuring routing node performance over a rolling 7 day period (1 week)

&lt;!--T:37--&gt;
# Local Balance
# Sats Routed in the period
# % Routed (Sats Routed/Local Balance)*100
# NetFeePPM (Fee Earned - Fee Paid - OnChain Fees)/Local Balance * 1 000 000
# Fee Earned
# Fee Paid
# On Chain Fees



=== Two KPIs to Watch === &lt;!--T:38--&gt;

&lt;!--T:39--&gt;
The two most important KPIs (Key Performance Indicators) to watch are the &lt;code&gt;% Routed&lt;/code&gt; and &lt;code&gt;NetFeePPM&lt;/code&gt;. You can also use these KPIs to compare your node to your peers and other node runners. You can also display these KPIs along with the beautiful node art every Friday [https://twitter.com/search?q=%23NodeArtFriday&amp;src=typed_query #NodeArtFriday] for the world to see or in the plebnet group.

&lt;!--T:40--&gt;
% Routed
This KPI tells you how much of your local balance you routed in the last 7 days. This tells you how much of your capital your node is turning over. The higher the number, the better is the routing performance of your node at least in the number of transactions.

&lt;!--T:41--&gt;
NetFeePPM
While the first KPI is about the transactions, the second one is the main KPI about profitability. The higher the NetFeePPM, the more profitable your node is. If you are transacting 200% of your Local Balance each week but only earning 0 sats (or worse negative) then there is something to look into.

&lt;!--T:42--&gt;
A profitable node should route a good volume of Local Balance while earning higher NetFeePPM. 

&lt;!--T:43--&gt;
Raising fees can reduce the % Routed while dropping fees could increase the % Routed. 

&lt;!--T:44--&gt;
Your NetFeePPM has a sweet spot of % Routed which maximises the NetFeePPM and as a node operator, you need to find that and stick with that by adjusting the fee policy week over week. Once you find it, let it run for a long time until you have to tinker it again. 

&lt;!--T:45--&gt;
Suggestions:
If %Routed is &lt; 25% - review your channel balances to ensure sufficient liquidity for routing. Lower Fees. 
If %Routed is &gt; 75% - review your routing pairs with most routing and try to raise fees. You may have the potential to earn more. Review again next week.
Between 25% - 75% % Routed, you can work on improving the routing by providing active liquidity management or small changes to fee policies.



=== Automation of Routing KPI === &lt;!--T:46--&gt;

&lt;!--T:47--&gt;
This KPI idea was discussed in Plebnet and a fellow pleb has written a simple script to capture this. You can find it [https://github.com/Deekee62/bos_accounting here].

&lt;!--T:48--&gt;
Please note that this script provides KPIs from your routing node perspective and is not a replacement of accounting accurate profitability analysis.
If your node sends out a lot of payments that are not routing rebalance related, your fee paid could be an incorrect reflection in your KPIs. 
In addition, if you do a lot of LOOP out or custodial loop out (WoS/Strike/Wallet) then the fees paid on the end of the wallet for on-chain will also not be reflected in the KPIs produced by this script.



==== Installtion Instructions Node KPI Script ==== &lt;!--T:49--&gt;

&lt;!--T:50--&gt;
* make sure you installing these scripts on your node (in ssh). &lt;code&gt; ssh umbrel@umbrel.local &lt;/code&gt;. 

&lt;!--T:51--&gt;
* get the repository in your home directory (where you can run bos) &lt;code&gt;cd ~; git clone https://github.com/Deekee62/bos_accounting&lt;/code&gt; if you already have installation to upgrade just do &lt;code&gt;cd ~/bos_accounting; git pull https://github.com/Deekee62/bos_accounting&lt;/code&gt;

&lt;!--T:52--&gt;
* test the script &lt;code&gt; ~/bos_accounting/bos_accounting.sh&lt;/code&gt; it should run for sometime and give you single line output of various numbers. If you get an error, you may have to adjust some settings in the script or your installation. Reach out for help in the group with the error you are getting. The output column headers are the following

&lt;!--T:53--&gt;
&lt;pre&gt;


======================================================================================================================================= &lt;!--T:54--&gt;

                              &lt;!--T:55--&gt;
Local                             Weekly Fees earned compared to local channel balance
                            Channel      Weekly
                            Balance   Forwarded   percent    earned     paid      net      earned         paid    chain fee         net
      Date        Time         sats        sats                                              sats         sats         sats        sats  


======================================================================================================================================= &lt;!--T:56--&gt;

&lt;!--T:57--&gt;
&lt;/pre&gt;

&lt;!--T:58--&gt;
* If you are happy with the results, you can place the script in cron to run every night automatically and you can check the results at your convenience. 
&lt;code&gt;cp ~/bos_accounting/bos_accounting.log ~/&lt;/code&gt; and then add to crontab via 
&lt;code&gt; crontab -e&lt;/code&gt; and add the following lines. 
&lt;pre&gt; 55 23 * * * ~/bos_accounting/bos_accounting.sh &gt;&gt;~/bos_accounting.log 2&gt;&amp;1&lt;/pre&gt;
&lt;code&gt;ctrl -x y enter&lt;/code&gt; to save and exit
check via &lt;code&gt;crontab -l&lt;/code&gt; and you can see your entry.

&lt;!--T:59--&gt;
Raspiblitz users, please run the script with the same user who can run bos. You may have to adopt the script to replace the line &lt;code&gt;BOS=`which bos`&lt;/code&gt; by &lt;code&gt;BOS=path of bos on your installation&lt;/code&gt; if you get issues in running via cron.

&lt;!--T:60--&gt;
This will run the script every night and you can see the results every day by &lt;code&gt;cat ~/bos_accounting.log&lt;/code&gt;

&lt;!--T:61--&gt;
Once you are measuring the node performance and comfortable with it, you can move on to managing your fee policies. Described in the following sections.


=== Node Fee Policies === &lt;!--T:62--&gt;

&lt;!--T:63--&gt;
Before jumping into fee policies, let us review some of the popular approaches in brief:



==== #ZeroBaseFee ==== &lt;!--T:64--&gt;

&lt;!--T:65--&gt;
Proponents for #ZeroBase fee claim that the network pathfinding algorithm can be improved if the base fee is removed from the pathfinding calculation. Today the pathfinding problem is an NP-Hard problem but without a base fee, it becomes a linear function. &lt;sup&gt;citation needed&lt;/sup&gt;

&lt;!--T:66--&gt;
If you wish to follow 0 base fee, you can set up your base fee = 0 for selected or all channels. This is also used to indicate your node supporting zero base fee.

&lt;!--T:67--&gt;
Some nodes go a step further and drop their fee rate also to 0 ppm and that becomes #ZeroFeeRouting. 

&lt;!--T:68--&gt;
Some nodes go for 0 base fee and low fee rate which becomes #LowFeeRouting and promotes micro payments through their nodes.

&lt;!--T:69--&gt;
Please note in the case of #ZeroFeeRouting or #LowFeeRouting you are not going to earn very little or if at all any routing fees and if your node does not rebalance itself, you will incur rebalancing fees.



==== Static Fee Rate ==== &lt;!--T:70--&gt;

&lt;!--T:71--&gt;
Another popular approach is to keep a static fee rate (say 200 ppm) for all channels along with base-fee = 0 or 1 Sat (1000 mSat). 
The advantage of this approach is that it allows you to maintain your node once a day or even a week and make one change that affects all channels. It reduces node management drastically if you are manually managing fees.
You need to make sure that the average cost of rebalance is lower than the fee rate or else you will lose sats. See the section about node KPIs and keep that in mind and avoid aggressive and obsessive rebalancing. If network see two way traffic you can still route well with static fee and you will not generate much gossip traffic for the network too.



==== Static Base Fee ==== &lt;!--T:72--&gt;

&lt;!--T:73--&gt;
Variation of static fee rate is to use static base fee (or eat all you can buffet). Here you setup a static base fee (say 199 Sats 199000 mSat) and a fee-rate of 0 ppm. Any routes passing via your node will pay a fixed fee 199 sat. Naturally this favours larger transactions over smaller transactions (for example 199 fee for 2 000 000 sats is reasonable but for 1 000 sats is very expensive).
This fee policy can work for you and you can find the sweet spot for your node which balances the number of transaction, transaction size, and effective fee earned. It will also be a simple process that each forward will earn you same fee.



==== Liquidity Driven Fee Adjustment ==== &lt;!--T:74--&gt;

&lt;!--T:75--&gt;
Finally, a popular approach is to adjust your fees with your liquidity. 

&lt;!--T:76--&gt;
When high on local, let it flow
When low on local, go slow

&lt;!--T:77--&gt;
The idea is that when you have liquidity at your local side, you charge low (but reasonable to make profit) fees. As liquidity moves away earning you fees, you start raising your fees. As a further extension, you can also set your fees high to stop routing through a channel where there is no liquidity. This is [https://twitter.com/search?q=%239999BaseFee&amp;src=typed_query #9999BaseFee]. If your channel has run out of liquidity on your end, the network does not realise this and continues to send you traffic if your fees are low. This causes "Temporary Channel Failure" on the network and not only creates delays but also affects your node reputation. By presenting a low fee channel with zero or close to zero liquidity you are affecting the network path finding. If you cannot provide the liquidity (via rebalance or other means), it is sensible to step out of the path finding paths which can be done by raising your fees. 

&lt;!--T:78--&gt;
There are automation tools which can be used to implement automatic fee management for the node. The tool works for most strategies. Find the details below.



==== Installing Charge-Lnd ==== &lt;!--T:79--&gt;

&lt;!--T:80--&gt;
Detailed instructions are provided [https://github.com/accumulator/charge-lnd/blob/master/INSTALL.md here] including options to install in docker. The following are simple instructions which should work for everyone specially umbrel on pi.

&lt;!--T:81--&gt;
# &lt;code&gt;cd ~&lt;/code&gt;
# &lt;code&gt;git clone https://github.com/accumulator/charge-lnd&lt;/code&gt; if you want to use max-htlc=-1 feature, use &lt;code&gt;git clone https://github.com/bhaagbosedk/charge-lnd&lt;/code&gt;
# &lt;code&gt;cd charge-lnd&lt;/code&gt;
# &lt;code&gt;pip3 install -r requirements.txt .&lt;/code&gt; It will take some time. Take a coffee.
# &lt;code&gt;~/.local/bin/charge-lnd --help&lt;/code&gt; If this gives you the help options, you are done!

&lt;!--T:82--&gt;
'''Dry Run''' 

&lt;!--T:83--&gt;
Create a configuration file for your fee policy. You can use the sample configuration file of charge-lnd [https://github.com/accumulator/charge-lnd/blob/master/charge.config.example here] or the following is a very basic configuration you can use straight away

&lt;!--T:84--&gt;
&lt;code&gt;nano ~/charge-lnd/myconfig&lt;/code&gt;

&lt;!--T:85--&gt;
Then paste this (change as required)

&lt;!--T:86--&gt;
If you are an older version of lnd or do not prefer to disable the channel, you can try this policy

&lt;!--T:87--&gt;
&lt;pre&gt;
# default policy is proportional
[default]
chan.min_ratio = 0
chan.max_ratio = 1
strategy = proportional
#Please change the fees to what you want
base_fee_msat = 0
min_fee_ppm = 49
max_fee_ppm = 249

&lt;!--T:88--&gt;
# place holder for your defaults for your fee policies
[0-mydefaults]
# no strategy, so this only sets some defaults
min_fee_ppm_delta = 10
min_htlc_msat = 1_000
#Change if you want to route smaller htlc
max_htlc_msat_ratio = 1

&lt;!--T:89--&gt;
#9999BaseFee should be evaluated first before other fees are set.
[1-stop_routing]
# if &lt; 10% on local increase fees very high
chan.max_ratio = 0.1
strategy = static
base_fee_msat = 9999_000
fee_ppm = 0
&lt;/pre&gt;

&lt;!--T:90--&gt;
if lnd 13 or higher (disable channel is supported). However be mindful that disable channel can send confusing signal to network and your peers might think the disable is due to connectivity issues. It may hamper your ranking on terminal.

&lt;!--T:91--&gt;
&lt;pre&gt;
[default]
chan.min_ratio = 0
chan.max_ratio = 1
strategy = proportional
#Please change the fees to what you want
base_fee_msat = 0
min_fee_ppm = 49
max_fee_ppm = 249

&lt;!--T:92--&gt;
# place holder for your defaults for your fee policies
[0-mydefaults]
# no strategy, so this only sets some defaults
min_fee_ppm_delta = 10
min_htlc_msat = 1_000
#Change if you want to route smaller htlc
max_htlc_msat_ratio = 1

&lt;!--T:93--&gt;
# This policy will disable a channel, to avoid routing failures when the balance drops below 250_000 Sats (usual payment amount). Adjust as necessary.
[1-stop_routing]
# if &lt; 10% on local (for smaller channel), disable channel
# if channel local balance is less than 250_000 (for larger channels), disable channel

&lt;!--T:94--&gt;
chan.max_ratio = 0.10
chan.max_local_balance = 250_000
strategy = disable
fee_ppm = 999

&lt;!--T:95--&gt;
&lt;/pre&gt;



&lt;!--T:96--&gt;
Save and Exit &lt;code&gt;ctrl-x Y enter&lt;/code&gt;

&lt;!--T:97--&gt;
Run in dry run mode. This will run the script and evaluate everything but will not make the change. Make sure to change the path of lnddir to whatever applies for your system.

&lt;!--T:98--&gt;
&lt;code&gt;~/.local/bin/charge-lnd --lnddir ~/umbrel/lnd -c ~/charge-lnd/myconfig --dry-run&lt;/code&gt;

&lt;!--T:99--&gt;
If you are happy with the output you can run the same command without &lt;code&gt;--dry-run&lt;/code&gt; and it will make the change.

&lt;!--T:100--&gt;
'''Multiple Channels'''
Charge-lnd does not handle multiple channels with same peer properly for proportional fees. See [https://github.com/accumulator/charge-lnd/issues/43 issue report here]. You should instead set up static policy (or ignore policy and manage fees manually) for those peers who have multiple channels with you. You can use this policy and place it between 0 and 1 (i.e. before stop routing)

&lt;!--T:101--&gt;
&lt;pre&gt;
[0.5 Multiple Channels]
#Special policy to handle multiple channels with same peer to avoid incorrect fees setup.
node.id = &lt;pubkey - multiple can be provided separated by ,&gt;

&lt;!--T:102--&gt;
strategy = static
fee_ppm = 149
base_fee_msat = 0

&lt;!--T:103--&gt;
&lt;/pre&gt;

&lt;!--T:104--&gt;
'''Now add to cron'''
If you are happy with your fee policies you can run charge-lnd in cron to run regularly.

&lt;!--T:105--&gt;
&lt;code&gt;crontab -e&lt;/code&gt;

&lt;!--T:106--&gt;
if you are asked to choose an editor, choose &lt;/code&gt;/bin/nano&lt;/code&gt;

&lt;!--T:107--&gt;
copy this line adjusting as necessary specially the path to lnddir for your system

&lt;!--T:108--&gt;
&lt;code&gt;42 */4 * * * /home/umbrel/.local/bin/charge-lnd --lnddir /home/umbrel/umbrel/lnd -c /home/umbrel/charge-lnd/myconfig &gt; /tmp/charge-lnd.log 2&gt;&amp;1; date &gt;&gt; /tmp/charge-lnd.log&lt;/code&gt;

&lt;!--T:109--&gt;
Save and Exit &lt;code&gt;ctrl-x Y enter&lt;/code&gt;

&lt;!--T:110--&gt;
Check by &lt;code&gt;crontab -l&lt;/code&gt; and you can see your entry. This will allow system to run this script on 42nd minute every 4 hours. You can choose any random number between 0-59 instead of 42 (otherwise entire plebnet will update the fees on 42nd minute bringing down the gossip network). 

&lt;!--T:111--&gt;
'''My Node Installation'''
installation for mynode are slightly different (path and need for super user). Replace some of the commands as below

&lt;!--T:112--&gt;
&lt;pre&gt;
sudo nano /home/admin/charge-lnd/charge.config

&lt;!--T:113--&gt;
sudo -u admin /home/admin/.local/bin/charge-lnd -c /home/admin/charge-lnd/charge.config

&lt;!--T:114--&gt;
sudo su - admin

&lt;!--T:115--&gt;
crontab -e

&lt;!--T:116--&gt;
42 */4 * * * /home/admin/.local/bin/charge-lnd -c /home/admin/charge-lnd/charge.config
&lt;/pre&gt;

&lt;/translate&gt;

====Using Charge-Lnd to set Maximum HTLCs====

Charge-Lnd can also be an easy way to implement auto-adjusting max-htlcs. 

A maximum htlc setting can be used to limit the size of outbound transactions that can pass through a channel, depending on the channel liquidity. This can be a good thing, because when someone tries to forward a payment through one of your channels, but that channel doesn't have enough liquidity, it will cause a payment failure at your node. If your node gets a lot of payment failures it may affect your node's reliability reputation in the network. By setting max-htlc limits so that your channels are only considered when they have enough liquidity to handle the payment, can reduce the number of failures your node experiences, and improve the lightning network as a whole.

Please note that setting max_htlc can reveal your channel local balance. Also updating it too often can spam the gossip network (therefore please update it along with your charge-lnd fee policy). If your max_htlc is reduced, and subsequently your channel is rebalance, your channel will be restricted to smaller size forwards until the next run of charge-lnd.

Updating max_htlc is still experimental.

Default Charge-lnd does now allow setting max_htlc to local balance. [https://github.com/accumulator/charge-lnd/issues/48 See issue report]. Therefore a [https://github.com/BhaagBoseDK/charge-lnd fork was created for those who wish to use this feature].

If you already use charge-lnd and wish to use max_htlc to set to your local balance:

&lt;pre&gt;
# Save configuration file and remove previous installation. If your installation is in a different directory adapt the commands accordingly.
cp ~/charge-lnd/*.config /tmp/
rm -rf ~/charge-lnd

&lt;/pre&gt;

Then follow the installation steps [https://plebnet.wiki/wiki/Fees_And_Profitability#Installing_Charge-Lnd here] replacing original git clone by &lt;code&gt; git clone https://github.com/BhaagBoseDK/charge-lnd  &lt;/code&gt;

Now in your charge-lnd config file you can add &lt;code&gt;max_htlc_msat = -1&lt;/code&gt; which is encoded to make your max-htlc become a value just below the local balance of the channel it is being applied to.

if you add to a specific policy, it will apply to that specific policy.

if you add it under [my defaults] section it would apply to all policies. See [https://plebnet.wiki/wiki/User:VS#My_Charge-LND_Configuration a sample here]

 
See [[Using Charge-Lnd to Adjust HTLC Limits]]</text>
      <sha1>ryng8rh53cl383t90j96kbzw0c6kvf1</sha1>
    </revision>
  </page>
  <page>
    <title>Fees And Profitability/en</title>
    <ns>0</ns>
    <id>946</id>
    <revision>
      <id>1474</id>
      <timestamp>2021-10-02T20:56:17Z</timestamp>
      <contributor>
        <username>FuzzyBot</username>
        <id>29</id>
      </contributor>
      <comment>Updating to match new version of source page</comment>
      <origin>1474</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="19037" sha1="gqjkheuo8kzwhima6593yi2nygwuevx" xml:space="preserve">&lt;languages/&gt;


== Intro ==

WARNING: Running a routing node is not for generating a primary source of income. The lightning technology is still developing at a very fast pace. The strategy which may generate some income would stop working very soon and something else will take their place. Do not commit more than you what you can have fun with when you enter the rabbit hole of a routing node.

Having said that, most people enter the rabbit hole of a routing node to have fun but also generate some income, however small. The excitement to watch the first route pass through your node with 1 Sat fees is an amazing moment for many.

To understand node profitability you must understand the various components of the economics of routing node.



== Components of Profitability ==

* Costs
you will incur the following costs during your routing node journey.

# Capital Expense: One time expenses incurred for setting up your node. 
## Cost of node hardware and peripherals.
## Cost of UPS and other peripherals.

You should aim to recover the cost of capital expenditures over the useful life of the expense. i.e. if the node is going to last you 3 years before you decide to upgrade, you must aim to recover 1/3 of the cost every year. In accounting terms this is called depreciation.

# Cost Of Goods Sold 
## Channel Rebalancing Fee Paid if any. 
## Operating Expenses
## Chanel Open and Close Fees paid on-chain
# Other Expenses (minor but could be significant for some)
## Electricity Cost
## Network Bandwidth Cost

Against these costs, you will earn routing fees as Income. If you offer other services via your node, you might have additional income. 

You should measure the profitability of your node as below

Gross Margin = Fee Earned - Cost of Good Sold (Fee Paid)

Operating Margin = Gross Margin - Operating Expenses (Channel Open/Close fees and other costs)

And finally, you have cash flow
Net Cash Flow = Cummulative Operating Margin - CAPEX

Your aim should be to be positive on all these metrics. Of course, it takes time for a node to be fully profitable.



== Setting Routing Fees ==

Before you set your routing fees, you should have a good understanding of your costs. 

Your routing fees is set up on each channel as
#Base Fees in mSat (1000 mSat = 1 Sat)
#Fee Rate in ppm   (1 ppm = 1 Sat per 1_000_000 Sat routed)

You earn routing fees *only on flows going out of your channel*. In other words you earn fees for sending your Local Balance to Remote Balance of a channel. Your fees on the incoming channel are not relevant for the purpose for fee earned.

Fee Earned = Base Fee/1_000 + Routed Amount * Fee Rate / 1_000_000

Assume you had a Base Fee of 10_000 mSat and Fee Rate of 200 ppm. Now assume a payment of 750_000 Sats is forwarded via your node on this channel. The fee you will earn for this transaction would be &lt;pre&gt;10_000/1_000 + 200 * 750_000/1_000_000 = 10 + 150 = 160 Sats&lt;/pre&gt;



== Keeping an Eye ==

At a very high level Node P&amp;L = Net Sats = Earned - Paid - Chain-fees - PaidToBuyLiquidity - LoopOutCustodialFees

Earned = Sats earned in a period ;
 
use-&gt; bos chart-fees-earned —days 7

Paid = Sats paid for rebalancing, etc. ; 
use-&gt; bos chart-fees-paid —days 7

Chain-fees = amount paid for on-chain fees close/open ; 
use-&gt; bos chart-chain-fees —days 7

PaidToBuyLiquidity = example if you paid LNBIG 15k Sats to open an Inbound channel to you

LoopOutCustodialFees = any Strike or Wallet Loop-out/Loop-in cost or Fees for transfer of funds to Node on-chain wallet

If the Net Sats numbers every week is improving and moving towards positive (making profits), you are doing good.  If going another direction, not so good and analyze why it is negative.

Once you have the measurement system in place for your node, you can then begin to benchmark how much +ve or -ve your peers are at, if someone is willing to share.

You can also run the #s for days 30 or 60 or 90



== Your Node Routing KPI ==

If you do not measure you do not improve. Most new node runners worry that their node is not doing anything but if asked why they think that, they have no quality data. The first step in improving your node profitability is to first understand what is the performance and how it is taking shape week by week.

A week (7 days ) is not a long time in node running. If you have to make changes in fee policy, routing policy, selecting new nodes to open channel with, and to make any other decisions regarding your node, give yourself a weeks time to think about and analyse. Lightning is a long term play and there is no need to be a grasshopper jumping from one idea to other, only to spend sats in the process. Adopt a policy and give it at least a week if not more to see the results. 

You can use the weekend to deep dive your node performance and discuss with your mentors or in the group your reflections. 

The following KPIs are suggested for measuring routing node performance over a rolling 7 day period (1 week)

# Local Balance
# Sats Routed in the period
# % Routed (Sats Routed/Local Balance)*100
# NetFeePPM (Fee Earned - Fee Paid - OnChain Fees)/Local Balance * 1 000 000
# Fee Earned
# Fee Paid
# On Chain Fees



=== Two KPIs to Watch ===

The two most important KPIs to watch are the &lt;code&gt;% Routed&lt;/code&gt; and &lt;code&gt;NetFeePPM&lt;/code&gt;. You can also use these KPIs to compare your node to your peers and other node runners. You can also display these KPIs along with the beautiful node art every Friday [https://twitter.com/search?q=%23NodeArtFriday&amp;src=typed_query #NodeArtFriday] for the world to see or in the plebnet group.

% Routed
This KPI tells you how much of your local balance you routed in the last 7 days. This tells you how much of your capital your node is turning over. The higher the number, the better is the routing performance of your node at least in the number of transactions.

NetFeePPM
While the first KPI is about the transactions, the second one is the main KPI about profitability. The higher the NetFeePPM, the more profitable your node is. If you are transacting 200% of your Local Balance each week but only earning 0 sats (or worse negative) then there is something to look into.

A profitable node should route a good volume of Local Balance while earning higher NetFeePPM. 

Raising fees can reduce the % Routed while dropping fees could increase the % Routed. 

Your NetFeePPM has a sweet spot of % Routed which maximises the NetFeePPM and as a node operator, you need to find that and stick with that by adjusting the fee policy week over week. Once you find it, let it run for a long time until you have to tinker it again. 

Suggestions:
If %Routed is &lt; 25% - review your channel balances to ensure sufficient liquidity for routing. Lower Fees. 
If %Routed is &gt; 75% - review your routing pairs with most routing and try to raise fees. You may have the potential to earn more. Review again next week.
Between 25% - 75% % Routed, you can work on improving the routing by providing active liquidity management or small changes to fee policies.



=== Automation of Routing KPI ===

This KPI idea was discussed in Plebnet and a fellow pleb has written a simple script to capture this. You can find it [https://github.com/Deekee62/bos_accounting here].

Please note that this script provides KPIs from your routing node perspective and is not a replacement of accounting accurate profitability analysis.
If your node sends out a lot of payments that are not routing rebalance related, your fee paid could be an incorrect reflection in your KPIs. 
In addition, if you do a lot of LOOP out or custodial loop out (WoS/Strike/Wallet) then the fees paid on the end of the wallet for on-chain will also not be reflected in the KPIs produced by this script.



==== Installtion Instructions Node KPI Script ====

* make sure you installing these scripts on your node (in ssh). &lt;code&gt; ssh umbrel@umbrel.local &lt;/code&gt;. 

* get the repository in your home directory (where you can run bos) &lt;code&gt;cd ~; git clone https://github.com/Deekee62/bos_accounting&lt;/code&gt; if you already have installation to upgrade just do &lt;code&gt;cd ~/bos_accounting; git pull https://github.com/Deekee62/bos_accounting&lt;/code&gt;

* test the script &lt;code&gt; ~/bos_accounting/bos_accounting.sh&lt;/code&gt; it should run for sometime and give you single line output of various numbers. If you get an error, you may have to adjust some settings in the script or your installation. Reach out for help in the group with the error you are getting. The output column headers are the following

&lt;pre&gt;


=======================================================================================================================================

                              Local                             Weekly Fees earned compared to local channel balance
                            Channel      Weekly
                            Balance   Forwarded   percent    earned     paid      net      earned         paid    chain fee         net
      Date        Time         sats        sats                                              sats         sats         sats        sats  


=======================================================================================================================================

&lt;/pre&gt;

* If you are happy with the results, you can place the script in cron to run every night automatically and you can check the results at your convenience. 
&lt;code&gt;cp ~/bos_accounting/bos_accounting.log ~/&lt;/code&gt; and then add to crontab via 
&lt;code&gt; crontab -e&lt;/code&gt; and add the following lines. 
&lt;pre&gt; 55 23 * * * ~/bos_accounting/bos_accounting.sh &gt;&gt;~/bos_accounting.log 2&gt;&amp;1&lt;/pre&gt;
&lt;code&gt;ctrl -x y enter&lt;/code&gt; to save and exit
check via &lt;code&gt;crontab -l&lt;/code&gt; and you can see your entry.

Raspiblitz users, please run the script with the same user who can run bos. You may have to adopt the script to replace the line &lt;code&gt;BOS=`which bos`&lt;/code&gt; by &lt;code&gt;BOS=path of bos on your installation&lt;/code&gt; if you get issues in running via cron.

This will run the script every night and you can see the results every day by &lt;code&gt;cat ~/bos_accounting.log&lt;/code&gt;

Once you are measuring the node performance and comfortable with it, you can move on to managing your fee policies. Described in the following sections.


=== Node Fee Policies ===

Before jumping into fee policies, let us review some of the popular approaches in brief:



==== #ZeroBaseFee ====

Proponents for #ZeroBase fee claim that the network pathfinding algorithm can be improved if the base fee is removed from the pathfinding calculation. Today the pathfinding problem is an NP-Hard problem but without a base fee, it becomes a linear function. &lt;sup&gt;citation needed&lt;/sup&gt;

If you wish to follow 0 base fee, you can set up your base fee = 0 for selected or all channels. This is also used to indicate your node supporting zero base fee.

Some nodes go a step further and drop their fee rate also to 0 ppm and that becomes #ZeroFeeRouting. 

Some nodes go for 0 base fee and low fee rate which becomes #LowFeeRouting and promotes micro payments through their nodes.

Please note in the case of #ZeroFeeRouting or #LowFeeRouting you are not going to earn very little or if at all any routing fees and if your node does not rebalance itself, you will incur rebalancing fees.



==== Static Fee Rate ====

Another popular approach is to keep a static fee rate (say 200 ppm) for all channels along with base-fee = 0 or 1 Sat (1000 mSat). 
The advantage of this approach is that it allows you to maintain your node once a day or even a week and make one change that affects all channels. It reduces node management drastically if you are manually managing fees.
You need to make sure that the average cost of rebalance is lower than the fee rate or else you will lose sats. See the section about node KPIs and keep that in mind and avoid aggressive and obsessive rebalancing. If network see two way traffic you can still route well with static fee and you will not generate much gossip traffic for the network too.



==== Static Base Fee ====

Variation of static fee rate is to use static base fee (or eat all you can buffet). Here you setup a static base fee (say 199 Sats 199000 mSat) and a fee-rate of 0 ppm. Any routes passing via your node will pay a fixed fee 199 sat. Naturally this favours larger transactions over smaller transactions (for example 199 fee for 2 000 000 sats is reasonable but for 1 000 sats is very expensive).
This fee policy can work for you and you can find the sweet spot for your node which balances the number of transaction, transaction size, and effective fee earned. It will also be a simple process that each forward will earn you same fee.



==== Liquidity Driven Fee Adjustment ====

Finally, a popular approach is to adjust your fees with your liquidity. 

When high on local, let it flow
When low on local, go slow

The idea is that when you have liquidity at your local side, you charge low (but reasonable to make profit) fees. As liquidity moves away earning you fees, you start raising your fees. As a further extension, you can also set your fees high to stop routing through a channel where there is no liquidity. This is [https://twitter.com/search?q=%239999BaseFee&amp;src=typed_query #9999BaseFee]. If your channel has run out of liquidity on your end, the network does not realise this and continues to send you traffic if your fees are low. This causes "Temporary Channel Failure" on the network and not only creates delays but also affects your node reputation. By presenting a low fee channel with zero or close to zero liquidity you are affecting the network path finding. If you cannot provide the liquidity (via rebalance or other means), it is sensible to step out of the path finding paths which can be done by raising your fees. 

There are automation tools which can be used to implement automatic fee management for the node. The tool works for most strategies. Find the details below.



==== Installing Charge-Lnd ====

Detailed instructions are provided [https://github.com/accumulator/charge-lnd/blob/master/INSTALL.md here] including options to install in docker. The following are simple instructions which should work for everyone specially umbrel on pi.

# &lt;code&gt;cd ~&lt;/code&gt;
# &lt;code&gt;git clone https://github.com/accumulator/charge-lnd&lt;/code&gt;
# &lt;code&gt;cd charge-lnd&lt;/code&gt;
# &lt;code&gt;pip3 install -r requirements.txt .&lt;/code&gt; It will take some time. Take a coffee.
# &lt;code&gt;~/.local/bin/charge-lnd --help&lt;/code&gt; If this gives you the help options, you are done!

'''Dry Run''' 

Create a configuration file for your fee policy. You can use the sample configuration file of charge-lnd [https://github.com/accumulator/charge-lnd/blob/master/charge.config.example here] or the following is a very basic configuration you can use straight away

&lt;code&gt;nano ~/charge-lnd/myconfig&lt;/code&gt;

Then paste this (change as required)

If you are an older version of lnd or do not prefer to disable the channel, you can try this policy

&lt;pre&gt;
# default policy is proportional
[default]
chan.min_ratio = 0
chan.max_ratio = 1
strategy = proportional
#Please change the fees to what you want
base_fee_msat = 0
min_fee_ppm = 49
max_fee_ppm = 249

# place holder for your defaults for your fee policies
[0-mydefaults]
# no strategy, so this only sets some defaults
min_fee_ppm_delta = 10
min_htlc_msat = 1_000
#Change if you want to route smaller htlc
max_htlc_msat_ratio = 1

#9999BaseFee should be evaluated first before other fees are set.
[1-stop_routing]
# if &lt; 10% on local increase fees very high
chan.max_ratio = 0.1
strategy = static
base_fee_msat = 9999_000
fee_ppm = 0
&lt;/pre&gt;

if lnd 13 or higher (disable channel is supported). However be mindful that disable channel can send confusing signal to network and your peers might think the disable is due to connectivity issues. It may hamper your ranking on terminal.

&lt;pre&gt;
[default]
chan.min_ratio = 0
chan.max_ratio = 1
strategy = proportional
#Please change the fees to what you want
base_fee_msat = 0
min_fee_ppm = 49
max_fee_ppm = 249

# place holder for your defaults for your fee policies
[0-mydefaults]
# no strategy, so this only sets some defaults
min_fee_ppm_delta = 10
min_htlc_msat = 1_000
#Change if you want to route smaller htlc
max_htlc_msat_ratio = 1

# This policy will disable a channel, to avoid routing failures when the balance drops below 250_000 Sats (usual payment amount). Adjust as necessary.
[1-stop_routing]
# if &lt; 10% on local (for smaller channel), disable channel
# if channel local balance is less than 250_000 (for larger channels), disable channel

chan.max_ratio = 0.10
chan.max_local_balance = 250_000
strategy = disable
fee_ppm = 999

&lt;/pre&gt;



Save and Exit &lt;code&gt;ctrl-x Y enter&lt;/code&gt;

Run in dry run mode. This will run the script and evaluate everything but will not make the change. Make sure to change the path of lnddir to whatever applies for your system.

&lt;code&gt;~/.local/bin/charge-lnd --lnddir ~/umbrel/lnd -c ~/charge-lnd/myconfig --dry-run&lt;/code&gt;

If you are happy with the output you can run the same command without &lt;code&gt;--dry-run&lt;/code&gt; and it will make the change.

'''Multiple Channels'''
Charge-lnd does not handle multiple channels with same peer properly for proportional fees. See [https://github.com/accumulator/charge-lnd/issues/43 issue report here]. You should instead set up static policy (or ignore policy and manage fees manually) for those peers who have multiple channels with you. You can use this policy and place it between 0 and 1 (i.e. before stop routing)

&lt;pre&gt;
[0.5 Multiple Channels]
#Special policy to handle multiple channels with same peer to avoid incorrect fees setup.
node.id = &lt;pubkey - multiple can be provided separated by ,&gt;

strategy = static
fee_ppm = 149
base_fee_msat = 0

&lt;/pre&gt;

'''Now add to cron'''
If you are happy with your fee policies you can run charge-lnd in cron to run regularly.

&lt;code&gt;crontab -e&lt;/code&gt;

if you are asked to choose an editor, choose &lt;/code&gt;/bin/nano&lt;/code&gt;

copy this line adjusting as necessary specially the path to lnddir for your system

&lt;code&gt;42 */4 * * * /home/umbrel/.local/bin/charge-lnd --lnddir /home/umbrel/umbrel/lnd -c /home/umbrel/charge-lnd/myconfig &gt; /tmp/charge-lnd.log 2&gt;&amp;1; date &gt;&gt; /tmp/charge-lnd.log&lt;/code&gt;

Save and Exit &lt;code&gt;ctrl-x Y enter&lt;/code&gt;

Check by &lt;code&gt;crontab -l&lt;/code&gt; and you can see your entry. This will allow system to run this script on 42nd minute every 4 hours. You can choose any random number between 0-59 instead of 42 (otherwise entire plebnet will update the fees on 42nd minute bringing down the gossip network). 

'''My Node Instalaltion'''
installation for mynode are slightly different (path and need for super user). Replace some of the commands as below

&lt;pre&gt;
sudo nano /home/admin/charge-lnd/charge.config

sudo -u admin /home/admin/.local/bin/charge-lnd -c /home/admin/charge-lnd/charge.config

sudo su - admin

crontab -e

42 */4 * * * /home/admin/.local/bin/charge-lnd -c /home/admin/charge-lnd/charge.config
&lt;/pre&gt;</text>
      <sha1>gqjkheuo8kzwhima6593yi2nygwuevx</sha1>
    </revision>
  </page>
  <page>
    <title>Getting Inbound Liquidity</title>
    <ns>0</ns>
    <id>1261</id>
    <revision>
      <id>2421</id>
      <parentid>2412</parentid>
      <timestamp>2022-04-27T05:54:35Z</timestamp>
      <contributor>
        <username>VS</username>
        <id>18</id>
      </contributor>
      <comment>Amboss Magma</comment>
      <origin>2421</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="6739" sha1="6ptpejpicc2ugs3hdt0xokr6c03322w" xml:space="preserve">&lt;languages/&gt;
&lt;translate&gt;
= Intro = &lt;!--T:1--&gt;

Your lightning network (LN) channels have sats (i.e. satoshi, 1×10&lt;sup&gt;-8&lt;/sup&gt; Bitcoins) on your local side or the remote side of the channel.

LN sats on local side of channel are referred to as "outbound liquidity" - these are sats you control and can send.
LN Sats on remote side of channel are referred to as "inbound liquidity" - these are sats your peer controls and via which you can receive to your side of channel.

Opening a typical simple channel has all the sats on local side of whoever opens at start.

In order to receive satoshi over lightning you need to have some satoshi on a remote side of some channel, otherwise called "inbound liquidity".

There are many ways to increase inbound liquidity which include:
* having or paying for someone else to open a channel to you so the sats are on the remote to you side of channel
* opening a balanced channel so sats are on both sides of channel
* sending LN local sats to another self-custodial wallet you control (some of which can let you send sats back to your on-chain address)
* sending LN local sats to a [https://docs.lightning.engineering/the-lightning-network/lightning-overview/understanding-submarine-swaps submarine/atomic swap] provider where revealing a secret number results in them getting your LN sats and you getting on-chain sats in trust-minimized manner.
* sending LN local sats to another wallet you do not control (e.g. exchange, hosted wallet) that lets you withdraw to on-chain address
* someone can pay you by opening a new channel where some fraction of the sats from very start are already pushed onto your side of the channel

= Is needing inbound liquidity a risk for LN adoption? = &lt;!--T:2--&gt;

Before the tools and methods to acquire inbound liquidity were readily available, it got a reputation for being challenging to acquire.

Now there are many tools to do this, which are continuously improving, and many of which can be and are often automated.

In fact, it can be said inbound liquidity is easier to get than outbound liquidity as inbound liquidity are the remote sats others provide. Outbound liquidity is limited to local sats you have. Every time a user purchases something by spending their local sats, they automatically acquire that amount of inbound liquidity.

= Resources for Getting Inbound Liquidity = &lt;!--T:3--&gt;

* Make a payment to someone, buy something from a merchant, make a donation to a charity or project which accepts Lightning payment. All of these will move sats from your local to remote and you will naturally get a balanced channel.
* ''' Get a channel from BCash is trash ''' Make sure you have a node alias (visible on graph - check [https://amboss.space/ amboss]), have public channels open and have 2-4M capacity, Add BCash_Is_Trash &lt;code&gt;0298f6074a454a1f5345cb2a7c6f9fce206cd0bf675d177cdbf0ca7508dd28852f&lt;/code&gt; or &lt;code&gt;0298f6074a454a1f5345cb2a7c6f9fce206cd0bf675d177cdbf0ca7508dd28852f@73.119.255.56:9735&lt;/code&gt; as a peer (do not open channel). They might open channel to you.

This information can change and each method and service should be always be carefully reviewed before use.

* Getting a channel opened by someone else towards us
** Services who sell inbound.
*** '''Amboss Magma''' - https://amboss.space/magma
*** '''ZeroFeeRouting''' - https://amboss.space/node/038fe1bd966b5cb0545963490c631eaa1924e2c4c0ea4e7dcb5d4582a1e7f2f1a5 
*** '''LNBIG''' - https://lnbig.com/
*** '''Bitrefill''' - https://www.bitrefill.com/buy/lightning-channel/
*** '''Y’alls''' - https://yalls.org/about/
*** '''LN2Me''' - https://ln2me.com/
*** ''' Lightning Conductor ''' - https://mainnet.lightningconductor.net/ Lightning Conductor - They may open a channel back to you if you open 500K channel to them.
*** ''' Umbrel Opening Channel Request ''' - https://community.getumbrel.com/t/opening-channels-requests/66 Umbrel Opening Channel Requests
*** ''' Sats4Likes''' - You can offer to pay someone to open a channel to you on services like - https://kriptode.com/satsforlikes/index.html 

** Organized peer to peer agreements (e.g. A opens to B, C opens to A)
*** Ask in Plebnet Telegram group. There might be someone willing to open a Dual Funded or simple inbound to you.
*** '''LightningNetwork+''' - https://lightningnetwork.plus/
*** '''Plebs2Salvador''' - https://t.me/plebs2salvador for endless chanins of 69. You get one channel and you open to your next one.
*** Rings of Fire Telegram Group - https://t.me/theRingsOfFire
** Public lend/rent markets
*** '''Lightning Pool''' (lnd) - https://lightning.engineering/pool/ (in https://getumbrel.com/, [https://github.com/lightninglabs/lightning-terminal Lightning Terminal], [https://voltage.cloud/flow Voltage Flow], …)
*** '''Liquidity Ads''' (c-lightning, [https://medium.com/blockstream/setting-up-liquidity-ads-in-c-lightning-54e4c59c091d explainer]) - https://lnrouter.app/liquidity-ads
*** '''PeerSwap''' (work in progress) - https://www.peerswap.dev/

** Open source Liquidity Service Provider servers
*** '''Dunder''' - https://github.com/hsjoberg/dunder-lsp
*** '''Blocktank''' - https://synonym.to/products/

* Opening a balanced channel with liquidity on both sides
** '''Balance of Satoshis''' - https://github.com/alexbosworth/balanceofsatoshis

* Opening channel ourselves and then swapping funds in-channel to on-chain (e.g. 50%) w/o closing channel
** Services to submarine/atomic swap LN funds to on-chain funds
*** '''Boltz''' - https://boltz.exchange/ (in https://thunderhub.io/, https://getumbrel.com/)
*** '''Loop''' (lnd) - https://github.com/lightninglabs/loop (in [https://github.com/alexbosworth/balanceofsatoshis Balance of Satoshis], [https://github.com/lightninglabs/lightning-terminal Lightning Terminal], [https://github.com/Ride-The-Lightning/RTL RTL], https://getumbrel.com/)

** Mobile wallets that allow receiving over LN and sending to on-chain addresses
*** '''Wallet of Satoshi''' - https://www.walletofsatoshi.com/
*** '''Blixt''' - https://blixtwallet.github.io/
*** '''Breez''' - https://breez.technology/
*** '''Phoenix''' - https://phoenix.acinq.co/
*** '''Muun''' - https://muun.com/

** Trust requiring exchanges that allow receiving over LN and sending to on-chain addresses
*** '''CoinOs '''- https://coinos.io
*** '''Nicehash '''- www.nicehash.com
*** '''SouthXchange''' - southxchange.com
*** '''Sideshift A'''I - https://sideshift.ai/
*** '''FixedFloat''' (BTCLN) - https://fixedfloat.com/
*** [https://cointastical.medium.com/exchanges-with-support-for-bitcoin-lightning-network-payments-739829bcb7bc Some more…]

* Automated tools for managing node's inbound liquidity
** '''clboss''' (c-lightning) - https://github.com/ZmnSCPxj/clboss

&lt;/translate&gt;</text>
      <sha1>6ptpejpicc2ugs3hdt0xokr6c03322w</sha1>
    </revision>
  </page>
  <page>
    <title>Getting started</title>
    <ns>0</ns>
    <id>19</id>
    <revision>
      <id>1939</id>
      <parentid>881</parentid>
      <timestamp>2021-10-20T17:03:13Z</timestamp>
      <contributor>
        <username>ADssx</username>
        <id>38</id>
      </contributor>
      <origin>1939</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="3225" sha1="g6gz5gqfdv6vqj33gt3skp7msw0jr7u" xml:space="preserve">&lt;languages/&gt;
&lt;translate&gt;

&lt;!--T:2--&gt;
In order join [http://plebnet.org PLEBNET], you need a [https://en.wikipedia.org/wiki/Lightning_Network Lightning Network] node (more on that later) and [https://telegram.org/ Telegram] to chat and connect with us!

&lt;!--T:3--&gt;
If you are totally new to the lightning network, and would like to get an overview of how it works before diving in, then read the [https://bitcoiner.guide/lightning/ bitcoiner.guide/lightning] guide.


=== Node === &lt;!--T:4--&gt;

&lt;!--T:5--&gt;
There are several newbie options for getting a Lightning node set up and running. Some of them are software only, some hardware + software. 

&lt;!--T:6--&gt;
* [https://github.com/rootzoll/raspiblitz RaspiBlitz] is a great option that runs on Raspberry Pi v4+ 
* [https://getumbrel.com/ Umbrel] is a newbie-friendly package that runs on Raspberry Pi v4+ 
* [https://youtu.be/fppmhqjqh2E BTC SESSIONS] has a good video walkthrough for getting started with Raspberry Pi and Umbrel 
* '''Security note for Umbrel:''' ''Your Umbrel node is only as secure as your network (WiFi/LAN).'' Be sure to read the [https://github.com/getumbrel/umbrel/blob/master/SECURITY.md Security Disclosure] from the Umbrel team. Your funds can be at risk if someone can steal your SSD so protect your node the same way you protect any other valuable at your home. If you are comfortable with command line, you can change the wallet password from command line and then remember to use that password each time you restart lnd or during upgrades (or else your node will not start without correct password for the wallet). Do not keep the wallet password same as the dashboard password or else umbrel will change it back to hardcoded password on next unlock. By default the wallet is unlocked automatically during startup using hardcoded passwords.  
* [https://start9.com/ Start9] is an all-in-one option that includes the necessary hardware 
* [https://www.mynodebtc.com/ myNode] is another all-in-one with hardware
* [https://stadicus.github.io/RaspiBolt/ RaspiBolt] has some good information on how to set up the necessary services manually

&lt;!--T:7--&gt;
For additional information about node hardware see the [[Special:MyLanguage/Node Hardware|Node Hardware]] page.


=== Telegram === &lt;!--T:8--&gt;

&lt;!--T:9--&gt;
PLEBNET discussion and coordination happens on the Telegram chat platform.

&lt;!--T:10--&gt;
Download the [https://telegram.org/ Telegram app] and join the [http://kycjelly.com PLEBNET] group.

&lt;!--T:11--&gt;
The companion Telegram channel [https://t.me/plebnetlibrary PLEBNET Library] contains high quality materials collected from chat group traffic.


=== CheeseRobot === &lt;!--T:12--&gt;

&lt;!--T:13--&gt;
A Telegram bot that will allow you to join and interact with the PLEBNET.

&lt;!--T:14--&gt;
You’ll want to send a private message to &lt;code&gt;@cheeserobot&lt;/code&gt; to claim and add your node. Start with &lt;code&gt;/claim&lt;/code&gt; and follow the instructions to get add your node id. Then, in the PLEBNET channel, use &lt;code&gt;/id@cheeserobot&lt;/code&gt; to get yourself added to the graph.


=== Node with 2 channels or more === &lt;!--T:15--&gt;

&lt;!--T:16--&gt;
Also join the NODE RUNNER group. @mention [https://t.me/AEHW1 Walton] to add you to the other group as well.
&lt;/translate&gt;</text>
      <sha1>g6gz5gqfdv6vqj33gt3skp7msw0jr7u</sha1>
    </revision>
  </page>
  <page>
    <title>Getting started/en</title>
    <ns>0</ns>
    <id>826</id>
    <revision>
      <id>1941</id>
      <parentid>1348</parentid>
      <timestamp>2021-10-20T17:06:04Z</timestamp>
      <contributor>
        <username>FuzzyBot</username>
        <id>29</id>
      </contributor>
      <comment>Updating to match new version of source page</comment>
      <origin>1941</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="3028" sha1="njd6shp6ngayga4fv2utdiwsf1q2n1h" xml:space="preserve">&lt;languages/&gt;

In order join [http://plebnet.org PLEBNET], you need a [https://en.wikipedia.org/wiki/Lightning_Network Lightning Network] node (more on that later) and [https://telegram.org/ Telegram] to chat and connect with us!

If you are totally new to the lightning network, and would like to get an overview of how it works before diving in, then read the [https://bitcoiner.guide/lightning/ bitcoiner.guide/lightning] guide.


=== Node ===

There are several newbie options for getting a Lightning node set up and running. Some of them are software only, some hardware + software. 

* [https://github.com/rootzoll/raspiblitz RaspiBlitz] is a great option that runs on Raspberry Pi v4+ 
* [https://getumbrel.com/ Umbrel] is a newbie-friendly package that runs on Raspberry Pi v4+ 
* [https://youtu.be/fppmhqjqh2E BTC SESSIONS] has a good video walkthrough for getting started with Raspberry Pi and Umbrel 
* '''Security note for Umbrel:''' ''Your Umbrel node is only as secure as your network (WiFi/LAN).'' Be sure to read the [https://github.com/getumbrel/umbrel/blob/master/SECURITY.md Security Disclosure] from the Umbrel team. Your funds can be at risk if someone can steal your SSD so protect your node the same way you protect any other valuable at your home. If you are comfortable with command line, you can change the wallet password from command line and then remember to use that password each time you restart lnd or during upgrades (or else your node will not start without correct password for the wallet). Do not keep the wallet password same as the dashboard password or else umbrel will change it back to hardcoded password on next unlock. By default the wallet is unlocked automatically during startup using hardcoded passwords.  
* [https://start9.com/ Start9] is an all-in-one option that includes the necessary hardware 
* [https://www.mynodebtc.com/ myNode] is another all-in-one with hardware
* [https://stadicus.github.io/RaspiBolt/ RaspiBolt] has some good information on how to set up the necessary services manually

For additional information about node hardware see the [[Special:MyLanguage/Node Hardware|Node Hardware]] page.


=== Telegram ===

PLEBNET discussion and coordination happens on the Telegram chat platform.

Download the [https://telegram.org/ Telegram app] and join the [http://kycjelly.com PLEBNET] group.

The companion Telegram channel [https://t.me/plebnetlibrary PLEBNET Library] contains high quality materials collected from chat group traffic.


=== CheeseRobot ===

A Telegram bot that will allow you to join and interact with the PLEBNET.

You’ll want to send a private message to &lt;code&gt;@cheeserobot&lt;/code&gt; to claim and add your node. Start with &lt;code&gt;/claim&lt;/code&gt; and follow the instructions to get add your node id. Then, in the PLEBNET channel, use &lt;code&gt;/id@cheeserobot&lt;/code&gt; to get yourself added to the graph.


=== Node with 2 channels or more ===

Also join the NODE RUNNER group. @mention [https://t.me/AEHW1 Walton] to add you to the other group as well.</text>
      <sha1>njd6shp6ngayga4fv2utdiwsf1q2n1h</sha1>
    </revision>
  </page>
  <page>
    <title>Getting started/fr</title>
    <ns>0</ns>
    <id>1146</id>
    <revision>
      <id>1960</id>
      <parentid>1949</parentid>
      <timestamp>2021-10-20T17:45:42Z</timestamp>
      <contributor>
        <username>ADssx</username>
        <id>38</id>
      </contributor>
      <comment>Created page with "Vous devez envoyer un message privé à &lt;code&gt;@cheeserobot&lt;/code&gt; pour ajouter votre nœud. Envoyez &lt;code&gt;/claim&lt;/code&gt; puis suivez les instructions. Ensuite, sur le canal Tel..."</comment>
      <origin>1960</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="3068" sha1="e164mq0iyiqqj8f8fdu2kxhxvf4w8ue" xml:space="preserve">&lt;languages/&gt;

Pour rejoindre PlebNet vous avez besoin d'un nœud [https://fr.wikipedia.org/wiki/Lightning_(r%C3%A9seau) Lightning] et de [https://telegram.org/fr?setln=fr Telegram] pour discuter.

Si ne connaissez rien au réseau Lightning et désirez comprendre son fonctionnement avant de vous lancer, lisez [https://bitcoiner.guide/lightning/fr/ le guide pour débutants].


== Nœud ==

Il y a plusieurs options pour lancer un nœud Lightning. Certaines sont uniquement logicielles tandis que d'autres nécessitent aussi du matériel. 

* [https://github.com/rootzoll/raspiblitz RaspiBlitz] : super option qui tourne sur un [https://fr.wikipedia.org/wiki/Raspberry_Pi Raspberry Pi] v4+ 
* [https://getumbrel.com/ Umbrel] : package orienté grand public qui tourne sur un Raspberry Pi v4+ 
** [https://youtu.be/fppmhqjqh2E BTC SESSIONS] : chaîne YouTube avec plusieurs vidéos pour commencer avec un Pi et Umbrel 
** '''Note de sécurité sur Umbrel''' : ''La sécurité de votre nœud Umbrel dépend de celle de votre réseau internet (WiFi/LAN).'' Lisez attentivement les [https://github.com/getumbrel/umbrel/blob/master/SECURITY.md notes de sécurité] founries par Umbrel. Vos fonds peuvent être volés si quelqu'un dérobe votre SSD. Donc protégez votre nœud comme tous les objets de valeur de votre maison. Si vous êtes à l'aise avec la ligne de commande, vous pouvez changer le mot de passe du portefeuille puis utiliser ce mot de passé à chaque redémarrage de lnd (ou équivalent) ou durant les mises à jour (sinon, votre nœud ne va pas démarrage sans le mot de passe correct du portefeuille). Ne conservez pas le mot de passe du portefeuille identique au mot de passe du tableau de suivant (dashboard) sinon Umbrel le changement au prochain redémarrage. Par défaut, le portefeuille se déverrouille automatiquement au démarrage.  
* [https://start9.com/ Start9] : option tout-en-un qui inclue le matériel nécessaire
* [https://www.mynodebtc.com/ myNode] : autre otion tout-en-un
* [https://stadicus.github.io/RaspiBolt/ RaspiBolt] : guide sur comment démarrer avec un Rasperri Pi

Pour plus d'information sur le matériel pour un nœud : [[Special:MyLanguage/Node Hardware|Matériel pour nœud]].


== Telegram ==

Les discussions PlebNet ont lieu sur Telegram.

Téléchargez [https://telegram.org/fr?setln=fr Telegram] et rejoignez le [https://t.me/plebnet groupe PlebNet].

Le canal Telegram [https://t.me/plebnetlibrary PlebNet Library] contient des ressources de qualité.


== CheeseRobot ==

CheeseBot est un bot Telegram qui vous permet de rejoindre et d'interagir avec PlebNet.

Vous devez envoyer un message privé à &lt;code&gt;@cheeserobot&lt;/code&gt; pour ajouter votre nœud. Envoyez &lt;code&gt;/claim&lt;/code&gt; puis suivez les instructions. Ensuite, sur le canal Telegram PlebNet, envoyez  &lt;code&gt;/id@cheeserobot&lt;/code&gt; pour être ajouté au graph.


== Nœud avec 2 canaux ou plus ==

Une fois que vous avez deux canaux, rejoignez le groupe privé NODE RUNNERS. Envoyez un message à [https://t.me/AEHW1 Walton] pour être ajouté au groupe.</text>
      <sha1>e164mq0iyiqqj8f8fdu2kxhxvf4w8ue</sha1>
    </revision>
  </page>
  <page>
    <title>Help! I do not see any routing through my node</title>
    <ns>0</ns>
    <id>44</id>
    <revision>
      <id>893</id>
      <parentid>746</parentid>
      <timestamp>2021-10-02T19:48:02Z</timestamp>
      <contributor>
        <username>Lucasdcf</username>
        <id>27</id>
      </contributor>
      <comment>Marked this version for translation</comment>
      <origin>893</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="3325" sha1="on1zmbgpfsa1z2o5dlizzx828191a2l" xml:space="preserve">&lt;languages/&gt;
&lt;translate&gt;
= Intro = &lt;!--T:1--&gt;
WARNING: Running a routing node is not for generating a primary source of income. The lightning technology is still developing at a very fast pace. The strategy which may generate some income would stop working very soon and something else will take their place. Do not commit more than what you can have fun with when you enter the rabbit hole of a routing node.

&lt;!--T:2--&gt;
Now that you understand Fees and Balancing, the next issue comes to every noob is : Why there is no one routing through my node?

&lt;!--T:3--&gt;
To understand routing you must understand how routing works.


== What is routing == &lt;!--T:4--&gt;

&lt;!--T:5--&gt;
Routing allows flow of Sats between nodes that are not directly connected.

&lt;!--T:6--&gt;
If every node in the world is directly connected to every other node in the world, there will be no need for routing

&lt;!--T:7--&gt;
Since it is capital constrained to establish a channel with everyone you interact with on Lightning Network there exist the need for routing. Imagine if you want to pay for coffee occasionally you would not establish a channel with the coffee shop. However your node will connect to someone who is connected to someone who is connected to the coffee shop. Your payment for coffee would follow a path from your node to the coffee shop and in between nodes, the routing nodes, will collect some fee for providing this service.

&lt;!--T:8--&gt;
This leads to the main points

&lt;!--T:9--&gt;
#Routing Nodes are service providers. They get a fee for providing the service. It does not necessarily mean that their services are required.
If you are selling ice cream on the north pole, chances are you will not have a mega queue in front of your store.


== So how do I improve routing through my node == &lt;!--T:10--&gt;

&lt;!--T:11--&gt;
*Understand the flow

&lt;!--T:12--&gt;
See who are you connected to. Are you connected to a Merchant or a Consumer? If yes, how is their volume and who else is connected to them. If there are cheaper connections to that merchant, chances are the flows will go via them. If you are charging excessive fees to outgoing channels on your node, chances are your consumers are using someone else to send their payments.

&lt;!--T:13--&gt;
If you are connected to mainly other routers, check what sort of fees are they charging? If you are surrounded by all expensive nodes, chances are no one will route through you because you even if you charge less, the eventual cost is high for the sender.

&lt;!--T:14--&gt;
Investigate your peers, set your fees appropriately, and if you see a path which is expensive, you can try to establish and provider a cheaper alternative to that destination and routes will start using your node.

&lt;!--T:15--&gt;
*Manage your Fees
See here [[Special:MyLanguage/FeesAndProfitability|FeesAndProfitability]]

&lt;!--T:16--&gt;
*Keep your rebalance in control
See here [[Special:MyLanguage/Balancing_Nodes|Balancing_Nodes]]
If you are in the path of two way traffic, you are in a good position and you do not need to do much for rebalancing.

&lt;!--T:17--&gt;
If not you are required to replenish our local balance to service the flow. You must do that on a cash positive basis i.e. your cost of replenishing the local balance should be less than the fees you earn. Otherwise, it will soon become a loss-making situation.
&lt;/translate&gt;</text>
      <sha1>on1zmbgpfsa1z2o5dlizzx828191a2l</sha1>
    </revision>
  </page>
  <page>
    <title>Help! I do not see any routing through my node/en</title>
    <ns>0</ns>
    <id>417</id>
    <revision>
      <id>916</id>
      <timestamp>2021-10-02T19:48:35Z</timestamp>
      <contributor>
        <username>FuzzyBot</username>
        <id>29</id>
      </contributor>
      <comment>Updating to match new version of source page</comment>
      <origin>916</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="3105" sha1="ijachlt1rg09qz6ou782v6arpjdqtmf" xml:space="preserve">&lt;languages/&gt;
= Intro =
WARNING: Running a routing node is not for generating a primary source of income. The lightning technology is still developing at a very fast pace. The strategy which may generate some income would stop working very soon and something else will take their place. Do not commit more than what you can have fun with when you enter the rabbit hole of a routing node.

Now that you understand Fees and Balancing, the next issue comes to every noob is : Why there is no one routing through my node?

To understand routing you must understand how routing works.


== What is routing ==

Routing allows flow of Sats between nodes that are not directly connected.

If every node in the world is directly connected to every other node in the world, there will be no need for routing

Since it is capital constrained to establish a channel with everyone you interact with on Lightning Network there exist the need for routing. Imagine if you want to pay for coffee occasionally you would not establish a channel with the coffee shop. However your node will connect to someone who is connected to someone who is connected to the coffee shop. Your payment for coffee would follow a path from your node to the coffee shop and in between nodes, the routing nodes, will collect some fee for providing this service.

This leads to the main points

#Routing Nodes are service providers. They get a fee for providing the service. It does not necessarily mean that their services are required.
If you are selling ice cream on the north pole, chances are you will not have a mega queue in front of your store.


== So how do I improve routing through my node ==

*Understand the flow

See who are you connected to. Are you connected to a Merchant or a Consumer? If yes, how is their volume and who else is connected to them. If there are cheaper connections to that merchant, chances are the flows will go via them. If you are charging excessive fees to outgoing channels on your node, chances are your consumers are using someone else to send their payments.

If you are connected to mainly other routers, check what sort of fees are they charging? If you are surrounded by all expensive nodes, chances are no one will route through you because you even if you charge less, the eventual cost is high for the sender.

Investigate your peers, set your fees appropriately, and if you see a path which is expensive, you can try to establish and provider a cheaper alternative to that destination and routes will start using your node.

*Manage your Fees
See here [[Special:MyLanguage/FeesAndProfitability|FeesAndProfitability]]

*Keep your rebalance in control
See here [[Special:MyLanguage/Balancing_Nodes|Balancing_Nodes]]
If you are in the path of two way traffic, you are in a good position and you do not need to do much for rebalancing.

If not you are required to replenish our local balance to service the flow. You must do that on a cash positive basis i.e. your cost of replenishing the local balance should be less than the fees you earn. Otherwise, it will soon become a loss-making situation.</text>
      <sha1>ijachlt1rg09qz6ou782v6arpjdqtmf</sha1>
    </revision>
  </page>
  <page>
    <title>Help! My sats are only moving in one direction</title>
    <ns>0</ns>
    <id>45</id>
    <revision>
      <id>895</id>
      <parentid>747</parentid>
      <timestamp>2021-10-02T19:48:12Z</timestamp>
      <contributor>
        <username>Lucasdcf</username>
        <id>27</id>
      </contributor>
      <comment>Marked this version for translation</comment>
      <origin>895</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="4264" sha1="m2va6frpwl785e0f3f9p6smml7eops8" xml:space="preserve">&lt;languages/&gt;
&lt;translate&gt;

==Intro== &lt;!--T:1--&gt;

&lt;!--T:2--&gt;
A common noob question is why their sats are only moving in one direction on a big node channel (say ACINQ or BFX or even LOOP)

&lt;!--T:3--&gt;
Let us imagine the routing nodes as pipework of flow of water from the source (consumer) to target (merchant) as the primary purpose. Each node maintains its own reservoir with the connected peer which is its local liquidity and controls the tap via the fees. 

&lt;!--T:4--&gt;
* Higher the fees, greater the resistance to water flow, and slower it would move.
* Lower the fees, lower the resistance to the water flow, and faster it would move to the other side.

&lt;!--T:5--&gt;
In this model, channel rebalancing can be visualised as the act of replenishing your local reservoir with a particular peer. If your reservoir runs empty, you won't have anything to send to the peer.

&lt;!--T:6--&gt;
The flow would generally be from Consumer -&gt; Merchant however in an interconnected world someone who is a merchant (receiving payment for a product) can be a consumer the next day (paying its supplier). The other flows are liquidity balancing flows where the nodes replenish their reservoirs to service the flow again. 


=== Classic Mistake === &lt;!--T:7--&gt;

&lt;!--T:8--&gt;
Most newcomers make the classic mistake of setting up a channel with default low fees (Base Fee = 1 Sat, Fee Rate of 1 ppm). See to [[Special:MyLanguage/FeesAndProfitability#Setting_Routing_Fees| understand fees]]

&lt;!--T:9--&gt;
Imagine setting up your reservoir, with the tap wide open. What do you think is likely to happen? Your tank would be emptied immediately, more so with a service like Exchange or Wallet which are popular destinations for consumers. You just contributed to the community by allowing a cheap payment to someone in the world. 

&lt;!--T:10--&gt;
'''Is this good use of your capital and effort?'''

&lt;!--T:11--&gt;
Maybe not. It will certainly lead you to wonder why your sats move from your node to BFX but never came back.

&lt;!--T:12--&gt;
Well, the answer is that BFX is a popular destination where Consumers send Sats. You provided a low fee path to it, so your path was used as long as you had local liquidity. 

&lt;!--T:13--&gt;
BFX send sats in the opposite direction when people receive Sats in their lightning wallet. However think, for this path you need to be

&lt;!--T:14--&gt;
#Connected to the receiver of BFX via a good path
#Have low fees on this path
#Have liquidity to offer on this path.

&lt;!--T:15--&gt;
BFX is likely to be connected to most wallet providers directly from their node, you can validate their channels on any popular explorers like [[https://amboss.space/|Amboss]]. It is not likely to come to your node to send out sats in the other direction unless it has exhausted the liquidity on its own channels. 


=== So why Sats are moving into remote never coming back === &lt;!--T:16--&gt;

&lt;!--T:17--&gt;
#You provided a cheap path to a popular destination so traffic routed via you.
#You do not have an equivalent cheaper path in the opposite direction.

&lt;!--T:18--&gt;
What can you do to slow down? 

&lt;!--T:19--&gt;
Set your fees reasonably. The first thing change your default lnd configuration to set up high fees when you create a channel. See [[Special:MyLanguage/LND_Configuration_Settings#Opening_Channel_With_Predefined_Fees|here]] for details.

&lt;!--T:20--&gt;
Then gradually lower the fees, maybe 10% a day until you start seeing traffic routing via your node. Establish a good fees level that generates a reasonable amount of traffic and at the same time allows you to recoup your costs of rebalancing and setting up the channel.

&lt;!--T:21--&gt;
And investigate where the traffic is coming from, try to open low fee paths in the opposite direction and maybe you can encourage flow back out creating 2-way traffic.


=== Don't blame the peer === &lt;!--T:22--&gt;

&lt;!--T:23--&gt;
In various chat rooms, it is a frequent discussion that XYZ is a liquidity drain! Your peer can '''never''' suck liquidity out of your node. It is you, your fee policies, and even your decision to open a channel into the peer which caused your liquidity to move to the peer. You are the one who is in charge of policies on your node.

&lt;!--T:24--&gt;
Set appropriate fees and you can master the dance of Sats in your node.
&lt;/translate&gt;</text>
      <sha1>m2va6frpwl785e0f3f9p6smml7eops8</sha1>
    </revision>
  </page>
  <page>
    <title>Help! My sats are only moving in one direction/en</title>
    <ns>0</ns>
    <id>917</id>
    <revision>
      <id>1440</id>
      <timestamp>2021-10-02T20:22:31Z</timestamp>
      <contributor>
        <username>FuzzyBot</username>
        <id>29</id>
      </contributor>
      <comment>Updating to match new version of source page</comment>
      <origin>1440</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="3960" sha1="m9gapv2rcjj64ihpq3x0prja6m27x9c" xml:space="preserve">&lt;languages/&gt;

==Intro==

A common noob question is why their sats are only moving in one direction on a big node channel (say ACINQ or BFX or even LOOP)

Let us imagine the routing nodes as pipework of flow of water from the source (consumer) to target (merchant) as the primary purpose. Each node maintains its own reservoir with the connected peer which is its local liquidity and controls the tap via the fees. 

* Higher the fees, greater the resistance to water flow, and slower it would move.
* Lower the fees, lower the resistance to the water flow, and faster it would move to the other side.

In this model, channel rebalancing can be visualised as the act of replenishing your local reservoir with a particular peer. If your reservoir runs empty, you won't have anything to send to the peer.

The flow would generally be from Consumer -&gt; Merchant however in an interconnected world someone who is a merchant (receiving payment for a product) can be a consumer the next day (paying its supplier). The other flows are liquidity balancing flows where the nodes replenish their reservoirs to service the flow again. 


=== Classic Mistake ===

Most newcomers make the classic mistake of setting up a channel with default low fees (Base Fee = 1 Sat, Fee Rate of 1 ppm). See to [[Special:MyLanguage/FeesAndProfitability#Setting_Routing_Fees| understand fees]]

Imagine setting up your reservoir, with the tap wide open. What do you think is likely to happen? Your tank would be emptied immediately, more so with a service like Exchange or Wallet which are popular destinations for consumers. You just contributed to the community by allowing a cheap payment to someone in the world. 

'''Is this good use of your capital and effort?'''

Maybe not. It will certainly lead you to wonder why your sats move from your node to BFX but never came back.

Well, the answer is that BFX is a popular destination where Consumers send Sats. You provided a low fee path to it, so your path was used as long as you had local liquidity. 

BFX send sats in the opposite direction when people receive Sats in their lightning wallet. However think, for this path you need to be

#Connected to the receiver of BFX via a good path
#Have low fees on this path
#Have liquidity to offer on this path.

BFX is likely to be connected to most wallet providers directly from their node, you can validate their channels on any popular explorers like [[https://amboss.space/|Amboss]]. It is not likely to come to your node to send out sats in the other direction unless it has exhausted the liquidity on its own channels. 


=== So why Sats are moving into remote never coming back ===

#You provided a cheap path to a popular destination so traffic routed via you.
#You do not have an equivalent cheaper path in the opposite direction.

What can you do to slow down? 

Set your fees reasonably. The first thing change your default lnd configuration to set up high fees when you create a channel. See [[Special:MyLanguage/LND_Configuration_Settings#Opening_Channel_With_Predefined_Fees|here]] for details.

Then gradually lower the fees, maybe 10% a day until you start seeing traffic routing via your node. Establish a good fees level that generates a reasonable amount of traffic and at the same time allows you to recoup your costs of rebalancing and setting up the channel.

And investigate where the traffic is coming from, try to open low fee paths in the opposite direction and maybe you can encourage flow back out creating 2-way traffic.


=== Don't blame the peer ===

In various chat rooms, it is a frequent discussion that XYZ is a liquidity drain! Your peer can '''never''' suck liquidity out of your node. It is you, your fee policies, and even your decision to open a channel into the peer which caused your liquidity to move to the peer. You are the one who is in charge of policies on your node.

Set appropriate fees and you can master the dance of Sats in your node.</text>
      <sha1>m9gapv2rcjj64ihpq3x0prja6m27x9c</sha1>
    </revision>
  </page>
  <page>
    <title>How to translate a page</title>
    <ns>0</ns>
    <id>1036</id>
    <revision>
      <id>1816</id>
      <parentid>1682</parentid>
      <timestamp>2021-10-19T16:32:21Z</timestamp>
      <contributor>
        <username>ADssx</username>
        <id>38</id>
      </contributor>
      <comment>Marked this version for translation</comment>
      <origin>1816</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="3382" sha1="8nm7ulw5et2vv9pe41jozlif7fgk1am" xml:space="preserve">&lt;languages/&gt;

&lt;translate&gt;
== Why translating content? == &lt;!--T:1--&gt;

&lt;!--T:2--&gt;
60% of online content is in English, even though only 16% of the world population speaks English, according to [https://www.visualcapitalist.com/the-most-used-languages-on-the-internet/ data gathered by VisualCapitalist]. Developing countries are the biggest Bitcoin users. For instance, the top countries on Binance are Turkey, Russia, Brazil, Argentina, and Vietnam ([https://www.similarweb.com/website/binance.com/#overview Source]). On Bitrefill users mostly come from: the US, El Salvador, Venezuela, Afghanistan, and Germany ([https://www.similarweb.com/website/bitrefill.com/#overview Source]). India, Pakistan, Ukraine, Kenya, Nigeria, and the Philippines are also major countries for Bitcoin ([https://blog.chainalysis.com/reports/2021-global-crypto-adoption-index Source 1], [https://www.statista.com/chart/18345/crypto-currency-adoption/ Source 2]).

&lt;!--T:3--&gt;
Therefore translating the PlebNet wiki into more languages is essential to ensure global adoption of Lightning, especially in countries that need it the most.

== How to translate content? == &lt;!--T:4--&gt;

&lt;!--T:5--&gt;
You need an account to contribute to the PlebNet wiki. Contact the administrators on Telegram to get one.

=== How to start a new translation === &lt;!--T:6--&gt;

&lt;!--T:7--&gt;
Once logged in, follow the following steps:
* Go on the page you want to translate, for instance, the [[Main Page]],
* Click on the link "Translate this page" at the top of the page,
* In the top right-hand corner click on the blue link "English" (in "Translate to English") to change the target language. For instance, if you want to translate the page into Hindi, write "Hindi",
* Two columns will appear: on the left, the original English language content, on the right, the content in your target language, which is probably blank if you're starting a new translation,
* Click on one English paragraph on the left, a text field appears, translate the content, and then click on "Publish translation".
* Make sure you keep Mediawiki text formatting such as &lt;nowiki&gt;=&lt;/nowiki&gt; for titles. For more information on Mediawiki text formatting, click [https://www.mediawiki.org/wiki/Help:Formatting here].

&lt;!--T:8--&gt;
You don't need to translate everything all at once. Once you have translated at least one paragraph a page is automatically created. Untranslated paragraphs will be displayed to readers in English. Go back on the English content and it should be visible at the top of the page. The page's URL is ENGLISH_NAME/LANGUAGE_CODE. All language codes are available [https://iso639-3.sil.org/code_tables/639/data here].

=== How to modify an existing translation === &lt;!--T:9--&gt;

&lt;!--T:10--&gt;
Go to the page in your target language, for instance [[Main_Page/es]] and click on the "Translate" tab at the top of the page.

== Which language should I translate into? == &lt;!--T:11--&gt;

&lt;!--T:12--&gt;
All languages are welcome on PlebNet! Whether you speak Luxemburgish, Japanese, or Yoruba, feel free to start a translation!

== External resources == &lt;!--T:13--&gt;

&lt;!--T:14--&gt;
* [https://www.mediawiki.org/wiki/Help:Extension:Translate/Page_translation_administration Page translation administration] on MediaWiki
* [https://www.mediawiki.org/wiki/Help:Extension:Translate/Page_translation_example Page translation example] on MediaWiki

&lt;/translate&gt;</text>
      <sha1>8nm7ulw5et2vv9pe41jozlif7fgk1am</sha1>
    </revision>
  </page>
  <page>
    <title>How to translate a page/en</title>
    <ns>0</ns>
    <id>1111</id>
    <revision>
      <id>1832</id>
      <timestamp>2021-10-19T16:32:33Z</timestamp>
      <contributor>
        <username>FuzzyBot</username>
        <id>29</id>
      </contributor>
      <comment>Updating to match new version of source page</comment>
      <origin>1832</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="3197" sha1="drppel648ai5s87b0v4qdtbkwafszb5" xml:space="preserve">&lt;languages/&gt;

== Why translating content? ==

60% of online content is in English, even though only 16% of the world population speaks English, according to [https://www.visualcapitalist.com/the-most-used-languages-on-the-internet/ data gathered by VisualCapitalist]. Developing countries are the biggest Bitcoin users. For instance, the top countries on Binance are Turkey, Russia, Brazil, Argentina, and Vietnam ([https://www.similarweb.com/website/binance.com/#overview Source]). On Bitrefill users mostly come from: the US, El Salvador, Venezuela, Afghanistan, and Germany ([https://www.similarweb.com/website/bitrefill.com/#overview Source]). India, Pakistan, Ukraine, Kenya, Nigeria, and the Philippines are also major countries for Bitcoin ([https://blog.chainalysis.com/reports/2021-global-crypto-adoption-index Source 1], [https://www.statista.com/chart/18345/crypto-currency-adoption/ Source 2]).

Therefore translating the PlebNet wiki into more languages is essential to ensure global adoption of Lightning, especially in countries that need it the most.

== How to translate content? ==

You need an account to contribute to the PlebNet wiki. Contact the administrators on Telegram to get one.

=== How to start a new translation ===

Once logged in, follow the following steps:
* Go on the page you want to translate, for instance, the [[Main Page]],
* Click on the link "Translate this page" at the top of the page,
* In the top right-hand corner click on the blue link "English" (in "Translate to English") to change the target language. For instance, if you want to translate the page into Hindi, write "Hindi",
* Two columns will appear: on the left, the original English language content, on the right, the content in your target language, which is probably blank if you're starting a new translation,
* Click on one English paragraph on the left, a text field appears, translate the content, and then click on "Publish translation".
* Make sure you keep Mediawiki text formatting such as &lt;nowiki&gt;=&lt;/nowiki&gt; for titles. For more information on Mediawiki text formatting, click [https://www.mediawiki.org/wiki/Help:Formatting here].

You don't need to translate everything all at once. Once you have translated at least one paragraph a page is automatically created. Untranslated paragraphs will be displayed to readers in English. Go back on the English content and it should be visible at the top of the page. The page's URL is ENGLISH_NAME/LANGUAGE_CODE. All language codes are available [https://iso639-3.sil.org/code_tables/639/data here].

=== How to modify an existing translation ===

Go to the page in your target language, for instance [[Main_Page/es]] and click on the "Translate" tab at the top of the page.

== Which language should I translate into? ==

All languages are welcome on PlebNet! Whether you speak Luxemburgish, Japanese, or Yoruba, feel free to start a translation!

== External resources ==

* [https://www.mediawiki.org/wiki/Help:Extension:Translate/Page_translation_administration Page translation administration] on MediaWiki
* [https://www.mediawiki.org/wiki/Help:Extension:Translate/Page_translation_example Page translation example] on MediaWiki</text>
      <sha1>drppel648ai5s87b0v4qdtbkwafszb5</sha1>
    </revision>
  </page>
  <page>
    <title>How to upgrade umbrel without upgrading umbrel</title>
    <ns>0</ns>
    <id>1326</id>
    <revision>
      <id>2428</id>
      <parentid>2427</parentid>
      <timestamp>2022-07-08T22:11:34Z</timestamp>
      <contributor>
        <username>VS</username>
        <id>18</id>
      </contributor>
      <origin>2428</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="2987" sha1="ldqxxjfha4h6x6g9p0i8191fqzxfer1" xml:space="preserve">After the recent upgrade of umbrel to 0.5, bitcoin and lightning have been moved to app structure and this has broken existing scripts and tooling for many node runners. If you would like to remain on the lower version of umbrel but want to take advantage of the newer release of lnd/tor/bitcoind and other apps you can try the following '''AT YOUR OWN RISK'''. The steps below require editing &lt;code&gt;docker-compose.yml&lt;/code&gt; files on your umbrel node to use latest release of the underlying software.

'''WARNING
EDITING THESE FILES ARE RISKY AND SHOULD ONLY BE ATTEMPTED BY THOSE WHO ARE COMFORTABLE WITH SSH AND FAMILIAR WITH DEBUGGING THEIR NODE IN CASE THINGS GO WRONG. YOUR EDITS WILL BE REPLACED BY NEWER UMBREL UPGRADE WHICH CAN HAVE UNWARRANTED CONSEQUENCES.'''

If you still wish to proceed after this the rest of the procedure is simple.

Step 0. Take a copy of your latest channel backup and note your seed phrase in case something goes terribly wrong.

Step 1. Make copy of your docker-compose.yml
&lt;code&gt;cd ~/umbrel; cp docker-compose.yml ~/docker-compose.yml.bak&lt;/code&gt;

In case of issues, this will be used for reverting the system to original state.


Step 2. Download the latest binaries for the subsystems you wish you upgrade. The version mentioned in the commands below needs to be updated for the latest image.

'''tor proxy'''

&lt;code&gt; cd ~/umbrel; docker pull lncm/tor:0.4.7.8&lt;/code&gt;

Do note the digest for each docker image you pull. It would look as below. It is best to copy-paste into a notepad since you will need that information later. 

&lt;code&gt;0.4.7.8: Pulling from lncm/tor
Digest: sha256:aab30ebb496aa25934d6096951d8b200347c3c3ce5db3493695229efa2601f7b&lt;/code&gt;

'''bitcoind'''
&lt;code&gt;cd ~/umbrel; docker pull lncm/bitcoind:v23.0&lt;/code&gt;

'''lnd'''
&lt;code&gt;cd ~/umbrel; docker pull lightninglabs/lnd:v0.15.0-beta&lt;/code&gt;


Step 3. Edit the docker-compose.yml file with the latest images

&lt;code&gt; cd ~/umbrel; nano docker-compose.yml &lt;/code&gt;

yml files need careful editing since they do not tolerate unwanted characters. Please be careful.

for each of the image to be updated, edit the yml file with the imagename@sha256 hash you got from the digest. For example


'''tor proxy'''

&lt;pre&gt;       tor_proxy:
                container_name: tor
                image: lncm/tor:0.4.7.8@sha256:aab30ebb496aa25934d6096951d8b200347c3c3ce5db3493695229efa2601f7b&lt;/pre&gt;


'''bitcoind'''

&lt;pre&gt;       bitcoin:
                container_name: bitcoin
                image: lncm/bitcoind:v23.0@sha256:57317c90d89156a30327fe1b8e51b836e0fd1a8ba13721eb2e75e6b35a570e26&lt;/pre&gt;


'''lnd'''

&lt;pre&gt;        lnd:
                container_name: lnd
                image: lightninglabs/lnd:v0.15.0-beta@sha256:d227a9db0727ff56020c8d6604c8c369757123d238ab6ce679579c2dd0d0d259&lt;/pre&gt;


Step 4 : Restart

&lt;code&gt; cd ~/umbrel; sudo scripts/stop &amp;&amp; sudo scripts/start &lt;/code&gt;

Step 5 : Validate from logs that the latest version is being used. Take a copy of your latest channel backup. Done!</text>
      <sha1>ldqxxjfha4h6x6g9p0i8191fqzxfer1</sha1>
    </revision>
  </page>
  <page>
    <title>Iterm2</title>
    <ns>0</ns>
    <id>31</id>
    <revision>
      <id>914</id>
      <parentid>748</parentid>
      <timestamp>2021-10-02T19:48:21Z</timestamp>
      <contributor>
        <username>Lucasdcf</username>
        <id>27</id>
      </contributor>
      <comment>Marked this version for translation</comment>
      <origin>914</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="892" sha1="nigl46ldgczw2ttxd35lkigta0dtnkq" xml:space="preserve">&lt;languages/&gt;
&lt;translate&gt;
&lt;!--T:1--&gt;
[https://iterm2.com/ Iterm2] is a replacement for Terminal and the successor to iTerm. It works on Macs with macOS 10.14 or newer. iTerm2 brings the terminal into the modern age with features you never knew you always wanted.



== Some useful settings == &lt;!--T:2--&gt;

 

&lt;!--T:3--&gt;
Preventing window resizes is useful for easily changing fonts during screencasts. Changing font sizes is done with CMD + or -

&lt;!--T:4--&gt;
[[File:Iterm2 setting1.jpeg|500px]]


&lt;!--T:5--&gt;
Setting a custom shell to `/bin/bash` may be required as modern versions of OSX now use zsh as the default shell.


&lt;!--T:6--&gt;
[[File:Iterm2 setting2.jpeg|500px]]


&lt;!--T:7--&gt;
Setting a background image can make the CLI experience a lot more welcoming.


&lt;!--T:8--&gt;
[[File:Iterm2 setting3.jpeg|500px]]

&lt;!--T:9--&gt;
Splitting:

&lt;!--T:10--&gt;
[[File:Iterm2 splitting.jpeg|500px]]
&lt;/translate&gt;</text>
      <sha1>nigl46ldgczw2ttxd35lkigta0dtnkq</sha1>
    </revision>
  </page>
  <page>
    <title>Iterm2/en</title>
    <ns>0</ns>
    <id>507</id>
    <revision>
      <id>1013</id>
      <timestamp>2021-10-02T19:49:42Z</timestamp>
      <contributor>
        <username>FuzzyBot</username>
        <id>29</id>
      </contributor>
      <comment>Updating to match new version of source page</comment>
      <origin>1013</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="756" sha1="iwvuzg5co1czr8qawy67hg65a04wrdn" xml:space="preserve">&lt;languages/&gt;
[https://iterm2.com/ Iterm2] is a replacement for Terminal and the successor to iTerm. It works on Macs with macOS 10.14 or newer. iTerm2 brings the terminal into the modern age with features you never knew you always wanted.



== Some useful settings ==

 

Preventing window resizes is useful for easily changing fonts during screencasts. Changing font sizes is done with CMD + or -

[[File:Iterm2 setting1.jpeg|500px]]


Setting a custom shell to `/bin/bash` may be required as modern versions of OSX now use zsh as the default shell.


[[File:Iterm2 setting2.jpeg|500px]]


Setting a background image can make the CLI experience a lot more welcoming.


[[File:Iterm2 setting3.jpeg|500px]]

Splitting:

[[File:Iterm2 splitting.jpeg|500px]]</text>
      <sha1>iwvuzg5co1czr8qawy67hg65a04wrdn</sha1>
    </revision>
  </page>
  <page>
    <title>LND Configuration Settings</title>
    <ns>0</ns>
    <id>12</id>
    <revision>
      <id>2429</id>
      <parentid>2416</parentid>
      <timestamp>2022-08-02T06:49:31Z</timestamp>
      <contributor>
        <username>Testingtester</username>
        <id>28</id>
      </contributor>
      <origin>2429</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="10952" sha1="rn4exl014w4unsdds0c4ygu8my6k5gy" xml:space="preserve">&lt;languages/&gt;
&lt;translate&gt;


== Intro == &lt;!--T:1--&gt;

&lt;!--T:2--&gt;
WARNING: If you are running Umbrel not all of these configuration settings are open to you currently, because Umbrel does not compile all the flags for LND daemon. If you use a setting that isn't valid to your LND service will not start up.

     &lt;!--T:3--&gt;
Ever since the Lightning Network has started and when people began opening channels with others they have been trying to get the most out their Node.  People have been doing this ever since computers have gotten into peoples hands.  Trying out different settings and finding out what works best.
Anyone who would love to go over a long list of config parameters which can be used could check out this Lnd GitHub page 
https://github.com/lightningnetwork/lnd/blob/master/sample-lnd.conf

     &lt;!--T:4--&gt;
There are more entries then I ever thought possible, but this Wiki page is how to make adjustments to the Lightning Node environment which helps ones node to perform better.  Something which we'd all would like to happen.
The list which follows is the most common settings which Node Operators have come to agree which best suites a Node which wants to earn fees and route other Nodes Payments.
These settings apply to LND 0.12.1 releases.  The latest release still has many issues which need to be resolved.

&lt;!--T:5--&gt;
A full list of all LND settings can be found here:
https://github.com/lightningnetwork/lnd/blob/master/sample-lnd.conf



== For the Settings To Take Effect == &lt;!--T:6--&gt;

&lt;!--T:7--&gt;
For the settings to take effect, you will need to restart lnd. Do not restart entire node.

&lt;!--T:8--&gt;
Restart lnd &lt;code&gt; cd ~/umbrel ; docker-compose restart lnd; docker-compose ps &lt;/code&gt;

&lt;!--T:9--&gt;
For non umbrel, the instructions could be different.



== Opening Channel With Predefined Fees == &lt;!--T:10--&gt;

&lt;!--T:11--&gt;
With lnd you can set up fees only once the channel is opened. You cannot set fees on pending channels. Unless you have a predefined fees setup, the channel open with default fees (which is 1 Sat Base Fee and 1 ppm fee rate). Now it could be too low for your liking and sometimes, when you open channel with low on-chain fees (1 Sat/Vb) it could take a long time to confirm, sometimes overnight. If you want to sleep with peace that when your open the channel, it will be with your desired default fee you can make the following additions to your lnd.conf.

&lt;!--T:12--&gt;
The section below should be in the [Bitcoin] section of the lnd.conf file.

&lt;!--T:13--&gt;
{| class="wikitable"
! Setting
! Description
|-
|bitcoin.basefee=1000
|The base fee in millisatoshi we will charge for forwarding payments on our channels. This setting is equivalent to 1 Sat base fee.
|-
|bitcoin.feerate=2500
|The fee rate used when forwarding payments on our channels. The total fee charged is basefee + (amount * feerate / 1000000), where the amount is the forwarded amount. This setting is equivalent to 2500 ppm fee. 
|}



== Watch Tower Settings == &lt;!--T:14--&gt;

  

     &lt;!--T:15--&gt;
Pretty good name for what this does.  Watch Towers are communications between agreeing Nodes to keep on eye on each others Node.  Node Operators pass their Watch Tower address between each other so when one of them is down for some reason, the other one watches for channel situations like a forced close.  If this closure tries to use a non-current Channel state, then the Watch Tower will step in and penalize the Node trying to cheat.
     Currently, the fee for watching another Node is disabled, but at some point there will be a cost with this.  Now if your Node does catch some foul play one will earn fees for being the good guy.

&lt;!--T:16--&gt;
adding the following to your lnd.conf should do the job
&lt;pre&gt;
[wtclient]
wtclient.active=true
wtclient.sweep-fee-rate=10

&lt;!--T:17--&gt;
[watchtower]
watchtower.active=true
&lt;/pre&gt;

&lt;!--T:18--&gt;
{| class="wikitable"
! Setting
! Description
|-
|wtclient.active=true
|Turns on the Watch Tower Client (in the [wtclient] section of lnd.conf)
|- 
|wtclient.sweep-fee-rate=10 
|Sets the watchtower client sweep fee in sats/vbyte for the justice transaction (in the [wtclient] section of lnd.conf)
|-
|watchtower.active=true
|Enable integrated watchtower server listening on :9911 by default. (in the [watchtower] section of lnd.conf)
|}

&lt;!--T:19--&gt;
Restart lnd &lt;code&gt; cd ~/umbrel ; docker-compose restart lnd; docker-compose ps &lt;/code&gt;

&lt;!--T:20--&gt;
check watch tower server status 
&lt;code&gt;~/umbrel/bin/lncli tower info&lt;/code&gt;

&lt;!--T:21--&gt;
the output will confirm your watch tower server status. It will also provide you a pubkey. If you want to allow your friends to add you as their watch tower give them this URI. Do not distribute willy nilly. This is different from your pubkey.

&lt;!--T:22--&gt;
&lt;code&gt;
{
    "pubkey": "XXXXX00000XXXX0000",
    "listeners": [
        "[::]:9911"
    ],
    "uris": [
        "ABC123@XYZ123:9911"
    ]
}
&lt;/code&gt;

&lt;!--T:23--&gt;
Similarly, your friend (who you want to add as your watch tower) must give you their URI for you to add them as your watch tower. 

&lt;!--T:24--&gt;
Once you have their URI, add as
&lt;code&gt;~/umbrel/bin/lncli wtclient add &lt;URI provided&gt;&lt;/code&gt;

&lt;!--T:25--&gt;
You can find details of [https://lightningnetwork.plus/watchtower LN+ watchtower here] if you want to use them as watchtower. You do not need to follow other instructions, just use their watchtower URI for tor or for clearnet.

&lt;!--T:26--&gt;
Check if all is ok as watchtower client
&lt;code&gt;~/umbrel/bin/lncli wtclient towers&lt;/code&gt;
This will give you a list of watchtowers your node is connected to. You can keep 2-4 nodes as your watch towers.

&lt;!--T:27--&gt;
Check the statistics 
&lt;code&gt;~/umbrel/bin/lncli wtclient stats&lt;/code&gt;



== Alias == &lt;!--T:28--&gt;

&lt;!--T:29--&gt;
The section below should be in the [Application Options] section of the lnd.conf file.

&lt;!--T:30--&gt;
{| class="wikitable"
! Setting
! Description
|-
|alias=MyNodeAlias
|Set the Alias of the node
|}

&lt;!--T:31--&gt;
See [[Special:MyLanguage/Setting a node alias|Setting a node alias]] for more information.



== Routing Optimization == &lt;!--T:32--&gt;

&lt;!--T:33--&gt;
The value below must be under Application Options section of the lnd.conf file.
{| class="wikitable"
! Setting
! Description
|-
|max-cltv-expiry=5000
| The maximum number of blocks funds could be locked up for when forwarding payments. (default: 2016)
|-
|max-commit-fee-rate-anchors=100
| The maximum fee rate in sat/vbyte that will be used for commitments of channels of the anchors type. Must be large enough to ensure transaction propagation (default: 10)
|}

The section below should be in the [routerrpc] section of the lnd.conf file. *Note* the values suggested below are inspired from [https://github.com/alexbosworth/run-lnd AlexBosworth's lnd configuration ]. These may not work for all nodes. Stay with default configuration unless you know what you are looking to achieve.

{| class="wikitable"
! Setting
! Description
|-
|routerrpc.apriorihopprob=0.5
|Assumed success probability of a hop in a route when no other information is available (default: 0.6). For aggressive, set it higher and your node will try unknown routes but will take longer to route.
|-
|routerrpc.aprioriweight=0.75
|Weight of the a priori probability in success probability estimation. Valid values are in [0, 1]. (default: 0.5). For aggressive, set it higher. 1 turns off i.e. probability of a future event is not dependent on the previous outcome. 
|-
|routerrpc.attemptcost=10
| The (virtual) fixed cost in sats of a failed payment attempt (default: 100). For aggressive, set lower.
|-
|routerrpc.attemptcostppm=1
| The (virtual) proportional cost in ppm of the total amount of a failed payment attempt (default: 1000). For aggressive set lower.
|-
|routerrpc.maxmchistory=100000
|The maximum number of payment results that are held on disk by mission control. For aggressive set higher. 
|-
|routerrpc.minrtprob=0.005
| Minimum required route success probability to attempt the payment (default: 0.01). For aggressive set lower.
|-
|routerrpc.penaltyhalflife=2h0m0s
| Defines the duration after which a penalized node or channel is back at 50% probability (default: 1h0m0s). To keep failed routes out of future routes, set a higher time.
|}

== Channel Size limits == &lt;!--T:34--&gt;

&lt;!--T:35--&gt;
The section below should be in the [Application Options] section of the lnd.conf file.

&lt;!--T:36--&gt;
{| class="wikitable"
! Setting
! Description
|-
|minchansize=5000000
| Minimum Channel Size in Sats
|-
|maxchansize=50000000
| Maximum Channel Size in Sats
|-
|maxpendingchannels=5
|The maximum number of incoming pending channels permitted per peer 
|-
|protocol.wumbo-channels=true
|If set, then lnd will create and accept requests for channels larger than 0.167 BTC, up to max 5 BTC
|}



== BOLT Database optimizations (channel.db) == &lt;!--T:37--&gt;

&lt;!--T:38--&gt;
{| class="wikitable"
! Setting
! Description
|- 
|&lt;b&gt;under [bolt] section&lt;/b&gt;
|-
|db.bolt.auto-compact=true
|Allow automatic compaction of your channel.db file on startup
|-
|db.bolt.auto-compact-min-age=240h
|How long ago the last compaction of a database file must be for it to be considered for auto compaction again. Can be set to 0 to compact on every startup. (default: 168h)
|- 
|&lt;b&gt;under [Application Options]&lt;/b&gt;
|-
|gc-canceled-invoices-on-startup=1
|Cleanup canceled invoices on startup
|-
|gc-canceled-invoices-on-the-fly=1
|Cleanup chanceled invoices at run-time
|-
|&lt;b&gt;under [caches] section&lt;/b&gt;
|-
|caches.channel-cache-size=500000
|Maximum number of entries contained in the channel cache, which is used to reduce memory allocations from gossip queries from peers. Each entry requires roughly 2Kb. (default: 20000)
|- 
|&lt;b&gt;under [routing] section&lt;/b&gt;
|-
|routing.strictgraphpruning=1
|Remove channels from graph that have one side that hasn't made announcements
|}

== Startup Optimizations == &lt;!--T:39--&gt;

&lt;!--T:40--&gt;
The section below should be in the [Application Options] section of the lnd.conf file.

&lt;!--T:41--&gt;
{| class="wikitable"
! Setting
! Description
|-
|sync-freelist=false
|Enable free list syncing for the default bbolt database. This will decrease start up time, but can result in performance degradation for very large databases, and also result in higher memory usage
|-
|stagger-initial-reconnect=1
|Stagger initial reconnection on startup, this will reduce load when you have a bunch of channels
|}

== Auto Wallet Unlock (Version 0.13.0+) == &lt;!--T:42--&gt;

&lt;!--T:43--&gt;
{| class="wikitable"
! Setting
! Description
|-
|wallet-unlock-password-file=/path/to/file
| Provide filepath to plain-text file with your password. This will automatically unlock LND 
|}



== Logging == &lt;!--T:44--&gt;

&lt;!--T:45--&gt;
{| class="wikitable"
! Setting
! Description
|-
|debuglevel=CNCT=debug,CRTR=debug,HSWC=debug,NTFN=debug,RPCS=debug
| This allows you to change the default logging level, the example provides max amount of logging information at the expense of some more disk IO and space 
|}

&lt;/translate&gt;</text>
      <sha1>rn4exl014w4unsdds0c4ygu8my6k5gy</sha1>
    </revision>
  </page>
  <page>
    <title>LND Configuration Settings/en</title>
    <ns>0</ns>
    <id>506</id>
    <revision>
      <id>1011</id>
      <timestamp>2021-10-02T19:49:31Z</timestamp>
      <contributor>
        <username>FuzzyBot</username>
        <id>29</id>
      </contributor>
      <comment>Updating to match new version of source page</comment>
      <origin>1011</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="9836" sha1="5zok1ax3i35tf3vca62lrwjl4bihgr7" xml:space="preserve">&lt;languages/&gt;


== Intro ==

WARNING: If you are running Umbrel not all of these configuration settings are open to you currently, because Umbrel does not compile all the flags for LND daemon. If you use a setting that isn't valid to your LND service will not start up.

     Ever since the Lightning Network has started and when people began opening channels with others they have been trying to get the most out their Node.  People have been doing this ever since computers have gotten into peoples hands.  Trying out different settings and finding out what works best.
Anyone who would love to go over a long list of config parameters which can be used could check out this Lnd GitHub page 
https://github.com/lightningnetwork/lnd/blob/master/sample-lnd.conf

     There are more entries then I ever thought possible, but this Wiki page is how to make adjustments to the Lightning Node environment which helps ones node to perform better.  Something which we'd all would like to happen.
The list which follows is the most common settings which Node Operators have come to agree which best suites a Node which wants to earn fees and route other Nodes Payments.
These settings apply to LND 0.12.1 releases.  The latest release still has many issues which need to be resolved.

A full list of all LND settings can be found here:
https://github.com/lightningnetwork/lnd/blob/master/sample-lnd.conf



== For the Settings To Take Effect ==

For the settings to take effect, you will need to restart lnd. Do not restart entire node.

Restart lnd &lt;code&gt; cd ~/umbrel ; docker-compose restart lnd; docker-compose ps &lt;/code&gt;

For non umbrel, the instructions could be different.



== Opening Channel With Predefined Fees ==

With lnd you can set up fees only once the channel is opened. You cannot set fees on pending channels. Unless you have a predefined fees setup, the channel open with default fees (which is 1 Sat Base Fee and 1 ppm fee rate). Now it could be too low for your liking and sometimes, when you open channel with low on-chain fees (1 Sat/Vb) it could take a long time to confirm, sometimes overnight. If you want to sleep with peace that when your open the channel, it will be with your desired default fee you can make the following additions to your lnd.conf.

The section below should be in the [Bitcoin] section of the lnd.conf file.

{| class="wikitable"
! Setting
! Description
|-
|bitcoin.basefee=1000
|The base fee in millisatoshi we will charge for forwarding payments on our channels. This setting is equivalent to 1 Sat base fee.
|-
|bitcoin.feerate=2500
|The fee rate used when forwarding payments on our channels. The total fee charged is basefee + (amount * feerate / 1000000), where the amount is the forwarded amount. This setting is equivalent to 2500 ppm fee. 
|}



== Watch Tower Settings ==

  

     Pretty good name for what this does.  Watch Towers are communications between agreeing Nodes to keep on eye on each others Node.  Node Operators pass their Watch Tower address between each other so when one of them is down for some reason, the other one watches for channel situations like a forced close.  If this closure tries to use a non-current Channel state, then the Watch Tower will step in and penalize the Node trying to cheat.
     Currently, the fee for watching another Node is disabled, but at some point there will be a cost with this.  Now if your Node does catch some foul play one will earn fees for being the good guy.

adding the following to your lnd.conf should do the job
&lt;pre&gt;
[wtclient]
wtclient.active=true
wtclient.sweep-fee-rate=10

[watchtower]
watchtower.active=true
&lt;/pre&gt;

{| class="wikitable"
! Setting
! Description
|-
|wtclient.active=true
|Turns on the Watch Tower Client (in the [wtclient] section of lnd.conf)
|- 
|wtclient.sweep-fee-rate=10 
|Sets the watchtower client sweep fee in sats/vbyte for the justice transaction (in the [wtclient] section of lnd.conf)
|-
|watchtower.active=true
|Enable integrated watchtower server listening on :9911 by default. (in the [watchtower] section of lnd.conf)
|}

Restart lnd &lt;code&gt; cd ~/umbrel ; docker-compose restart lnd; docker-compose ps &lt;/code&gt;

check watch tower server status 
&lt;code&gt;~/umbrel/bin/lncli tower info&lt;/code&gt;

the output will confirm your watch tower server status. It will also provide you a pubkey. If you want to allow your friends to add you as their watch tower give them this URI. Do not distribute willy nilly. This is different from your pubkey.

&lt;code&gt;
{
    "pubkey": "XXXXX00000XXXX0000",
    "listeners": [
        "[::]:9911"
    ],
    "uris": [
        "ABC123@XYZ123:9911"
    ]
}
&lt;/code&gt;

Similarly, your friend (who you want to add as your watch tower) must give you their URI for you to add them as your watch tower. 

Once you have their URI, add as
&lt;code&gt;~/umbrel/bin/lncli wtclient add &lt;URI provided&gt;&lt;/code&gt;

You can find details of [https://lightningnetwork.plus/watchtower LN+ watchtower here] if you want to use them as watchtower. You do not need to follow other instructions, just use their watchtower URI for tor or for clearnet.

Check if all is ok as watchtower client
&lt;code&gt;~/umbrel/bin/lncli wtclient towers&lt;/code&gt;
This will give you a list of watchtowers your node is connected to. You can keep 2-4 nodes as your watch towers.

Check the statistics 
&lt;code&gt;~/umbrel/bin/lncli wtclient stats&lt;/code&gt;



== Alias ==

The section below should be in the [Application Options] section of the lnd.conf file.

{| class="wikitable"
! Setting
! Description
|-
|alias=MyNodeAlias
|Set the Alias of the node
|}

See [[Special:MyLanguage/Setting a node alias|Setting a node alias]] for more information.



== Routing Optimization ==

The section below should be in the [routerrpc] section of the lnd.conf file.
{| class="wikitable"
! Setting
! Description
|-
|routerrpc.apriorihopprob=0.5
|Assumed success probability of a hop in a route when no other information is available (default: 0.6). For aggressive, set it higher and your node will try unknown routes but will take longer to route.
|-
|routerrpc.aprioriweight=0.75
|Weight of the a priori probability in success probability estimation. Valid values are in [0, 1]. (default: 0.5). For aggressive, set it higher. 1 turns off i.e. probability of a future event is not dependent on the previous outcome. 
|-
|routerrpc.attemptcost=10
| The (virtual) fixed cost in sats of a failed payment attempt (default: 100). For aggressive, set lower.
|-
|routerrpc.attemptcostppm=1
| The (virtual) proportional cost in ppm of the total amount of a failed payment attempt (default: 1000). For aggressive set lower.
|-
|routerrpc.maxmchistory=100000
|The maximum number of payment results that are held on disk by mission control. For aggressive set higher. 
|-
|routerrpc.minrtprob=0.005
| Minimum required route success probability to attempt the payment (default: 0.01). For aggressive set lower.
|-
|routerrpc.penaltyhalflife=2h0m0s
| Defines the duration after which a penalized node or channel is back at 50% probability (default: 1h0m0s). To keep failed routes out of future routes, set a higher time.
|-
|max-cltv-expiry=5000
| The maximum number of blocks funds could be locked up for when forwarding payments. (default: 2016)
|-
|max-commit-fee-rate-anchors=100
| The maximum fee rate in sat/vbyte that will be used for commitments of channels of the anchors type. Must be large enough to ensure transaction propagation (default: 10)
|}


== Channel Size limits ==

The section below should be in the [Application Options] section of the lnd.conf file.

{| class="wikitable"
! Setting
! Description
|-
|minchansize=5000000
| Minimum Channel Size in Sats
|-
|maxchansize=50000000
| Maximum Channel Size in Sats
|-
|maxpendingchannels=5
|The maximum number of incoming pending channels permitted per peer 
|-
|protocol.wumbo-channels=true
|If set, then lnd will create and accept requests for channels larger than 0.167 BTC, up to max 5 BTC
|}



== Database optimizations ==

{| class="wikitable"
! Setting
! Description
|- 
|under [bolt] section
|-
|db.bolt.auto-compact=true
|Allow automatic compaction of your channel.db file on startup
|-
|db.bolt.auto-compact-min-age=240h
|How long ago the last compaction of a database file must be for it to be considered for auto compaction again. Can be set to 0 to compact on every startup. (default: 168h)
|- 
|under [Application Options]
|-
|gc-canceled-invoices-on-startup=1
|Cleanup canceled invoices on startup
|-
|gc-canceled-invoices-on-the-fly=1
|Cleanup chanceled invoices at run-time
|-
|Under [caches] section
|-
|caches.channel-cache-size=500000
|Maximum number of entries contained in the channel cache, which is used to reduce memory allocations from gossip queries from peers. Each entry requires roughly 2Kb. (default: 20000)
|}



== Startup Optimizations ==

The section below should be in the [Application Options] section of the lnd.conf file.

{| class="wikitable"
! Setting
! Description
|-
|sync-freelist=1
|Enable free list syncing for the default bbolt database. This will decrease start up time, but can result in performance degradation for very large databases, and also result in higher memory usage
|-
|stagger-initial-reconnect=1
|Stagger initial reconnection on startup, this will reduce load when you have a bunch of channels
|}



== Auto Wallet Unlock (Version 0.13.0+) ==

{| class="wikitable"
! Setting
! Description
|-
|wallet-unlock-password-file=/path/to/file
| Provide filepath to plain-text file with your password. This will automatically unlock LND 
|}



== Logging ==

{| class="wikitable"
! Setting
! Description
|-
|debuglevel=CNCT=debug,CRTR=debug,HSWC=debug,NTFN=debug,RPCS=debug
| This allows you to change the default logging level, the example provides max amount of logging information at the expense of some more disk IO and space 
|}</text>
      <sha1>5zok1ax3i35tf3vca62lrwjl4bihgr7</sha1>
    </revision>
  </page>
  <page>
    <title>Lightning Exchanges</title>
    <ns>0</ns>
    <id>11</id>
    <revision>
      <id>928</id>
      <parentid>750</parentid>
      <timestamp>2021-10-02T19:48:41Z</timestamp>
      <contributor>
        <username>Lucasdcf</username>
        <id>27</id>
      </contributor>
      <comment>Marked this version for translation</comment>
      <origin>928</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="165" sha1="az81y6ftwbk8dm0b9j2t58s42gat2lf" xml:space="preserve">&lt;languages/&gt;
&lt;translate&gt;
&lt;!--T:1--&gt;
This page is a stub:

&lt;!--T:2--&gt;
[https://github.com/theDavidCoen/LightningExchanges Lightning Exchanges] node list.
&lt;/translate&gt;</text>
      <sha1>az81y6ftwbk8dm0b9j2t58s42gat2lf</sha1>
    </revision>
  </page>
  <page>
    <title>Lightning Exchanges/en</title>
    <ns>0</ns>
    <id>944</id>
    <revision>
      <id>1471</id>
      <timestamp>2021-10-02T20:52:37Z</timestamp>
      <contributor>
        <username>FuzzyBot</username>
        <id>29</id>
      </contributor>
      <comment>Updating to match new version of source page</comment>
      <origin>1471</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="118" sha1="7yei0hkdhi2t9yo4ak9wxg0izvbbmb7" xml:space="preserve">&lt;languages/&gt;
This page is a stub:

[https://github.com/theDavidCoen/LightningExchanges Lightning Exchanges] node list.</text>
      <sha1>7yei0hkdhi2t9yo4ak9wxg0izvbbmb7</sha1>
    </revision>
  </page>
  <page>
    <title>Local PlebNet groups</title>
    <ns>0</ns>
    <id>1197</id>
    <revision>
      <id>2259</id>
      <parentid>2033</parentid>
      <timestamp>2022-01-30T20:05:45Z</timestamp>
      <contributor>
        <username>VS</username>
        <id>18</id>
      </contributor>
      <origin>2259</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="412" sha1="7o3g8eup45m3kbyaw07z21vo5z69gw8" xml:space="preserve">&lt;languages/&gt;
&lt;translate&gt;

&lt;!--T:1--&gt;
Local PlebNet groups bridge the gap between the physical and the digital worlds. Soon, every majority city will have its PlebNet group!

== Local groups == &lt;!--T:2--&gt;

=== Europe === &lt;!--T:3--&gt;

==== UK ==== &lt;!--T:4--&gt;

&lt;!--T:5--&gt;
* [https://t.me/plebnetlondon PlebNet London]

=== North America === &lt;!--T:6--&gt;

==== USA ==== &lt;!--T:7--&gt;

&lt;!--T:8--&gt;
* PlebNet SF

&lt;/translate&gt;</text>
      <sha1>7o3g8eup45m3kbyaw07z21vo5z69gw8</sha1>
    </revision>
  </page>
  <page>
    <title>Local PlebNet groups/en</title>
    <ns>0</ns>
    <id>1207</id>
    <revision>
      <id>2056</id>
      <parentid>2044</parentid>
      <timestamp>2021-10-24T10:11:58Z</timestamp>
      <contributor>
        <username>FuzzyBot</username>
        <id>29</id>
      </contributor>
      <comment>Updating to match new version of source page</comment>
      <origin>2056</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="269" sha1="gvhfnakj7ejs8lw4vuxciiaq3b3kgvh" xml:space="preserve">&lt;languages/&gt;

Local PlebNet groups bridge the gap between the physical and the digital worlds. Soon, every majority city will have its PlebNet group!

== Local groups ==

=== Europe ===

==== UK ====

* PlebNet London

=== North America ===

==== USA ====

* PlebNet SF</text>
      <sha1>gvhfnakj7ejs8lw4vuxciiaq3b3kgvh</sha1>
    </revision>
  </page>
  <page>
    <title>Loop</title>
    <ns>0</ns>
    <id>14</id>
    <revision>
      <id>975</id>
      <parentid>751</parentid>
      <timestamp>2021-10-02T19:48:51Z</timestamp>
      <contributor>
        <username>Lucasdcf</username>
        <id>27</id>
      </contributor>
      <comment>Marked this version for translation</comment>
      <origin>975</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="1142" sha1="02hho6teeol6wp6jfy7hdnr55ywfph8" xml:space="preserve">&lt;languages/&gt;
&lt;translate&gt;
&lt;!--T:1--&gt;
Loop is a service that enables lightning node operators to convert their on-chain BTC into Lightning BTC, and vice versa. 


== "Looping in" == &lt;!--T:2--&gt;

&lt;!--T:3--&gt;
"Looping in" serves multiple purposes:

&lt;!--T:4--&gt;
- it increases a node's lightning inbound liquidity
- it sends the liquidity into the channels that are in most need of inbound liquidity, so they end up in a balanced state


== "Looping out" == &lt;!--T:5--&gt;

&lt;!--T:6--&gt;
"Looping out" is primarily used to transfer lightning funds back to on-chain.


== Installing Loop == &lt;!--T:7--&gt;

&lt;!--T:8--&gt;
Installing loop requires installing [https://docs.lightning.engineering/lightning-network-tools/lightning-terminal lit] 'the lightning terminal'.

&lt;!--T:9--&gt;
Lit is composed of multiple binaries, which can either be run on the node directly, or externally to the node by setting up proper access.

&lt;!--T:10--&gt;
Lit binaries are

&lt;!--T:11--&gt;
* frcli
* litd
* lncli
* loop
* pool

&lt;!--T:12--&gt;
Lit needs to be configured with a variation of the lnd.conf file, and the lnd process needs to first be shut down before lit can be launched.
&lt;/translate&gt;</text>
      <sha1>02hho6teeol6wp6jfy7hdnr55ywfph8</sha1>
    </revision>
  </page>
  <page>
    <title>Loop/en</title>
    <ns>0</ns>
    <id>488</id>
    <revision>
      <id>990</id>
      <timestamp>2021-10-02T19:49:06Z</timestamp>
      <contributor>
        <username>FuzzyBot</username>
        <id>29</id>
      </contributor>
      <comment>Updating to match new version of source page</comment>
      <origin>990</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="982" sha1="egi0ym278263o138htnbe679nsekcrd" xml:space="preserve">&lt;languages/&gt;
Loop is a service that enables lightning node operators to convert their on-chain BTC into Lightning BTC, and vice versa. 


== "Looping in" ==

"Looping in" serves multiple purposes:

- it increases a node's lightning inbound liquidity
- it sends the liquidity into the channels that are in most need of inbound liquidity, so they end up in a balanced state


== "Looping out" ==

"Looping out" is primarily used to transfer lightning funds back to on-chain.


== Installing Loop ==

Installing loop requires installing [https://docs.lightning.engineering/lightning-network-tools/lightning-terminal lit] 'the lightning terminal'.

Lit is composed of multiple binaries, which can either be run on the node directly, or externally to the node by setting up proper access.

Lit binaries are

* frcli
* litd
* lncli
* loop
* pool

Lit needs to be configured with a variation of the lnd.conf file, and the lnd process needs to first be shut down before lit can be launched.</text>
      <sha1>egi0ym278263o138htnbe679nsekcrd</sha1>
    </revision>
  </page>
  <page>
    <title>Main Page</title>
    <ns>0</ns>
    <id>1</id>
    <revision>
      <id>2431</id>
      <parentid>2430</parentid>
      <timestamp>2022-10-06T16:59:25Z</timestamp>
      <contributor>
        <username>Refazi</username>
        <id>47</id>
      </contributor>
      <origin>2431</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="8094" sha1="stim0crb00wl0akwazza70mkdf69wxq" xml:space="preserve">&lt;languages/&gt;
&lt;translate&gt;
&lt;!--T:2--&gt;
'''Welcome to PLEBNET!'''

&lt;!--T:53--&gt;
We've outlined the main 'guide' on this page. Follow the articles here in order to gain a better understanding of the steps required to join PLEBNET, and getting your node up &amp; running. If you'd like to simply browse around, you can view all our pages [[Special:AllPages|Special:AllPages]].


== To read first == &lt;!--T:3--&gt;

&lt;!--T:4--&gt;
[[Special:MyLanguage/Welcome to Plebnet|Welcome to PLEBNET]] 

&lt;!--T:5--&gt;
'''Please read the above link before anything else!''' Contains a useful introduction and tips.

[[Notes on Privacy | Important points to consider on how to protect your privacy]]

== Getting Started == &lt;!--T:6--&gt;

&lt;!--T:7--&gt;
Are you brand new and perhaps don't quite understand lightning? Do you not have your own node yet? Are you not yet in the PLEBNET telegram group? 

&lt;!--T:8--&gt;
Please see the [[Special:MyLanguage/Getting started|Getting started]] page.


== Claim your node [optional]== &lt;!--T:9--&gt;

Important: If you are concerned about your privacy, do not claim your node (or for that matter use telegram). There are a few things to be aware of when claiming your node on cheeserobot. CheeseRobot, a closed source software, will link your telegram handle to your node, and subsequently to UTXOs (or bitcoin public addresses) for any public channels that you establish. This may have unintended consequences of doxing your identify (and UTXOs) in case the phone number that is associated with your telegram handle is exposed. Make sure to take basic precautions if you do opt to use the cheeserobot, like making sure that your telegram phone number isn't visible by default and isn't exposed to your contacts.

&lt;!--T:10--&gt;
For telegram, DM [https://t.me/cheeserobot @cheeserobot] and then &lt;code&gt;/claim&lt;/code&gt; your node (follow the instructions, you will need to sign a message with your node to prove you are owner of the node).

&lt;!--T:11--&gt;
Then, in the [https://t.me/plebnet PLEBNET] group announce your node with &lt;code&gt;/node&lt;/code&gt;. If you see your own node, success.
Repeat in other groups which support CheeseRobot with &lt;code&gt;/node&lt;/code&gt;.

&lt;!--T:12--&gt;
Additionally, [https://amboss.space Amboss.space] is one of the best websites for looking up nodes and their basic information. People may go to Amboss to browse your node's info. You can claim your node on Amboss which will allow you personalize your node's profile and add additional information. Use these instructions: [[Special:MyLanguage/Claim on Amboss|Claim on Amboss]]

== Opening Channels == &lt;!--T:13--&gt;

&lt;!--T:14--&gt;
The first question which a pleb has after (or even before) the node is synced "'''who should I open channel with'''"

&lt;!--T:15--&gt;
I would say - '''with a mentor who is willing to spend time with you, teach you the ropes, mentor and guide you to be a better node runner'''

&lt;!--T:16--&gt;
Of course in the age of google, internet, and instant gratification, this thought can be frowned upon but there is no replacement for a mentor in your journey as node runner.

&lt;!--T:17--&gt;
For information relating to lightning channels, including methods to get inbound liquidity see: [[Special:MyLanguage/Opening channels|Opening channels]]

== Rebalance Channels == 

Keeping your channels properly balanced is critical to your node's routing ability. Ride The Lightning and Thunderhub are good visual tools to start with. As you progress in your journey, the [https://github.com/alexbosworth/balanceofsatoshis Balance of Satoshis] is a command-line tool that provides extra flexibility to rebalance your peers. [https://github.com/itsneski/lightning-jet Lightning Jet] is a fully automated rebalancer that will automatically rebalance all of your channels. See [[Resources]] for links to other available tools.

== Maintaining Proper Node Hygiene == &lt;!--T:18--&gt;

&lt;!--T:21--&gt;
[[Special:MyLanguage/Node Hardening|Node Hardening]]

&lt;!--T:19--&gt;
[[Special:MyLanguage/Maintaining node hygiene|Maintaining node hygiene]]

&lt;!--T:20--&gt;
[[Special:MyLanguage/Node Hardware|Node Hardware]]

&lt;!--T:22--&gt;
[[Special:MyLanguage/UPS|UPS]] (Uninterrupted Power Supply)

[[Reduce_channel_database_size | Keeping Channel DB in check ]]

[[Compacting_Channel_DB | Prune and compact channel DB ]]

== Backup/Recovery == &lt;!--T:23--&gt;

&lt;!--T:24--&gt;
The following link contains some important information about channel backups and recovery solutions so that you have a better idea of how to keep your funds safe.

&lt;!--T:25--&gt;
[[Special:MyLanguage/Backup/Recovery|Backup/Recovery]]


== Let’s Get Personal == &lt;!--T:26--&gt;

&lt;!--T:27--&gt;
Your node can be customized to appear as a name (alias) rather than just a bunch of random letters and numbers. You can also set a color for your node that will show up on various lightning-related websites and programs. 

&lt;!--T:28--&gt;
[[Special:MyLanguage/Setting a node alias|Setting a node alias]]


== Upgrades == &lt;!--T:29--&gt;

&lt;!--T:30--&gt;
[[Special:MyLanguage/Upgrading Umbrel Node|Upgrading Umbrel Node]]






== Popular Tools == &lt;!--T:31--&gt;

=== Balance of Satoshis === &lt;!--T:33--&gt;

&lt;!--T:35--&gt;
Balance of Satoshis, or BoS, is a set of commands for working with LND balances. It can do similar things as interfaces like ThunderHub or Ride the Lightning. However, your options are much wider with BoS, and you will need it if you want to set up a telegram bot with your node (to get notifications whenever channels are opened/closed, whenever you forward a payment, whenever your node goes offline, and to get automatic channel backups for safety).

&lt;!--T:37--&gt;
For more information, and common BoS commands see: [[Special:MyLanguage/Balance of Satoshis|Balance of Satoshis]].

&lt;!--T:52--&gt;
[https://github.com/niteshbalusu11/BOS-Commands-Document See this excellent documentation for bos commands] 

&lt;!--T:34--&gt;
Installation: process for [[Special:MyLanguage/Umbrel - Installing BoS|Umbrel - Installing BoS]]. Includes instructions for setting up BoS telegram bot.

=== Lightning Shell === &lt;!--T:34--&gt;
[https://lightningshell.app/ Lightning Shell] Lightning Shell is a shell for Bitcoin nodes / personal servers. Technically it’s a Docker container with ttyd and additional utilities.

It can be installed [https://github.com/ibz/lightning-shell manually] or via the Umbrel/Citadel app stores

Lightning shell includes many useful tools and saves you a lot of time installing them:

[[Special:MyLanguage/Umbrel - Installing BoS|Balance of Satoshis]]

[https://github.com/edouardparis/lntop lntop]

lncli

[[Special:MyLanguage/Suez| Suez]]


== LND Configuration Settings Overview == &lt;!--T:35--&gt;

&lt;!--T:36--&gt;
Click the link below for information related to setting up channel size limits, predefined fees on new channels, setting up watchtowers, and other optimization settings.

&lt;!--T:37--&gt;
[[Special:MyLanguage/LND Configuration Settings|LND Configuration Settings]]


== Running A Profitable Routing Node == &lt;!--T:38--&gt;

&lt;!--T:39--&gt;
Not seeing routing through your node, or your sats are only moving in one direction?

&lt;!--T:40--&gt;
Want more information about rebalancing and fees? Want to run a program that auto-adjusts your fees, or one that gives you KPIs (Key Performance Indicators)?

&lt;!--T:41--&gt;
'''Your one stop shop for tips on routing node profitability:''' [[Special:MyLanguage/Running A Profitable Routing Node|Running A Profitable Routing Node]]

&lt;!--T:42--&gt;
[[Special:MyLanguage/Fees And Profitability|Shortcut to auto-fee and auto-KPI instructions]]


== Playground / Sandbox == &lt;!--T:43--&gt;

&lt;!--T:44--&gt;
Click the image below to get information on PLEBNET Playground, a place where you can learn and use the lightning network without risking any real money (signet).

&lt;!--T:45--&gt;
[[File:PlebnetPlayground.jpg|450px|link=Plebnet Playground|alt=Plebnet Playground Logo]]


== FAQ == &lt;!--T:46--&gt;

&lt;!--T:47--&gt;
A selection of questions frequently asked in [https://t.me/plebnet PLEBNET] groups.
[[Special:MyLanguage/FAQ|FAQ]]


== Resources == &lt;!--T:48--&gt;

&lt;!--T:49--&gt;
[[Special:MyLanguage/Resources|Resources]]

= All Pages = &lt;!--T:50--&gt;




&lt;/translate&gt;
{{:Special:Allpages}}
&lt;translate&gt;
&lt;/translate&gt;</text>
      <sha1>stim0crb00wl0akwazza70mkdf69wxq</sha1>
    </revision>
  </page>
  <page>
    <title>Main Page/ar</title>
    <ns>0</ns>
    <id>1267</id>
    <revision>
      <id>2397</id>
      <parentid>2395</parentid>
      <timestamp>2022-03-01T01:49:47Z</timestamp>
      <contributor>
        <username>Bamski</username>
        <id>46</id>
      </contributor>
      <comment>Created page with "[https://github.com/niteshbalusu11/BOS-Commands-Document راجع هذا مستند التعليمي الممتاز لأوامر BoS]"</comment>
      <origin>2397</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="8066" sha1="m2catt48utd2ocp40o6k9ehir8h78tf" xml:space="preserve">&lt;languages/&gt;
أهلًا بكم في Plebnet!

لقد حددنا "الدليل" الرئيسي في هذه الصفحة. اتبع المقالات هنا من أجل الحصول على فهم أفضل للخطوات المطلوبة للانضمام إلى بليبنيت، والحصول على العقدة الخاصة بك وتشغيلها. إذا كنت ترغب في التصفح ببساطة، يمكنك عرض جميع صفحاتنا [[Special: AllPages | جميع الصفحات]].


== للقراءة أولًا ==

[[Special:MyLanguage/Welcome to Plebnet|أهلًا بكم في بليبنيت]] 

الرجاء قراءة الرابط أعلاه قبل أي شيء آخر! يحتوي على مقدمة ونصائح مفيدة.


== البد بالعَمْل ==

هل أنت جديد وربما لا تفهم شبكة البرق تمامًا؟ ليس لديك عقدة خاصة بك حتى الآن؟ لست مشتركًا في مجموعة بليبنت على التلغرام؟ 

يرجى الاطلاع على صفحة [[Special: MyLanguage / Getting started | البدء بالعمل]].


== اطلب عقدتك ==

بالنسبة إلى التلغرام ، راسل
 
[https://t.me/cheeserobotcheeserobot @cheeserobot]
 ثم  أدخل الأمر التالي &lt;code&gt; / claim &lt;/code&gt;  العقدة الخاصة بك (اتبع التعليمات ، سوف تحتاج إلى توقيع رسالة مع العقدة الخاصة بك لإثبات أنك  صاحب العقدة).

بعد ذلك ، في مجموعة [https://t.me/plebnet plebnet] أعلن عن عقدتك باستخدام &lt;code&gt; / node &lt;/code&gt;.  إذا رأيت العقدة الخاصة بك ، ‎لقد نجحت.
  كرر في المجموعات الأخرى التي تدعم CheeseRobot مع &lt;code&gt; / node &lt;/code&gt;.

بالإضافة إلى ذلك ، يعد [https://amboss.space Amboss.space] أحد أفضل مواقع الويب للبحث عن العقد ومعلوماتها الأساسية.  يمكن للأشخاص الذهاب إلى Amboss لتصفح معلومات العقدة الخاصة بك.  يمكنك المطالبة بالعقدة الخاصة بك على Amboss مما سيسمح لك بتخصيص ملف تعريفي للعقدة الخاص بك وإضافة معلومات إضافية.  استخدم هذه التعليمات: [[Special: MyLanguage / Claim on Amboss | مطالبة على Amboss]]


== فتح القنوات ==

السؤال الأول الذي يطرحه الشخص المبتدئ بعد (أو حتى قبل) تنصيب العقدة "مع من يجب فتح القناة باستخدام"

أود أن أقول - "من الأفضل أن تجد مرشدًا مستعدًا لقضاء بعض الوقت معك، يعلمك كيف تعمل الشبكة، ويرشدك لتكون مشغلًا أفضل للعقد"

بالطبع في عصر جوجل والإنترنت قد يكون هذا الفكر غير عملي ولكن لا يوجد بديل للمعلّم في رحلتك كمشغل للعقد.

للحصول على معلومات تتعلق بقنوات البرق، بما في ذلك طرق الحصول على السيولة الواردة، راجع: [[Special: MyLanguage / فتح القنوات | فتح القنوات]]


== الحفاظ على نظافة العقدة ==

[[Special:MyLanguage/Node Hardening|تحصين العقدة]]

[[Special:MyLanguage/Maintaining node hygiene|الحفاظ على نظافة العقدة]]

[[Special:MyLanguage/Node Hardware|أجهزة العقدة]]

[[Special:MyLanguage/UPS|UPS]] (بطاريات الامداد المتواصل)

== النسخ الاحتياطي / الاسترداد ==

يحتوي الرابط التالي على بعض المعلومات المهمة حول نُسخ الحماية الاحتياطية للقنوات وحلول الاسترداد بحيث يكون لديك فكرة أفضل عن كيفية الحفاظ على أمان أموالك.

[[Special:MyLanguage/Backup/Recovery|النسخ الاحتياطي/الاسترداد]]


إضافة معلومات شخصية على العقدة

يمكن تخصيص عقدتك لتظهر كاسم (اسم مستعار) بدلاً من مجرد مجموعة من الأحرف والأرقام العشوائية. يمكنك أيضًا تعيين لون للعقدة الخاصة بك والذي سيظهر في العديد من المواقع والبرامج ذات الصلة بشبكة البرق (لا تستخدم اسمك الشخصي) 

[[Special:MyLanguage/Setting a node alias|اسم العقدة المستعار]]


== التحديثات ==

[[Special:MyLanguage/Upgrading Umbrel Node|تحديث عقدة Umbrel]]


= بوت Balance of Satoahi =

Balance of Satoshis ، أو BoS ، هي مجموعة من الأوامر تعمل مع أرصدة LND.  يمكن أن تفعل أشياء مماثلة لواجهات المستخدم مثل ThunderHub أو RideTheLightning.  ومع ذلك ، فإن خياراتك أوسع بكثير مع BoS ، وستحتاج إليها إذا كنت ترغب في إعداد روبوت تلغرام مع العقدة الخاصة بك (للحصول على إشعارات عند فتح / إغلاق القنوات، أو عند القيام بتوجيه المدفوعات، أو عندما تفقد العقدة اتصالها بالإنترنت،  وللحصول على نسخ احتياطية تلقائية للقنوات من أجل السلامة).

للمزيد من المعلومات ، وأوامر BoS الشائعة ، انظر:
[[Special:MyLanguage/Balance of Satoshis|Balance of Satoshis]].

[https://github.com/niteshbalusu11/BOS-Commands-Document يمكنك مراجعة هذا المستند التعليمي الممتاز لأوامر BoS] 

عملية تنصيب [[Special:MyLanguage/Umbrel - تنصيب BoS|Umbrel - Installing BoS]]. تضم ارشادات لإعداد بوت BoS على التلغرام.

== نظرة عامة على اعدادات LND ==

انقر فوق الرابط أدناه للحصول على معلومات تتعلق بإعداد محدودية حجم القناة والرسوم المحددة مسبقًا على القنوات الجديدة وإعداد أبراج المراقبة وإعدادات التحسين الأخرى.

[[Special:MyLanguage/LND Configuration Settings|اعدادات ملف الـ LND]]


== تشغيل عقدة توجيه مربحة ==

لا ترى أية مدفوعات توجّه من خلال عقدتك، أو أن ساتوشياتك تتحرك في اتجاه واحد فقط؟

هل تريد المزيد من المعلومات حول إعادة موازنة القنوات والرسوم؟  هل تريد تشغيل برنامج يقوم بضبط الرسوم تلقائيًا، أو برنامج يمنحك مؤشرات الأداء الرئيسية (KPY)؟

'' 'مرجعك الشامل للحصول على نصائح حول ربحية عقدة التوجيه:' '' [[Special: MyLanguage / تشغيل عقدة توجيه مربحة | تشغيل عقدة توجيه مربحة]]

[[Special:MyLanguage/Fees And Profitability|الطيرق المختصر لتحديد الرسوم تلقائيًا  وأتمتة مؤشرات الأداء الرئيسية]]

== مساحة اللعب والتجريب ==

انقر فوق الصورة أدناه للحصول على معلومات حول مساحة لعب بليبنيت، وهو مكان يمكنك من خلاله تعلم واستخدام شبكة البرق دون المخاطرة بأي أموال حقيقية (على الشبكة الاختبارية).

&lt;div lang="en" dir="ltr" class="mw-content-ltr"&gt;
[[File:PlebnetPlayground.jpg|450px|link=Plebnet Playground|alt=Plebnet Playground Logo]]
&lt;/div&gt;


== أسئلة وأجوبة شائعة ==

مجموعة مختارة من الأسئلة المتداولة في مجموعات [https://t.me/plebnet plebnet].
 [[Special: MyLanguage / FAQ | الأسئلة والأجوبة المتكررة]]


== المصادر ==

المصادر

= جميع الصفحات =




{{:Special:Allpages}}</text>
      <sha1>m2catt48utd2ocp40o6k9ehir8h78tf</sha1>
    </revision>
  </page>
  <page>
    <title>Main Page/en</title>
    <ns>0</ns>
    <id>223</id>
    <revision>
      <id>1918</id>
      <parentid>1809</parentid>
      <timestamp>2021-10-19T17:11:57Z</timestamp>
      <contributor>
        <username>FuzzyBot</username>
        <id>29</id>
      </contributor>
      <comment>Updating to match new version of source page</comment>
      <origin>1918</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="5327" sha1="akodngdgmwcy5xlet61hhe4xgghk4ld" xml:space="preserve">&lt;languages/&gt;
'''Welcome to the Plebnet!'''

We've outlined the main 'guide' on this page. Follow the articles here in order to gain a better understanding of the steps required to join the PlebNet, and getting your node up &amp; running. If you'd like to simply browse around, you can view all our pages [[Special:AllPages|Special:AllPages]].


== To read first ==

[[Special:MyLanguage/Welcome to Plebnet|Welcome to Plebnet]] 

'''Please read the above link before anything else!''' Contains useful introduction and tips.


== Getting Started ==

Are you brand new and perhaps don't quite understand lightning? Do you not have your own node yet? Are you not yet in the Plebnet telegram group? 

Please see the [[Special:MyLanguage/Getting started|Getting started]] page.


== Claim your node ==

For telegram, DM [https://t.me/cheeserobot @cheeserobot] and then &lt;code&gt;/claim&lt;/code&gt; your node (follow the instructions, you will need to sign a message with your node to prove you are owner of the node).

Then, in the [https://t.me/plebnet plebnet] group announce your node with &lt;code&gt;/node&lt;/code&gt;. If you see your own node, success.
Repeat in other groups which support CheeseRobot with &lt;code&gt;/node&lt;/code&gt;.

Additionally, [https://amboss.space Amboss.space] is one of the best websites for looking up nodes and their basic information. People may go to Amboss to browse your node's info. You can claim your node on Amboss which will allow you personalize your node's profile and add additional information. Use these instructions: [[Special:MyLanguage/Claim on Amboss|Claim on Amboss]]


== Opening Channels ==

The first question which a pleb has after (or even before) the node is synced "'''who should I open channel with'''"

I would say - '''with a mentor who is willing to spend time with you, teach you the ropes, mentor and guide you to be a better node runner'''

Of course in the age of google, internet, and instant gratification, this thought can be frowned upon but there is no replacement for a mentor in your journey as node runner.

For information relating to lightning channels, including methods to get inbound liquidity see: [[Special:MyLanguage/Opening channels|Opening channels]]


== Maintaining Proper Node Hygiene ==

[[Special:MyLanguage/Node Hardening|Node Hardening]]

[[Special:MyLanguage/Maintaining node hygiene|Maintaining node hygiene]]

[[Special:MyLanguage/Node Hardware|Node Hardware]]

[[Special:MyLanguage/UPS|UPS]] (Uninterrupted Power Supply)

== Backup/Recovery ==

The following link contains some important information about channel backups and recovery solutions so that you have a better idea of how to keep your funds safe.

[[Special:MyLanguage/Backup/Recovery|Backup/Recovery]]


== Let’s Get Personal ==

Your node can be customized to appear as a name (alias) rather than just a bunch of random letters and numbers. You can also set a color for your node that will show up on various lightning-related websites and programs. 

[[Special:MyLanguage/Setting a node alias|Setting a node alias]]


== Upgrades ==

[[Special:MyLanguage/Upgrading Umbrel Node|Upgrading Umbrel Node]]


== Balance of Satoshis ==

Balance of Satoshis, or BoS, is a set of commands for working with LND balances. It can do similar things as interfaces like ThunderHub or RideTheLightning. However, your options are much wider with BoS, and you will need it if you want to set up a telegram bot with your node (to get notifications whenever channels are opened/closed, whenever you forward a payment, whenever your node goes offline, and to get automatic channel backups for safety).

For more information, and common BoS commands see: [[Special:MyLanguage/Balance of Satoshis|Balance of Satoshis]].

[https://github.com/niteshbalusu11/BOS-Commands-Document See this excellent documentation for bos commands] 

Installation: process for [[Special:MyLanguage/Umbrel - Installing BoS|Umbrel - Installing BoS]]. Includes instructions for setting up BoS telegram bot.

== LND Configuration Settings Overview ==

Click the link below for information related to setting up channel size limits, predefined fees on new channels, setting up watchtowers, and other optimization settings.

[[Special:MyLanguage/LND Configuration Settings|LND Configuration Settings]]


== Running A Profitable Routing Node ==

Not seeing routing through your node, or your sats are only moving in one direction?

Want more information about rebalancing and fees? Want to run a program that auto-adjusts your fees, or one that gives you KPIs (Key Performance Indicators)?

'''Your one stop shop for tips on routing node profitability:''' [[Special:MyLanguage/Running A Profitable Routing Node|Running A Profitable Routing Node]]

[[Special:MyLanguage/Fees And Profitability|Shortcut to auto-fee and auto-KPI instructions]]

== Playground / Sandbox ==

Click the image below to get information on Plebnet Playground, a place where you can learn and use the lightning network without risking any real money (signet).

[[File:PlebnetPlayground.jpg|450px|link=Plebnet Playground|alt=Plebnet Playground Logo]]


== FAQ ==

A selection of questions frequently asked in [https://t.me/plebnet plebnet] groups.
[[Special:MyLanguage/FAQ|FAQ]]


== Resources ==

[[Special:MyLanguage/Resources|Resources]]

= All Pages =




{{:Special:Allpages}}</text>
      <sha1>akodngdgmwcy5xlet61hhe4xgghk4ld</sha1>
    </revision>
  </page>
  <page>
    <title>Main Page/es</title>
    <ns>0</ns>
    <id>230</id>
    <revision>
      <id>1936</id>
      <parentid>1934</parentid>
      <timestamp>2021-10-19T17:16:13Z</timestamp>
      <contributor>
        <username>ADssx</username>
        <id>38</id>
      </contributor>
      <origin>1936</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="6072" sha1="izcz3b8t2gsljpv32c1o0jo62o06mui" xml:space="preserve">&lt;languages/&gt;
'''¡Bienvenido a la Plebnet!'''

En esta página hemos esbozado la "guía" principal. Sigue los artículos de esta página para entender mejor los pasos necesarios para unirte a la PlebNet y poner tu nodo en marcha. Si quieres simplemente navegar, puedes ver todas nuestras páginas [[Special:AllPages|Special:AllPages]].


==¡Bienvenido a la Plebnet!==

[[Special:MyLanguage/Welcome to Plebnet/es|¡Bienvenido a la Plebnet!]] 

'''¡Por favor, lea el link anterior antes de nada!''' Contiene una introducción y consejos útiles.


== Cómo empezar ==

¿Eres nuevo y quizás no entiendes del todo la lightning network? ¿Aún no tienes tu propio nodo? ¿Aún no estás en el grupo de Telegram de Plebnet Español? 

Por favor, consulte la página [[Special:MyLanguage/Getting started|Getting started]].


== Reclame su nodo ==

En Telegram, envía una DM a [https://t.me/cheeserobot @cheeserobot]  y  escriba /claim (siga las instrucciones, tendrás que firmar una msg con su nodo para probar que eres dueño del nodo)

Después, va para el grupo de [https://t.me/joinchat/gRjA-KDuSYo1OGRh Plebnet Español] y anuncie su nodo con &lt;code&gt;/node&lt;/code&gt;. Si ves tu proprio nodo, éxito! Repite el proceso en otros grupos que suporten CheeseRobot con &lt;code&gt;/node&lt;/code&gt;.

Mismo que no hables inglés, anuncie su nodo también en el [https://t.me/plebnet grupo original].

Además, [https://amboss.space Amboss.space] es uno de los mejores sitios web para buscar nodos y su información básica. La gente puede ir a Amboss para buscar la información de tu nodo. Puedes reclamar tu nodo en Amboss, lo que te permitirá personalizar el perfil de tu nodo y añadir información adicional. Utiliza estas instrucciones: [[Special:MyLanguage/Claim on Amboss|Claim on Amboss]]


== Apertura de canales ==

La primera pregunta que se hace un plebeyo después (o incluso antes) de sincronizar el nodo '''con quién debo abrir canales'''

Yo diría - '''con un mentor que esté dispuesto a pasar tiempo contigo, a enseñarte los trucos, a orientarte y a guiarte para que seas un mejor operador de nodos'''

Por supuesto, en la era de Google, Internet y la gratificación instantánea, este pensamiento puede ser mal visto, pero no hay reemplazo para un mentor en su viaje como node runner.

Para obtener información relativa a canales de lightning, incluidos los métodos para obtener inbound liquidity, consulte: [[Special:MyLanguage/Opening channels|Opening channels]]


== Mantener una higiene adecuada de los nodos ==

[[Special:MyLanguage/Fortalecimiento del nodo|Fortalecimiento del nodo]]

[[Special:MyLanguage/Mantener la higiene del nodo|Mantener la higiene del nodo]]

[[Special:MyLanguage/Hardware del nodo|Hardware del nodo]]

[[Special:MyLanguage/UPS|UPS]] (Suministro eléctrico ininterrumpido)

== Backup/recuperación ==

El siguiente link contiene información importante sobre los backups de los canales y las soluciones de recuperación para que tenga una mejor idea de cómo mantener sus fondos a salvo.

[[Special:MyLanguage/Backup/Recovery|Backup/Recovery]]


== Let’s Get Personal ==

Su nodo puede personalizarse para que aparezca como un nombre (alias) en lugar de un montón de letras y números al azar. También puede establecer un color para su nodo que se mostrará en varios sitios web y programas relacionados con lightning. 

[[Special:MyLanguage/Establecer un alias al nodo|Establecer un alias al nodo]]


== Actualizaciones ==

[[Special:MyLanguage/Actualizar el nodo Umbrel|Actualizar el nodo Umbrel]]


== Balance de Satoshis ==

Balance of Satoshis, o BoS, es todo un conjunto de comandos para trabajar con los balances de LND. Puede hacer cosas similares a las de interfaces como ThunderHub o RideTheLightning. Sin embargo, tus opciones son mucho más amplias con BoS, y lo necesitarás si quieres configurar un bot de telegram con tu nodo (para obtener notificaciones cada vez que se abran/cierren canales, cada vez que reenvíes un pago, cada vez que tu nodo se desconecte, y para obtener copias de seguridad automáticas del canal por seguridad).

Para más información, y los comandos más comunes del BoS ver:

&lt;div lang="en" dir="ltr" class="mw-content-ltr"&gt;
[https://github.com/niteshbalusu11/BOS-Commands-Document See this excellent documentation for bos commands]
&lt;/div&gt; 

Instalación: proceso para [[Special:MyLanguage/Umbrel - Installing BoS|Umbrel - Installing BoS]]. Incluye instrucciones para configurar el bot de Telegram de BoS.

== Resumen de los ajustes de configuración de LND ==

Haga clic en el siguiente enlace para obtener información relacionada con la configuración de los límites de tamaño de los canales, las fees predefinidas en los nuevos canales, la configuración de los watchtowers y otros ajustes de optimización.

[[Special:MyLanguage/LND Configuration Settings|LND Configuration Settings]]


== Operando un nodo de enrutamiento rentable ==

¿No ves el enrutamiento a través de tu nodo, o tus sats sólo se mueven en una dirección?

¿Desea más información sobre el rebalancing y las fees? ¿Desea ejecutar un programa que ajuste automáticamente sus fees, o uno que le proporcione KPIs (indicadores clave de desempeño)?

'''Su tienda de confianza para tips sobre la rentabilidad de los nodos de enrutamiento:''' [[Special:MyLanguage/Cómo hacer funcionar un nodo de enrutamiento rentable|Cómo hacer funcionar un nodo de enrutamiento rentable]]

[https://plebnet.wiki/wiki/Fees_And_Profitability Shortcut] a las instrucciones de autofacturación y auto KPI

== Playground / Sandbox ==

Haz clic en la imagen de abajo para obtener información sobre Plebnet Playground, un lugar donde puedes aprender y utilizar la red lightning sin arriesgar dinero real (signet).

[[File:PlebnetPlayground.jpg|450px|link=Plebnet Playground|alt=Plebnet Playground Logo]]


== FAQ ==

Una selección de preguntas frecuentes en [https://t.me/plebnet plebnet] groups.
[[Special:MyLanguage/FAQ|FAQ]]


== Resources ==

[[Special:MyLanguage/Resources|Recursos]]

= All Pages =




{{:Special:Allpages}}</text>
      <sha1>izcz3b8t2gsljpv32c1o0jo62o06mui</sha1>
    </revision>
  </page>
  <page>
    <title>Main Page/fr</title>
    <ns>0</ns>
    <id>959</id>
    <revision>
      <id>1912</id>
      <parentid>1815</parentid>
      <timestamp>2021-10-19T17:09:24Z</timestamp>
      <contributor>
        <username>ADssx</username>
        <id>38</id>
      </contributor>
      <origin>1912</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="6006" sha1="aoxlgkeyezp9au8niwj7o06wwsi549j" xml:space="preserve">&lt;languages/&gt;
'''Bienvenue sur PlebNet !'''

Vous trouverez sur cette page le "guide" principal. Suivez ces articles afin de mieux comprends les étapes requises pour rejoindre PlebNet avec un nœud (node) opérationnel.

Vous pouvez trouver toutes les pages [[Special:AllPages|ici]] (dont les pages en anglais).


== À lire avant toute chose ==

[[Special:MyLanguage/Welcome to Plebnet|Bienvenue sur PlebNet]] 

'''Lisez le lien ci-dessus avant de commencer'''

Il contient une introduction et des astuces utiles.


== Comment commencer ==

Vous êtes nouveau et ne comprenez pas Lightning ? Vous n'avez pas encore votre propre nœud ? Vous n'êtes pas encore sur le groupe Telegram PlebNet ? 

Lisez la page [[Special:MyLanguage/Getting started|Commencer]] (en anglais).


== Revendiquer votre nœud ==

Sur Telegram, envoyez un message privé (DM) à  [https://t.me/cheeserobot @cheeserobot]. Ensuite utilisez la commande &lt;code&gt;/claim&lt;/code&gt; suivie de l'URI de votre nœud. Suivez les instructions fournies par cheeserobot. Vous aurez notamment besoin de signer un message à l'aide de votre nœud pour prouver que vous en êtes le propriétaire.

Ensuite, sur le [https://t.me/plebnet groupe Telegram PlebNet], annoncez votre nœud avec &lt;code&gt;/node&lt;/code&gt;. Si vous voyez votre nœud : bravo, vous avez réussi !

Répétez la procédure dans les autres groupes qui supportent CheeseRobot.

Par ailleurs, [https://amboss.space Amboss.space] est un des meilleurs sites pour chercher des nœuds et obtenir leurs données de base. N'importe quel utilisateur peut chercher les informations de votre nœud sur Amboss. Vous pouvez déclarer votre nœud sur Amboss et ainsi personnaliser votre profil et y ajouter des informations. Pour cela suivez les instructions suivantes : [[Special:MyLanguage/Claim on Amboss|Déclarer sur Amboss]] (en anglais).


== Ouvrir des canaux (channels) ==

La première question de tout plébéien après la synchronisation de son nœud : « Avec qui devrais-je ouvrir un canal ? »

Réponse : '''Avec un mentor qui est disposé à passer du temps à vous aider, vous apprendre les bases, vous former et vous guider pour devenir un meilleur gestionnaire de nœud.'''

Évidemment, à l'heure de Google, d'internet et de la gratification immédiate, cela peut être mal vu mais rien ne pourra remplacer un bon mentor dans votre parcours pour devenir un gestionnaire de nœud.

Pour plus d'information sur les canaux Lightning, notamment les méthodes pour obtenir de la liquidité entrante, lisez [[Special:MyLanguage/Opening channels|Ouvrir des canaux]]


== Maintenir un nœud ==

[[Special:MyLanguage/Node Hardening|Renforcement de nœud]]

[[Special:MyLanguage/Maintaining node hygiene|Maintenir un nœud]]

[[Special:MyLanguage/Node Hardware|Matériel pour nœud]]

[[Special:MyLanguage/UPS|ASI]] (Alimentation sans interruption, en anglais : Uninterrupted Power Supply, UPS)

== Sauvegarde et récupération ==

Le lien suivant contient des informations importantes à propos des sauvegardes de canaux et des solutions de récupération afin que vous sachiez sécuriser vos fonds.

[[Special:MyLanguage/Backup/Recovery|Sauvegarde et récupération]]


== Personnalisation ==

Vous pouvez personnaliser votre nœud et lui donner un nom (alias), au lieu d'une suite aléatoire de lettres et de chiffres. Vous pouvez aussi déterminer la couleur de votre nœud qui sera ensuite affichée sur les différents logiciels et sites internet de gestion Lightning. 

[[Special:MyLanguage/Setting a node alias|Choisir un alias pour votre nœud]]


== Mises à jour ==

[[Special:MyLanguage/Upgrading Umbrel Node|Mettre à jour un nœud Umbrel]]


== Balance of Satoshis ==

''Balance of Satoshis'' (BoS) est un ensemble de commandes pour travailler avec les soldes LND. BoS est similaire à ThunderHub ou RideTheLightning. Néanmoins, BoS offre davantage d'options et vous aurez besoin de BoS si vous voulez mettre en place un bot Telegram avec votre nœud. Un tel bot peut servir à obtenir des sauvegardes automatiques de votre nœud ou encore à recevoir des notifications quand vos canaux sont ouverts ou fermés, quand vous transmettez un paiement, quand votre nœud est hors ligne.

Pour plus d'information sur BoS, consultez : [[Special:MyLanguage/Balance of Satoshis|Balance of Satoshis]].

[https://github.com/niteshbalusu11/BOS-Commands-Document Excellente documentation des commandes BOS] 

Instruction pour installer un bot Telegram BoS : [[Special:MyLanguage/Umbrel - Installing BoS|Umbrel - Installer BoS]]

== Aperçu des paramètres de configuration de LND ==

Cliquez sur le lien ci-dessous pour savoir notamment comment limiter la taille des canaux, fixer les commissions (fees) sur les nouveaux canaux, mettre en place des tours de guet (watchtower).

[[Special:MyLanguage/LND Configuration Settings|Paramètres de configurations de LND]]


== Faire tourner un nœud en étant profitable ==

Aucune transaction transférée par votre nœud ? Vos sats ne bougent que dans une direction ?

Vous voulez savoir comment rebalancer et gérer les commissions (fees) ? Vous voulez un logiciel qui ajuste automatiquement les commissions ou vous donne les indicateurs clé de performance (Key Performance Indicators, KPI) de votre nœud ?

'''Tout sur la profitabilité des nœuds sur :''' [[Special:MyLanguage/Running A Profitable Routing Node|Avoir un nœud profitable]]

[[Special:MyLanguage/Fees And Profitability|Instructions pour auto-fee et auto-KPI]]

== Bac à sable (Sandbox) ==

Sur [[Special:MyLanguage/Plebnet Playground|PlebNet Playground]], vous pouvez apprendre à utiliser Lightning sans aucun risque (signet).

[[File:PlebnetPlayground.jpg|450px|link=Plebnet Playground|alt=Logo Plebnet Playground]]


== FÀQ ==

Foire aux questions les plus fréquentes sur les groupes Telegram [https://t.me/plebnet PlebNet]: [[Special:MyLanguage/FAQ|FÀQ]]


== Ressources ==

[[Special:MyLanguage/Resources|Ressources]]

= Toutes les pages =




{{:Special:Allpages}}</text>
      <sha1>aoxlgkeyezp9au8niwj7o06wwsi549j</sha1>
    </revision>
  </page>
  <page>
    <title>Main Page/ha</title>
    <ns>0</ns>
    <id>1019</id>
    <revision>
      <id>1925</id>
      <parentid>1906</parentid>
      <timestamp>2021-10-19T17:14:06Z</timestamp>
      <contributor>
        <username>ADssx</username>
        <id>38</id>
      </contributor>
      <comment>Created page with "'''Barka da zuwa Plebnet ta Hausa!'''"</comment>
      <origin>1925</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="8135" sha1="nlxt63pekidwbe4h717jcvtvwgkahby" xml:space="preserve">&lt;languages/&gt;
'''Barka da zuwa Plebnet ta Hausa!'''

&lt;div lang="en" dir="ltr" class="mw-content-ltr"&gt;
We've outlined the main 'guide' on this page. Follow the articles here in order to gain a better understanding of the steps required to join the PlebNet, and getting your node up &amp; running. If you'd like to simply browse around, you can view all our pages [[Special:AllPages|Special:AllPages]].
&lt;/div&gt;


&lt;div lang="en" dir="ltr" class="mw-content-ltr"&gt;
== To read first ==
&lt;/div&gt;

&lt;div lang="en" dir="ltr" class="mw-content-ltr"&gt;
[[Special:MyLanguage/Welcome to Plebnet|Welcome to Plebnet]]
&lt;/div&gt; 

&lt;div lang="en" dir="ltr" class="mw-content-ltr"&gt;
'''Please read the above link before anything else!''' Contains useful introduction and tips.
&lt;/div&gt;


&lt;div lang="en" dir="ltr" class="mw-content-ltr"&gt;
== Getting Started ==
&lt;/div&gt;

&lt;div lang="en" dir="ltr" class="mw-content-ltr"&gt;
Are you brand new and perhaps don't quite understand lightning? Do you not have your own node yet? Are you not yet in the Plebnet telegram group?
&lt;/div&gt; 

&lt;div lang="en" dir="ltr" class="mw-content-ltr"&gt;
Please see the [[Special:MyLanguage/Getting started|Getting started]] page.
&lt;/div&gt;


&lt;div lang="en" dir="ltr" class="mw-content-ltr"&gt;
== Claim your node ==
&lt;/div&gt;

&lt;div lang="en" dir="ltr" class="mw-content-ltr"&gt;
For telegram, DM [https://t.me/cheeserobot @cheeserobot] and then &lt;code&gt;/claim&lt;/code&gt; your node (follow the instructions, you will need to sign a message with your node to prove you are owner of the node).
&lt;/div&gt;

&lt;div lang="en" dir="ltr" class="mw-content-ltr"&gt;
Then, in the [https://t.me/plebnet plebnet] group announce your node with &lt;code&gt;/node&lt;/code&gt;. If you see your own node, success.
Repeat in other groups which support CheeseRobot with &lt;code&gt;/node&lt;/code&gt;.
&lt;/div&gt;

&lt;div lang="en" dir="ltr" class="mw-content-ltr"&gt;
Additionally, [https://amboss.space Amboss.space] is one of the best websites for looking up nodes and their basic information. People may go to Amboss to browse your node's info. You can claim your node on Amboss which will allow you personalize your node's profile and add additional information. Use these instructions: [[Special:MyLanguage/Claim on Amboss|Claim on Amboss]]
&lt;/div&gt;


&lt;div lang="en" dir="ltr" class="mw-content-ltr"&gt;
== Opening Channels ==
&lt;/div&gt;

&lt;div lang="en" dir="ltr" class="mw-content-ltr"&gt;
The first question which a pleb has after (or even before) the node is synced "'''who should I open channel with'''"
&lt;/div&gt;

&lt;div lang="en" dir="ltr" class="mw-content-ltr"&gt;
I would say - '''with a mentor who is willing to spend time with you, teach you the ropes, mentor and guide you to be a better node runner'''
&lt;/div&gt;

&lt;div lang="en" dir="ltr" class="mw-content-ltr"&gt;
Of course in the age of google, internet, and instant gratification, this thought can be frowned upon but there is no replacement for a mentor in your journey as node runner.
&lt;/div&gt;

&lt;div lang="en" dir="ltr" class="mw-content-ltr"&gt;
For information relating to lightning channels, including methods to get inbound liquidity see: [[Special:MyLanguage/Opening channels|Opening channels]]
&lt;/div&gt;


&lt;div lang="en" dir="ltr" class="mw-content-ltr"&gt;
== Maintaining Proper Node Hygiene ==
&lt;/div&gt;

&lt;div lang="en" dir="ltr" class="mw-content-ltr"&gt;
[[Special:MyLanguage/Node Hardening|Node Hardening]]
&lt;/div&gt;

&lt;div lang="en" dir="ltr" class="mw-content-ltr"&gt;
[[Special:MyLanguage/Maintaining node hygiene|Maintaining node hygiene]]
&lt;/div&gt;

&lt;div lang="en" dir="ltr" class="mw-content-ltr"&gt;
[[Special:MyLanguage/Node Hardware|Node Hardware]]
&lt;/div&gt;

&lt;div lang="en" dir="ltr" class="mw-content-ltr"&gt;
[[Special:MyLanguage/UPS|UPS]] (Uninterrupted Power Supply)
&lt;/div&gt;

&lt;div lang="en" dir="ltr" class="mw-content-ltr"&gt;
== Backup/Recovery ==
&lt;/div&gt;

&lt;div lang="en" dir="ltr" class="mw-content-ltr"&gt;
The following link contains some important information about channel backups and recovery solutions so that you have a better idea of how to keep your funds safe.
&lt;/div&gt;

&lt;div lang="en" dir="ltr" class="mw-content-ltr"&gt;
[[Special:MyLanguage/Backup/Recovery|Backup/Recovery]]
&lt;/div&gt;


&lt;div lang="en" dir="ltr" class="mw-content-ltr"&gt;
== Let’s Get Personal ==
&lt;/div&gt;

&lt;div lang="en" dir="ltr" class="mw-content-ltr"&gt;
Your node can be customized to appear as a name (alias) rather than just a bunch of random letters and numbers. You can also set a color for your node that will show up on various lightning-related websites and programs.
&lt;/div&gt; 

&lt;div lang="en" dir="ltr" class="mw-content-ltr"&gt;
[[Special:MyLanguage/Setting a node alias|Setting a node alias]]
&lt;/div&gt;


&lt;div lang="en" dir="ltr" class="mw-content-ltr"&gt;
== Upgrades ==
&lt;/div&gt;

&lt;div lang="en" dir="ltr" class="mw-content-ltr"&gt;
[[Special:MyLanguage/Upgrading Umbrel Node|Upgrading Umbrel Node]]
&lt;/div&gt;


&lt;div lang="en" dir="ltr" class="mw-content-ltr"&gt;
== Balance of Satoshis ==
&lt;/div&gt;

&lt;div lang="en" dir="ltr" class="mw-content-ltr"&gt;
Balance of Satoshis, or BoS, is a set of commands for working with LND balances. It can do similar things as interfaces like ThunderHub or RideTheLightning. However, your options are much wider with BoS, and you will need it if you want to set up a telegram bot with your node (to get notifications whenever channels are opened/closed, whenever you forward a payment, whenever your node goes offline, and to get automatic channel backups for safety).
&lt;/div&gt;

&lt;div lang="en" dir="ltr" class="mw-content-ltr"&gt;
For more information, and common BoS commands see: [[Special:MyLanguage/Balance of Satoshis|Balance of Satoshis]].
&lt;/div&gt;

&lt;div lang="en" dir="ltr" class="mw-content-ltr"&gt;
[https://github.com/niteshbalusu11/BOS-Commands-Document See this excellent documentation for bos commands]
&lt;/div&gt; 

&lt;div lang="en" dir="ltr" class="mw-content-ltr"&gt;
Installation: process for [[Special:MyLanguage/Umbrel - Installing BoS|Umbrel - Installing BoS]]. Includes instructions for setting up BoS telegram bot.
&lt;/div&gt;

&lt;div lang="en" dir="ltr" class="mw-content-ltr"&gt;
== LND Configuration Settings Overview ==
&lt;/div&gt;

&lt;div lang="en" dir="ltr" class="mw-content-ltr"&gt;
Click the link below for information related to setting up channel size limits, predefined fees on new channels, setting up watchtowers, and other optimization settings.
&lt;/div&gt;

&lt;div lang="en" dir="ltr" class="mw-content-ltr"&gt;
[[Special:MyLanguage/LND Configuration Settings|LND Configuration Settings]]
&lt;/div&gt;


&lt;div lang="en" dir="ltr" class="mw-content-ltr"&gt;
== Running A Profitable Routing Node ==
&lt;/div&gt;

&lt;div lang="en" dir="ltr" class="mw-content-ltr"&gt;
Not seeing routing through your node, or your sats are only moving in one direction?
&lt;/div&gt;

&lt;div lang="en" dir="ltr" class="mw-content-ltr"&gt;
Want more information about rebalancing and fees? Want to run a program that auto-adjusts your fees, or one that gives you KPIs (Key Performance Indicators)?
&lt;/div&gt;

&lt;div lang="en" dir="ltr" class="mw-content-ltr"&gt;
'''Your one stop shop for tips on routing node profitability:''' [[Special:MyLanguage/Running A Profitable Routing Node|Running A Profitable Routing Node]]
&lt;/div&gt;

&lt;div lang="en" dir="ltr" class="mw-content-ltr"&gt;
[[Special:MyLanguage/Fees And Profitability|Shortcut to auto-fee and auto-KPI instructions]]
&lt;/div&gt;

&lt;div lang="en" dir="ltr" class="mw-content-ltr"&gt;
== Playground / Sandbox ==
&lt;/div&gt;

&lt;div lang="en" dir="ltr" class="mw-content-ltr"&gt;
Click the image below to get information on Plebnet Playground, a place where you can learn and use the lightning network without risking any real money (signet).
&lt;/div&gt;

&lt;div lang="en" dir="ltr" class="mw-content-ltr"&gt;
[[File:PlebnetPlayground.jpg|450px|link=Plebnet Playground|alt=Plebnet Playground Logo]]
&lt;/div&gt;


&lt;div lang="en" dir="ltr" class="mw-content-ltr"&gt;
== FAQ ==
&lt;/div&gt;

&lt;div lang="en" dir="ltr" class="mw-content-ltr"&gt;
A selection of questions frequently asked in [https://t.me/plebnet plebnet] groups.
[[Special:MyLanguage/FAQ|FAQ]]
&lt;/div&gt;


&lt;div lang="en" dir="ltr" class="mw-content-ltr"&gt;
== Resources ==
&lt;/div&gt;

&lt;div lang="en" dir="ltr" class="mw-content-ltr"&gt;
[[Special:MyLanguage/Resources|Resources]]
&lt;/div&gt;

&lt;div lang="en" dir="ltr" class="mw-content-ltr"&gt;
= All Pages =
&lt;/div&gt;




{{:Special:Allpages}}</text>
      <sha1>nlxt63pekidwbe4h717jcvtvwgkahby</sha1>
    </revision>
  </page>
  <page>
    <title>Main Page/hi</title>
    <ns>0</ns>
    <id>1091</id>
    <revision>
      <id>1923</id>
      <parentid>1921</parentid>
      <timestamp>2021-10-19T17:13:22Z</timestamp>
      <contributor>
        <username>ADssx</username>
        <id>38</id>
      </contributor>
      <comment>Replaced content with "'''PlebNet में आपका स्वागत है।'''"</comment>
      <origin>1923</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="8392" sha1="6oeub22o6cgty8bia6k2zlbj8rlstd7" xml:space="preserve">&lt;languages/&gt;
'''PlebNet में आपका स्वागत है।'''

इस प्रष्ठ पर हमने आपके लिए मुख्य दिशा निर्देश दिखाए हैं। कृपया लेखों को एक के बाद एक पढ़ें और समझें। plebnet से जुड़ने के कदम दिए गए हैं, साथ ही साथ अपना node शुरू करने के एवं चलाने के। ऊपरी दृष्टि से देखने के लिए आप हमारे सभी पृष्ट देख सकते हैं।


== Plebnet में आपका स्वागत है ==

[[Special:MyLanguage/Welcome to Plebnet|Plebnet में आपका स्वागत है]] 

&lt;div lang="en" dir="ltr" class="mw-content-ltr"&gt;
'''Please read the above link before anything else!''' Contains useful introduction and tips.
&lt;/div&gt;


&lt;div lang="en" dir="ltr" class="mw-content-ltr"&gt;
== Getting Started ==
&lt;/div&gt;

&lt;div lang="en" dir="ltr" class="mw-content-ltr"&gt;
Are you brand new and perhaps don't quite understand lightning? Do you not have your own node yet? Are you not yet in the Plebnet telegram group?
&lt;/div&gt; 

&lt;div lang="en" dir="ltr" class="mw-content-ltr"&gt;
Please see the [[Special:MyLanguage/Getting started|Getting started]] page.
&lt;/div&gt;


&lt;div lang="en" dir="ltr" class="mw-content-ltr"&gt;
== Claim your node ==
&lt;/div&gt;

&lt;div lang="en" dir="ltr" class="mw-content-ltr"&gt;
For telegram, DM [https://t.me/cheeserobot @cheeserobot] and then &lt;code&gt;/claim&lt;/code&gt; your node (follow the instructions, you will need to sign a message with your node to prove you are owner of the node).
&lt;/div&gt;

&lt;div lang="en" dir="ltr" class="mw-content-ltr"&gt;
Then, in the [https://t.me/plebnet plebnet] group announce your node with &lt;code&gt;/node&lt;/code&gt;. If you see your own node, success.
Repeat in other groups which support CheeseRobot with &lt;code&gt;/node&lt;/code&gt;.
&lt;/div&gt;

&lt;div lang="en" dir="ltr" class="mw-content-ltr"&gt;
Additionally, [https://amboss.space Amboss.space] is one of the best websites for looking up nodes and their basic information. People may go to Amboss to browse your node's info. You can claim your node on Amboss which will allow you personalize your node's profile and add additional information. Use these instructions: [[Special:MyLanguage/Claim on Amboss|Claim on Amboss]]
&lt;/div&gt;


&lt;div lang="en" dir="ltr" class="mw-content-ltr"&gt;
== Opening Channels ==
&lt;/div&gt;

&lt;div lang="en" dir="ltr" class="mw-content-ltr"&gt;
The first question which a pleb has after (or even before) the node is synced "'''who should I open channel with'''"
&lt;/div&gt;

&lt;div lang="en" dir="ltr" class="mw-content-ltr"&gt;
I would say - '''with a mentor who is willing to spend time with you, teach you the ropes, mentor and guide you to be a better node runner'''
&lt;/div&gt;

&lt;div lang="en" dir="ltr" class="mw-content-ltr"&gt;
Of course in the age of google, internet, and instant gratification, this thought can be frowned upon but there is no replacement for a mentor in your journey as node runner.
&lt;/div&gt;

&lt;div lang="en" dir="ltr" class="mw-content-ltr"&gt;
For information relating to lightning channels, including methods to get inbound liquidity see: [[Special:MyLanguage/Opening channels|Opening channels]]
&lt;/div&gt;


&lt;div lang="en" dir="ltr" class="mw-content-ltr"&gt;
== Maintaining Proper Node Hygiene ==
&lt;/div&gt;

&lt;div lang="en" dir="ltr" class="mw-content-ltr"&gt;
[[Special:MyLanguage/Node Hardening|Node Hardening]]
&lt;/div&gt;

&lt;div lang="en" dir="ltr" class="mw-content-ltr"&gt;
[[Special:MyLanguage/Maintaining node hygiene|Maintaining node hygiene]]
&lt;/div&gt;

&lt;div lang="en" dir="ltr" class="mw-content-ltr"&gt;
[[Special:MyLanguage/Node Hardware|Node Hardware]]
&lt;/div&gt;

&lt;div lang="en" dir="ltr" class="mw-content-ltr"&gt;
[[Special:MyLanguage/UPS|UPS]] (Uninterrupted Power Supply)
&lt;/div&gt;

&lt;div lang="en" dir="ltr" class="mw-content-ltr"&gt;
== Backup/Recovery ==
&lt;/div&gt;

&lt;div lang="en" dir="ltr" class="mw-content-ltr"&gt;
The following link contains some important information about channel backups and recovery solutions so that you have a better idea of how to keep your funds safe.
&lt;/div&gt;

&lt;div lang="en" dir="ltr" class="mw-content-ltr"&gt;
[[Special:MyLanguage/Backup/Recovery|Backup/Recovery]]
&lt;/div&gt;


&lt;div lang="en" dir="ltr" class="mw-content-ltr"&gt;
== Let’s Get Personal ==
&lt;/div&gt;

&lt;div lang="en" dir="ltr" class="mw-content-ltr"&gt;
Your node can be customized to appear as a name (alias) rather than just a bunch of random letters and numbers. You can also set a color for your node that will show up on various lightning-related websites and programs.
&lt;/div&gt; 

&lt;div lang="en" dir="ltr" class="mw-content-ltr"&gt;
[[Special:MyLanguage/Setting a node alias|Setting a node alias]]
&lt;/div&gt;


&lt;div lang="en" dir="ltr" class="mw-content-ltr"&gt;
== Upgrades ==
&lt;/div&gt;

&lt;div lang="en" dir="ltr" class="mw-content-ltr"&gt;
[[Special:MyLanguage/Upgrading Umbrel Node|Upgrading Umbrel Node]]
&lt;/div&gt;


&lt;div lang="en" dir="ltr" class="mw-content-ltr"&gt;
== Balance of Satoshis ==
&lt;/div&gt;

&lt;div lang="en" dir="ltr" class="mw-content-ltr"&gt;
Balance of Satoshis, or BoS, is a set of commands for working with LND balances. It can do similar things as interfaces like ThunderHub or RideTheLightning. However, your options are much wider with BoS, and you will need it if you want to set up a telegram bot with your node (to get notifications whenever channels are opened/closed, whenever you forward a payment, whenever your node goes offline, and to get automatic channel backups for safety).
&lt;/div&gt;

&lt;div lang="en" dir="ltr" class="mw-content-ltr"&gt;
For more information, and common BoS commands see: [[Special:MyLanguage/Balance of Satoshis|Balance of Satoshis]].
&lt;/div&gt;

&lt;div lang="en" dir="ltr" class="mw-content-ltr"&gt;
[https://github.com/niteshbalusu11/BOS-Commands-Document See this excellent documentation for bos commands]
&lt;/div&gt; 

&lt;div lang="en" dir="ltr" class="mw-content-ltr"&gt;
Installation: process for [[Special:MyLanguage/Umbrel - Installing BoS|Umbrel - Installing BoS]]. Includes instructions for setting up BoS telegram bot.
&lt;/div&gt;

&lt;div lang="en" dir="ltr" class="mw-content-ltr"&gt;
== LND Configuration Settings Overview ==
&lt;/div&gt;

&lt;div lang="en" dir="ltr" class="mw-content-ltr"&gt;
Click the link below for information related to setting up channel size limits, predefined fees on new channels, setting up watchtowers, and other optimization settings.
&lt;/div&gt;

&lt;div lang="en" dir="ltr" class="mw-content-ltr"&gt;
[[Special:MyLanguage/LND Configuration Settings|LND Configuration Settings]]
&lt;/div&gt;


&lt;div lang="en" dir="ltr" class="mw-content-ltr"&gt;
== Running A Profitable Routing Node ==
&lt;/div&gt;

&lt;div lang="en" dir="ltr" class="mw-content-ltr"&gt;
Not seeing routing through your node, or your sats are only moving in one direction?
&lt;/div&gt;

&lt;div lang="en" dir="ltr" class="mw-content-ltr"&gt;
Want more information about rebalancing and fees? Want to run a program that auto-adjusts your fees, or one that gives you KPIs (Key Performance Indicators)?
&lt;/div&gt;

&lt;div lang="en" dir="ltr" class="mw-content-ltr"&gt;
'''Your one stop shop for tips on routing node profitability:''' [[Special:MyLanguage/Running A Profitable Routing Node|Running A Profitable Routing Node]]
&lt;/div&gt;

&lt;div lang="en" dir="ltr" class="mw-content-ltr"&gt;
[[Special:MyLanguage/Fees And Profitability|Shortcut to auto-fee and auto-KPI instructions]]
&lt;/div&gt;

&lt;div lang="en" dir="ltr" class="mw-content-ltr"&gt;
== Playground / Sandbox ==
&lt;/div&gt;

&lt;div lang="en" dir="ltr" class="mw-content-ltr"&gt;
Click the image below to get information on Plebnet Playground, a place where you can learn and use the lightning network without risking any real money (signet).
&lt;/div&gt;

&lt;div lang="en" dir="ltr" class="mw-content-ltr"&gt;
[[File:PlebnetPlayground.jpg|450px|link=Plebnet Playground|alt=Plebnet Playground Logo]]
&lt;/div&gt;


&lt;div lang="en" dir="ltr" class="mw-content-ltr"&gt;
== FAQ ==
&lt;/div&gt;

&lt;div lang="en" dir="ltr" class="mw-content-ltr"&gt;
A selection of questions frequently asked in [https://t.me/plebnet plebnet] groups.
[[Special:MyLanguage/FAQ|FAQ]]
&lt;/div&gt;


&lt;div lang="en" dir="ltr" class="mw-content-ltr"&gt;
== Resources ==
&lt;/div&gt;

&lt;div lang="en" dir="ltr" class="mw-content-ltr"&gt;
[[Special:MyLanguage/Resources|Resources]]
&lt;/div&gt;

&lt;div lang="en" dir="ltr" class="mw-content-ltr"&gt;
= All Pages =
&lt;/div&gt;




{{:Special:Allpages}}</text>
      <sha1>6oeub22o6cgty8bia6k2zlbj8rlstd7</sha1>
    </revision>
  </page>
  <page>
    <title>Main Page/tr</title>
    <ns>0</ns>
    <id>1026</id>
    <revision>
      <id>1916</id>
      <parentid>1900</parentid>
      <timestamp>2021-10-19T17:09:49Z</timestamp>
      <contributor>
        <username>ADssx</username>
        <id>38</id>
      </contributor>
      <origin>1916</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="3678" sha1="jmw1qgkj32lwtilzhiricedblt1d9ww" xml:space="preserve">&lt;languages/&gt;
'''PlebNet'e hoş geldiniz!'''

PlebNet'e nasıl katılacağınızı anlamak için bu makaleleri takip edin. Tüm sayfalar: [[Special:AllPages|Special:AllPages]].


== PlebNet'e hoş geldiniz! ==

[[Special:MyLanguage/Welcome to Plebnet|PlebNet'e hoş geldiniz!]] 

'''Lütfen ilk olarak bu linki okuyun!'''


== Nasıl başlamalı? ==

Yeniyseniz ve Lightning'i anlamıyorsanız: 

Lütfen bu sayfayı okuyun: [[Special:MyLanguage/Getting started|Nasıl başlamalı?]]


== Düğümünüze sahip çıkın ==

Telegram'da, [https://t.me/cheeserobot @cheeserobot] hesabına &lt;code&gt;/claim&lt;/code&gt; mesajı gönderin. Sonra verilen talimatları takip edin.

Daha sonra, [https://t.me/plebnet PlebNet] grubuna bu mesajı gönderin: &lt;code&gt;/node&lt;/code&gt;

Lightning için, [https://amboss.space Amboss.space] en iyi web sitelerinden biridir. Birçok kişi, düğümünüz hakkında bilgi bulmak için Amboss'a gidebilir. [[Special:MyLanguage/Claim on Amboss|Amboss'da düğümünüze sahip çıkın]].


== Kanallar nasıl açılır? ==

Tüm yeni başlayanlar önce "'''Kiminle kanal açayım?'''" diye soruyor.

Cevap, '''Sana yardım edebilecek bir mentorla!'''

Google ve internet ile, bazı insanlar bunun işe yaramaz olduğunu düşünüyor. Ama, iyi bir mentorun yerini hiçbir şey tutamaz.

[[Special:MyLanguage/Opening channels|Kanallara açmak]]


== Düğümünüzü nasıl doğru muhafaza edersiniz? ==

[[Special:MyLanguage/Node Hardening|Düğümünüzün güçlendirilmesi]]

[[Special:MyLanguage/Maintaining node hygiene|Düğümünüzü nasıl doğru muhafaza edersiniz?]]

[[Special:MyLanguage/Node Hardware|Düğümünüzün donanımı]]

[[Special:MyLanguage/UPS|Kesintisiz güç kaynağı]] (Uninterrupted Power Supply, UPS)

== Yedekleme/Kurtarma ==

Bu linkten kanal yedekleme ve kurtartma hakkında bilgi sahibi olabilir ve paranızı nasıl güvende tutacağınızı öğrenebilirsiniz.

[[Special:MyLanguage/Backup/Recovery|Yedekleme/Kurtarma]]


== Kişiselleştirme ==

Düğümünüze bir isim (alias) ve renk vererek kişiselleştirebilirsiniz. 

[[Special:MyLanguage/Setting a node alias|Düğümünüze isim verin]]


==Upgrade==

[[Special:MyLanguage/Upgrading Umbrel Node|Düğümünüzü upgrade edin]]


== Balance of Satoshis ==

Balance of Satoshis (BoS) LND için bir yazılım programıdır. ThunderHub veya RideTheLightning gibi. Ama, daha fazla opsiyonları var. Örneğin, Telegram'dan bir bildirim botu isteyebilirsiniz.

Daha fazla bilgi için, bu makaleyi okuyun: [[Special:MyLanguage/Balance of Satoshis|Balance of Satoshis]].

[https://github.com/niteshbalusu11/BOS-Commands-Document BOS için] 

Umbrel için: [[Special:MyLanguage/Umbrel - Installing BoS|Umbrel - BoS'ı kurmak]]

== LND konfigürasyon ayarları ==

Bilgi için aşağıdaki linke bakabilirsiniz:

[[Special:MyLanguage/LND Configuration Settings|LND konfigürasyon ayarları]]


== Karlı Bir Düğüm Çalıştırma ==

Düğümünüzde hiç bir transfer yoksa, veya sadece bir yönde hareket ediyorsa...

Ödemeler hakkında daha fazla bilgi ister misiniz?

[[Special:MyLanguage/Running A Profitable Routing Node|Karlı Bir Düğüm Çalıştırma]]

[[Special:MyLanguage/Fees And Profitability|Ödemeler]]

== Sandbox ==

[[Special:MyLanguage/Plebnet Playground|PlebNet Playground]]'da oğrenebilirsiniz ve Lightning kullanabilirsiniz paranızı kaybetme riski olmadan.

[[File:PlebnetPlayground.jpg|450px|link=Plebnet Playground|alt=Plebnet Playground Logo]]


== Sıkça Sorulan Sorular ==

Sıkça Sorulan Sorular: [[Special:MyLanguage/FAQ|SSS]]


== Kaynaklar ==

[[Special:MyLanguage/Resources|Kaynaklar]]

= Tüm Sayfalar =




{{:Special:Allpages}}</text>
      <sha1>jmw1qgkj32lwtilzhiricedblt1d9ww</sha1>
    </revision>
  </page>
  <page>
    <title>Main Page/wo</title>
    <ns>0</ns>
    <id>1013</id>
    <revision>
      <id>1927</id>
      <parentid>1914</parentid>
      <timestamp>2021-10-19T17:14:38Z</timestamp>
      <contributor>
        <username>ADssx</username>
        <id>38</id>
      </contributor>
      <comment>Created page with "'''Dalal-jàmm ci PlebNebt!'''"</comment>
      <origin>1927</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="8128" sha1="ppkd1ydgs38rvmn1e5bkkummg7nknh9" xml:space="preserve">&lt;languages/&gt;
'''Dalal-jàmm ci PlebNebt!'''

&lt;div lang="en" dir="ltr" class="mw-content-ltr"&gt;
We've outlined the main 'guide' on this page. Follow the articles here in order to gain a better understanding of the steps required to join the PlebNet, and getting your node up &amp; running. If you'd like to simply browse around, you can view all our pages [[Special:AllPages|Special:AllPages]].
&lt;/div&gt;


&lt;div lang="en" dir="ltr" class="mw-content-ltr"&gt;
== To read first ==
&lt;/div&gt;

&lt;div lang="en" dir="ltr" class="mw-content-ltr"&gt;
[[Special:MyLanguage/Welcome to Plebnet|Welcome to Plebnet]]
&lt;/div&gt; 

&lt;div lang="en" dir="ltr" class="mw-content-ltr"&gt;
'''Please read the above link before anything else!''' Contains useful introduction and tips.
&lt;/div&gt;


&lt;div lang="en" dir="ltr" class="mw-content-ltr"&gt;
== Getting Started ==
&lt;/div&gt;

&lt;div lang="en" dir="ltr" class="mw-content-ltr"&gt;
Are you brand new and perhaps don't quite understand lightning? Do you not have your own node yet? Are you not yet in the Plebnet telegram group?
&lt;/div&gt; 

&lt;div lang="en" dir="ltr" class="mw-content-ltr"&gt;
Please see the [[Special:MyLanguage/Getting started|Getting started]] page.
&lt;/div&gt;


&lt;div lang="en" dir="ltr" class="mw-content-ltr"&gt;
== Claim your node ==
&lt;/div&gt;

&lt;div lang="en" dir="ltr" class="mw-content-ltr"&gt;
For telegram, DM [https://t.me/cheeserobot @cheeserobot] and then &lt;code&gt;/claim&lt;/code&gt; your node (follow the instructions, you will need to sign a message with your node to prove you are owner of the node).
&lt;/div&gt;

&lt;div lang="en" dir="ltr" class="mw-content-ltr"&gt;
Then, in the [https://t.me/plebnet plebnet] group announce your node with &lt;code&gt;/node&lt;/code&gt;. If you see your own node, success.
Repeat in other groups which support CheeseRobot with &lt;code&gt;/node&lt;/code&gt;.
&lt;/div&gt;

&lt;div lang="en" dir="ltr" class="mw-content-ltr"&gt;
Additionally, [https://amboss.space Amboss.space] is one of the best websites for looking up nodes and their basic information. People may go to Amboss to browse your node's info. You can claim your node on Amboss which will allow you personalize your node's profile and add additional information. Use these instructions: [[Special:MyLanguage/Claim on Amboss|Claim on Amboss]]
&lt;/div&gt;


&lt;div lang="en" dir="ltr" class="mw-content-ltr"&gt;
== Opening Channels ==
&lt;/div&gt;

&lt;div lang="en" dir="ltr" class="mw-content-ltr"&gt;
The first question which a pleb has after (or even before) the node is synced "'''who should I open channel with'''"
&lt;/div&gt;

&lt;div lang="en" dir="ltr" class="mw-content-ltr"&gt;
I would say - '''with a mentor who is willing to spend time with you, teach you the ropes, mentor and guide you to be a better node runner'''
&lt;/div&gt;

&lt;div lang="en" dir="ltr" class="mw-content-ltr"&gt;
Of course in the age of google, internet, and instant gratification, this thought can be frowned upon but there is no replacement for a mentor in your journey as node runner.
&lt;/div&gt;

&lt;div lang="en" dir="ltr" class="mw-content-ltr"&gt;
For information relating to lightning channels, including methods to get inbound liquidity see: [[Special:MyLanguage/Opening channels|Opening channels]]
&lt;/div&gt;


&lt;div lang="en" dir="ltr" class="mw-content-ltr"&gt;
== Maintaining Proper Node Hygiene ==
&lt;/div&gt;

&lt;div lang="en" dir="ltr" class="mw-content-ltr"&gt;
[[Special:MyLanguage/Node Hardening|Node Hardening]]
&lt;/div&gt;

&lt;div lang="en" dir="ltr" class="mw-content-ltr"&gt;
[[Special:MyLanguage/Maintaining node hygiene|Maintaining node hygiene]]
&lt;/div&gt;

&lt;div lang="en" dir="ltr" class="mw-content-ltr"&gt;
[[Special:MyLanguage/Node Hardware|Node Hardware]]
&lt;/div&gt;

&lt;div lang="en" dir="ltr" class="mw-content-ltr"&gt;
[[Special:MyLanguage/UPS|UPS]] (Uninterrupted Power Supply)
&lt;/div&gt;

&lt;div lang="en" dir="ltr" class="mw-content-ltr"&gt;
== Backup/Recovery ==
&lt;/div&gt;

&lt;div lang="en" dir="ltr" class="mw-content-ltr"&gt;
The following link contains some important information about channel backups and recovery solutions so that you have a better idea of how to keep your funds safe.
&lt;/div&gt;

&lt;div lang="en" dir="ltr" class="mw-content-ltr"&gt;
[[Special:MyLanguage/Backup/Recovery|Backup/Recovery]]
&lt;/div&gt;


&lt;div lang="en" dir="ltr" class="mw-content-ltr"&gt;
== Let’s Get Personal ==
&lt;/div&gt;

&lt;div lang="en" dir="ltr" class="mw-content-ltr"&gt;
Your node can be customized to appear as a name (alias) rather than just a bunch of random letters and numbers. You can also set a color for your node that will show up on various lightning-related websites and programs.
&lt;/div&gt; 

&lt;div lang="en" dir="ltr" class="mw-content-ltr"&gt;
[[Special:MyLanguage/Setting a node alias|Setting a node alias]]
&lt;/div&gt;


&lt;div lang="en" dir="ltr" class="mw-content-ltr"&gt;
== Upgrades ==
&lt;/div&gt;

&lt;div lang="en" dir="ltr" class="mw-content-ltr"&gt;
[[Special:MyLanguage/Upgrading Umbrel Node|Upgrading Umbrel Node]]
&lt;/div&gt;


&lt;div lang="en" dir="ltr" class="mw-content-ltr"&gt;
== Balance of Satoshis ==
&lt;/div&gt;

&lt;div lang="en" dir="ltr" class="mw-content-ltr"&gt;
Balance of Satoshis, or BoS, is a set of commands for working with LND balances. It can do similar things as interfaces like ThunderHub or RideTheLightning. However, your options are much wider with BoS, and you will need it if you want to set up a telegram bot with your node (to get notifications whenever channels are opened/closed, whenever you forward a payment, whenever your node goes offline, and to get automatic channel backups for safety).
&lt;/div&gt;

&lt;div lang="en" dir="ltr" class="mw-content-ltr"&gt;
For more information, and common BoS commands see: [[Special:MyLanguage/Balance of Satoshis|Balance of Satoshis]].
&lt;/div&gt;

&lt;div lang="en" dir="ltr" class="mw-content-ltr"&gt;
[https://github.com/niteshbalusu11/BOS-Commands-Document See this excellent documentation for bos commands]
&lt;/div&gt; 

&lt;div lang="en" dir="ltr" class="mw-content-ltr"&gt;
Installation: process for [[Special:MyLanguage/Umbrel - Installing BoS|Umbrel - Installing BoS]]. Includes instructions for setting up BoS telegram bot.
&lt;/div&gt;

&lt;div lang="en" dir="ltr" class="mw-content-ltr"&gt;
== LND Configuration Settings Overview ==
&lt;/div&gt;

&lt;div lang="en" dir="ltr" class="mw-content-ltr"&gt;
Click the link below for information related to setting up channel size limits, predefined fees on new channels, setting up watchtowers, and other optimization settings.
&lt;/div&gt;

&lt;div lang="en" dir="ltr" class="mw-content-ltr"&gt;
[[Special:MyLanguage/LND Configuration Settings|LND Configuration Settings]]
&lt;/div&gt;


&lt;div lang="en" dir="ltr" class="mw-content-ltr"&gt;
== Running A Profitable Routing Node ==
&lt;/div&gt;

&lt;div lang="en" dir="ltr" class="mw-content-ltr"&gt;
Not seeing routing through your node, or your sats are only moving in one direction?
&lt;/div&gt;

&lt;div lang="en" dir="ltr" class="mw-content-ltr"&gt;
Want more information about rebalancing and fees? Want to run a program that auto-adjusts your fees, or one that gives you KPIs (Key Performance Indicators)?
&lt;/div&gt;

&lt;div lang="en" dir="ltr" class="mw-content-ltr"&gt;
'''Your one stop shop for tips on routing node profitability:''' [[Special:MyLanguage/Running A Profitable Routing Node|Running A Profitable Routing Node]]
&lt;/div&gt;

&lt;div lang="en" dir="ltr" class="mw-content-ltr"&gt;
[[Special:MyLanguage/Fees And Profitability|Shortcut to auto-fee and auto-KPI instructions]]
&lt;/div&gt;

&lt;div lang="en" dir="ltr" class="mw-content-ltr"&gt;
== Playground / Sandbox ==
&lt;/div&gt;

&lt;div lang="en" dir="ltr" class="mw-content-ltr"&gt;
Click the image below to get information on Plebnet Playground, a place where you can learn and use the lightning network without risking any real money (signet).
&lt;/div&gt;

&lt;div lang="en" dir="ltr" class="mw-content-ltr"&gt;
[[File:PlebnetPlayground.jpg|450px|link=Plebnet Playground|alt=Plebnet Playground Logo]]
&lt;/div&gt;


&lt;div lang="en" dir="ltr" class="mw-content-ltr"&gt;
== FAQ ==
&lt;/div&gt;

&lt;div lang="en" dir="ltr" class="mw-content-ltr"&gt;
A selection of questions frequently asked in [https://t.me/plebnet plebnet] groups.
[[Special:MyLanguage/FAQ|FAQ]]
&lt;/div&gt;


&lt;div lang="en" dir="ltr" class="mw-content-ltr"&gt;
== Resources ==
&lt;/div&gt;

&lt;div lang="en" dir="ltr" class="mw-content-ltr"&gt;
[[Special:MyLanguage/Resources|Resources]]
&lt;/div&gt;

&lt;div lang="en" dir="ltr" class="mw-content-ltr"&gt;
= All Pages =
&lt;/div&gt;




{{:Special:Allpages}}</text>
      <sha1>ppkd1ydgs38rvmn1e5bkkummg7nknh9</sha1>
    </revision>
  </page>
  <page>
    <title>Main Page/yo</title>
    <ns>0</ns>
    <id>1016</id>
    <revision>
      <id>1929</id>
      <parentid>1913</parentid>
      <timestamp>2021-10-19T17:15:12Z</timestamp>
      <contributor>
        <username>ADssx</username>
        <id>38</id>
      </contributor>
      <comment>Created page with "'''Ẹ kú àbọ̀ sí PlebNet!'''"</comment>
      <origin>1929</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="8133" sha1="d7wbex5c3upvxzj0g6qx119t1o6osin" xml:space="preserve">&lt;languages/&gt;
'''Ẹ kú àbọ̀ sí PlebNet!'''

&lt;div lang="en" dir="ltr" class="mw-content-ltr"&gt;
We've outlined the main 'guide' on this page. Follow the articles here in order to gain a better understanding of the steps required to join the PlebNet, and getting your node up &amp; running. If you'd like to simply browse around, you can view all our pages [[Special:AllPages|Special:AllPages]].
&lt;/div&gt;


&lt;div lang="en" dir="ltr" class="mw-content-ltr"&gt;
== To read first ==
&lt;/div&gt;

&lt;div lang="en" dir="ltr" class="mw-content-ltr"&gt;
[[Special:MyLanguage/Welcome to Plebnet|Welcome to Plebnet]]
&lt;/div&gt; 

&lt;div lang="en" dir="ltr" class="mw-content-ltr"&gt;
'''Please read the above link before anything else!''' Contains useful introduction and tips.
&lt;/div&gt;


&lt;div lang="en" dir="ltr" class="mw-content-ltr"&gt;
== Getting Started ==
&lt;/div&gt;

&lt;div lang="en" dir="ltr" class="mw-content-ltr"&gt;
Are you brand new and perhaps don't quite understand lightning? Do you not have your own node yet? Are you not yet in the Plebnet telegram group?
&lt;/div&gt; 

&lt;div lang="en" dir="ltr" class="mw-content-ltr"&gt;
Please see the [[Special:MyLanguage/Getting started|Getting started]] page.
&lt;/div&gt;


&lt;div lang="en" dir="ltr" class="mw-content-ltr"&gt;
== Claim your node ==
&lt;/div&gt;

&lt;div lang="en" dir="ltr" class="mw-content-ltr"&gt;
For telegram, DM [https://t.me/cheeserobot @cheeserobot] and then &lt;code&gt;/claim&lt;/code&gt; your node (follow the instructions, you will need to sign a message with your node to prove you are owner of the node).
&lt;/div&gt;

&lt;div lang="en" dir="ltr" class="mw-content-ltr"&gt;
Then, in the [https://t.me/plebnet plebnet] group announce your node with &lt;code&gt;/node&lt;/code&gt;. If you see your own node, success.
Repeat in other groups which support CheeseRobot with &lt;code&gt;/node&lt;/code&gt;.
&lt;/div&gt;

&lt;div lang="en" dir="ltr" class="mw-content-ltr"&gt;
Additionally, [https://amboss.space Amboss.space] is one of the best websites for looking up nodes and their basic information. People may go to Amboss to browse your node's info. You can claim your node on Amboss which will allow you personalize your node's profile and add additional information. Use these instructions: [[Special:MyLanguage/Claim on Amboss|Claim on Amboss]]
&lt;/div&gt;


&lt;div lang="en" dir="ltr" class="mw-content-ltr"&gt;
== Opening Channels ==
&lt;/div&gt;

&lt;div lang="en" dir="ltr" class="mw-content-ltr"&gt;
The first question which a pleb has after (or even before) the node is synced "'''who should I open channel with'''"
&lt;/div&gt;

&lt;div lang="en" dir="ltr" class="mw-content-ltr"&gt;
I would say - '''with a mentor who is willing to spend time with you, teach you the ropes, mentor and guide you to be a better node runner'''
&lt;/div&gt;

&lt;div lang="en" dir="ltr" class="mw-content-ltr"&gt;
Of course in the age of google, internet, and instant gratification, this thought can be frowned upon but there is no replacement for a mentor in your journey as node runner.
&lt;/div&gt;

&lt;div lang="en" dir="ltr" class="mw-content-ltr"&gt;
For information relating to lightning channels, including methods to get inbound liquidity see: [[Special:MyLanguage/Opening channels|Opening channels]]
&lt;/div&gt;


&lt;div lang="en" dir="ltr" class="mw-content-ltr"&gt;
== Maintaining Proper Node Hygiene ==
&lt;/div&gt;

&lt;div lang="en" dir="ltr" class="mw-content-ltr"&gt;
[[Special:MyLanguage/Node Hardening|Node Hardening]]
&lt;/div&gt;

&lt;div lang="en" dir="ltr" class="mw-content-ltr"&gt;
[[Special:MyLanguage/Maintaining node hygiene|Maintaining node hygiene]]
&lt;/div&gt;

&lt;div lang="en" dir="ltr" class="mw-content-ltr"&gt;
[[Special:MyLanguage/Node Hardware|Node Hardware]]
&lt;/div&gt;

&lt;div lang="en" dir="ltr" class="mw-content-ltr"&gt;
[[Special:MyLanguage/UPS|UPS]] (Uninterrupted Power Supply)
&lt;/div&gt;

&lt;div lang="en" dir="ltr" class="mw-content-ltr"&gt;
== Backup/Recovery ==
&lt;/div&gt;

&lt;div lang="en" dir="ltr" class="mw-content-ltr"&gt;
The following link contains some important information about channel backups and recovery solutions so that you have a better idea of how to keep your funds safe.
&lt;/div&gt;

&lt;div lang="en" dir="ltr" class="mw-content-ltr"&gt;
[[Special:MyLanguage/Backup/Recovery|Backup/Recovery]]
&lt;/div&gt;


&lt;div lang="en" dir="ltr" class="mw-content-ltr"&gt;
== Let’s Get Personal ==
&lt;/div&gt;

&lt;div lang="en" dir="ltr" class="mw-content-ltr"&gt;
Your node can be customized to appear as a name (alias) rather than just a bunch of random letters and numbers. You can also set a color for your node that will show up on various lightning-related websites and programs.
&lt;/div&gt; 

&lt;div lang="en" dir="ltr" class="mw-content-ltr"&gt;
[[Special:MyLanguage/Setting a node alias|Setting a node alias]]
&lt;/div&gt;


&lt;div lang="en" dir="ltr" class="mw-content-ltr"&gt;
== Upgrades ==
&lt;/div&gt;

&lt;div lang="en" dir="ltr" class="mw-content-ltr"&gt;
[[Special:MyLanguage/Upgrading Umbrel Node|Upgrading Umbrel Node]]
&lt;/div&gt;


&lt;div lang="en" dir="ltr" class="mw-content-ltr"&gt;
== Balance of Satoshis ==
&lt;/div&gt;

&lt;div lang="en" dir="ltr" class="mw-content-ltr"&gt;
Balance of Satoshis, or BoS, is a set of commands for working with LND balances. It can do similar things as interfaces like ThunderHub or RideTheLightning. However, your options are much wider with BoS, and you will need it if you want to set up a telegram bot with your node (to get notifications whenever channels are opened/closed, whenever you forward a payment, whenever your node goes offline, and to get automatic channel backups for safety).
&lt;/div&gt;

&lt;div lang="en" dir="ltr" class="mw-content-ltr"&gt;
For more information, and common BoS commands see: [[Special:MyLanguage/Balance of Satoshis|Balance of Satoshis]].
&lt;/div&gt;

&lt;div lang="en" dir="ltr" class="mw-content-ltr"&gt;
[https://github.com/niteshbalusu11/BOS-Commands-Document See this excellent documentation for bos commands]
&lt;/div&gt; 

&lt;div lang="en" dir="ltr" class="mw-content-ltr"&gt;
Installation: process for [[Special:MyLanguage/Umbrel - Installing BoS|Umbrel - Installing BoS]]. Includes instructions for setting up BoS telegram bot.
&lt;/div&gt;

&lt;div lang="en" dir="ltr" class="mw-content-ltr"&gt;
== LND Configuration Settings Overview ==
&lt;/div&gt;

&lt;div lang="en" dir="ltr" class="mw-content-ltr"&gt;
Click the link below for information related to setting up channel size limits, predefined fees on new channels, setting up watchtowers, and other optimization settings.
&lt;/div&gt;

&lt;div lang="en" dir="ltr" class="mw-content-ltr"&gt;
[[Special:MyLanguage/LND Configuration Settings|LND Configuration Settings]]
&lt;/div&gt;


&lt;div lang="en" dir="ltr" class="mw-content-ltr"&gt;
== Running A Profitable Routing Node ==
&lt;/div&gt;

&lt;div lang="en" dir="ltr" class="mw-content-ltr"&gt;
Not seeing routing through your node, or your sats are only moving in one direction?
&lt;/div&gt;

&lt;div lang="en" dir="ltr" class="mw-content-ltr"&gt;
Want more information about rebalancing and fees? Want to run a program that auto-adjusts your fees, or one that gives you KPIs (Key Performance Indicators)?
&lt;/div&gt;

&lt;div lang="en" dir="ltr" class="mw-content-ltr"&gt;
'''Your one stop shop for tips on routing node profitability:''' [[Special:MyLanguage/Running A Profitable Routing Node|Running A Profitable Routing Node]]
&lt;/div&gt;

&lt;div lang="en" dir="ltr" class="mw-content-ltr"&gt;
[[Special:MyLanguage/Fees And Profitability|Shortcut to auto-fee and auto-KPI instructions]]
&lt;/div&gt;

&lt;div lang="en" dir="ltr" class="mw-content-ltr"&gt;
== Playground / Sandbox ==
&lt;/div&gt;

&lt;div lang="en" dir="ltr" class="mw-content-ltr"&gt;
Click the image below to get information on Plebnet Playground, a place where you can learn and use the lightning network without risking any real money (signet).
&lt;/div&gt;

&lt;div lang="en" dir="ltr" class="mw-content-ltr"&gt;
[[File:PlebnetPlayground.jpg|450px|link=Plebnet Playground|alt=Plebnet Playground Logo]]
&lt;/div&gt;


&lt;div lang="en" dir="ltr" class="mw-content-ltr"&gt;
== FAQ ==
&lt;/div&gt;

&lt;div lang="en" dir="ltr" class="mw-content-ltr"&gt;
A selection of questions frequently asked in [https://t.me/plebnet plebnet] groups.
[[Special:MyLanguage/FAQ|FAQ]]
&lt;/div&gt;


&lt;div lang="en" dir="ltr" class="mw-content-ltr"&gt;
== Resources ==
&lt;/div&gt;

&lt;div lang="en" dir="ltr" class="mw-content-ltr"&gt;
[[Special:MyLanguage/Resources|Resources]]
&lt;/div&gt;

&lt;div lang="en" dir="ltr" class="mw-content-ltr"&gt;
= All Pages =
&lt;/div&gt;




{{:Special:Allpages}}</text>
      <sha1>d7wbex5c3upvxzj0g6qx119t1o6osin</sha1>
    </revision>
  </page>
  <page>
    <title>Maintaining node hygiene</title>
    <ns>0</ns>
    <id>17</id>
    <revision>
      <id>1498</id>
      <parentid>1497</parentid>
      <timestamp>2021-10-05T19:44:01Z</timestamp>
      <contributor>
        <username>VS</username>
        <id>18</id>
      </contributor>
      <origin>1498</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="3773" sha1="bvsbk7odz7xssw2h5hdrs0hxmmper2q" xml:space="preserve">&lt;languages/&gt;
&lt;translate&gt;


=== Keep Your Node Online === &lt;!--T:1--&gt;

&lt;!--T:2--&gt;
WHEN you’re running a lightning node, it’s important to keep consistent uptime. This is good for you, your peers, and the overall community. Making sure your node stays online improves your reliability, as well as the reliabity of nodes that connect to you. If your node reboots or goes offline repeatedly, your reputation will be negatively impacted, and other peers will choose to route around you. If your node is offline for an extended period of time, you also run the risk of having your open channels force-closed, which can result in losing sats as the channel balance settles on-chain.



=== Setting cron jobs === &lt;!--T:3--&gt;

&lt;!--T:4--&gt;
Certain functions can be automated by cron to run regularly. 
To add jobs in cron, do &lt;code&gt;crontab -e&lt;/code&gt; and then make the changes. If you are asked for editor, select /bin/nano. To save &lt;code&gt;ctrl -x y enter&lt;/code&gt;
To check cron jobs do &lt;code&gt;crontab -l&lt;/code&gt;

&lt;!--T:5--&gt;
To enable reconnecting disconnected peers, you can run this every 3-6 hours. The following entry will run it every 4 hours.

&lt;!--T:6--&gt;
&lt;code&gt;0 */4 * * * /usr/bin/timeout -s 2 300 /usr/bin/bos reconnect &gt;/tmp/cron1.log 2&gt;&amp;1; date &gt;&gt; /tmp/cron1.log&lt;/code&gt;

&lt;!--T:7--&gt;
RaspiBliz users may have to use this instead. Please double-check that path to bos is correct &lt;code&gt;which bos&lt;/code&gt;. Install to cron using bos user (one which is used to run bos).

&lt;!--T:8--&gt;
&lt;code&gt;0 */4 * * * /usr/bin/timeout -s 2 300 /home/bos/.npm-global/bin/bos reconnect &gt;/tmp/cron1.log 2&gt;&amp;1; date &gt;&gt; /tmp/cron1.log&lt;/code&gt;



=== Set a Static IP Address === &lt;!--T:9--&gt;

&lt;!--T:10--&gt;
One of the most important aspects to keeping your node online is setting a static IP address. Normally, your router assigns IP addresses dynamically to every device on the network. When the router refreshes its IP tables from time to time, some or all of the devices connected to it are reassigned new addresses. Generally, your devices will not alert you when this happens. Some models of wireless printers will display a message on the screen when the IP address changes, but by default, your laptop, smartphone, or node will not inform you when this happens.

&lt;!--T:11--&gt;
The solution for this is to change your router’s settings to lock the IP address used by your node. Depending on the type of router you use, this might be referred to as a '''manually-assigned IP''', a '''reserved IP''', or you may need to simply turn off '''automatic IP''' assignment. You might have to look in the advanced settings section to find this feature. Once you’ve set the IP address, you shouldn’t have to reboot your node, but if you do, it should retain the same IP address when it comes back up.

&lt;!--T:12--&gt;
[[File:reserved_ip.jpeg|500px]] Example of the Reserved IP settings screen on the Google Home app.



=== Make Friends With Lightning Watch Bot === &lt;!--T:13--&gt;

&lt;!--T:14--&gt;
One simple way to be notified in the event your node becomes unavailable is to register it with @lightningwatchbot, a Telegram bot that will keep an eye on your node’s up/down staus. Start a conversation with the bot, and it will walk you through the steps to connect your node. As a free service, it will send you alerts on a one hour delay. For a faster response time, you can open a channel of any size with the bot (a great way to practice opening channels) and send it a small payment to receive notifications for your desired duration.

&lt;!--T:15--&gt;
[[File:lightning_watchbot.png|500px]]

&lt;!--T:16--&gt;
Currently, Lightning Watch Bot charges the following fees:

&lt;!--T:17--&gt;
* 1 hour for 5 sats
* 1 day for 90 sats
* 1 week for 600 sats
* 1 month for 2400 sats
* 6 months for 14400 sats
* 1 year for 27600 sats

&lt;/translate&gt;</text>
      <sha1>bvsbk7odz7xssw2h5hdrs0hxmmper2q</sha1>
    </revision>
  </page>
  <page>
    <title>Maintaining node hygiene/en</title>
    <ns>0</ns>
    <id>297</id>
    <revision>
      <id>1495</id>
      <parentid>781</parentid>
      <timestamp>2021-10-05T17:03:08Z</timestamp>
      <contributor>
        <username>FuzzyBot</username>
        <id>29</id>
      </contributor>
      <comment>Updating to match new version of source page</comment>
      <origin>1495</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="3552" sha1="jsnkm14hxd7p6q5xd16yxqhs6q60ohl" xml:space="preserve">&lt;languages/&gt;


=== Keep Your Node Online ===

When you’re running a lightning node, it’s important to keep consistent uptime. This is good for you, your peers, and the overall community. Making sure your node stays online improves your reliability, as well as the reliabity of nodes that connect to you. If your node reboots or goes offline repeatedly, your reputation will be negatively impacted, and other peers will choose to route around you. If your node is offline for an extended period of time, you also run the risk of having your open channels force-closed, which can result in losing sats as the channel balance settles on-chain.



=== Setting cron jobs ===

Certain functions can be automated by cron to run regularly. 
To add jobs in cron, do &lt;code&gt;crontab -e&lt;/code&gt; and then make the changes. If you are asked for editor, select /bin/nano. To save &lt;code&gt;ctrl -x y enter&lt;/code&gt;
To check cron jobs do &lt;code&gt;crontab -l&lt;/code&gt;

To enable reconnecting disconnected peers, you can run this every 3-6 hours. The following entry will run it every 4 hours.

&lt;code&gt;0 */4 * * * /usr/bin/timeout -s 2 300 /usr/bin/bos reconnect &gt;/tmp/cron1.log 2&gt;&amp;1; date &gt;&gt; /tmp/cron1.log&lt;/code&gt;

RaspiBliz users may have to use this instead. Please double-check that path to bos is correct &lt;code&gt;which bos&lt;/code&gt;. Install to cron using bos user (one which is used to run bos).

&lt;code&gt;0 */4 * * * /usr/bin/timeout -s 2 300 /home/bos/.npm-global/bin/bos reconnect &gt;/tmp/cron1.log 2&gt;&amp;1; date &gt;&gt; /tmp/cron1.log&lt;/code&gt;



=== Set a Static IP Address ===

One of the most important aspects to keeping your node online is setting a static IP address. Normally, your router assigns IP addresses dynamically to every device on the network. When the router refreshes its IP tables from time to time, some or all of the devices connected to it are reassigned new addresses. Generally, your devices will not alert you when this happens. Some models of wireless printers will display a message on the screen when the IP address changes, but by default, your laptop, smartphone, or node will not inform you when this happens.

The solution for this is to change your router’s settings to lock the IP address used by your node. Depending on the type of router you use, this might be referred to as a '''manually-assigned IP''', a '''reserved IP''', or you may need to simply turn off '''automatic IP''' assignment. You might have to look in the advanced settings section to find this feature. Once you’ve set the IP address, you shouldn’t have to reboot your node, but if you do, it should retain the same IP address when it comes back up.

[[File:reserved_ip.jpeg|500px]] Example of the Reserved IP settings screen on the Google Home app.



=== Make Friends With Lightning Watch Bot ===

One simple way to be notified in the event your node becomes unavailable is to register it with @lightningwatchbot, a Telegram bot that will keep an eye on your node’s up/down staus. Start a conversation with the bot, and it will walk you through the steps to connect your node. As a free service, it will send you alerts on a one hour delay. For a faster response time, you can open a channel of any size with the bot (a great way to practice opening channels) and send it a small payment to receive notifications for your desired duration.

[[File:lightning_watchbot.png|500px]]

Currently, Lightning Watch Bot charges the following fees:

* 1 hour for 5 sats
* 1 day for 90 sats
* 1 week for 600 sats
* 1 month for 2400 sats
* 6 months for 14400 sats
* 1 year for 27600 sats</text>
      <sha1>jsnkm14hxd7p6q5xd16yxqhs6q60ohl</sha1>
    </revision>
  </page>
  <page>
    <title>Mosh</title>
    <ns>0</ns>
    <id>36</id>
    <revision>
      <id>989</id>
      <parentid>753</parentid>
      <timestamp>2021-10-02T19:48:59Z</timestamp>
      <contributor>
        <username>Lucasdcf</username>
        <id>27</id>
      </contributor>
      <comment>Marked this version for translation</comment>
      <origin>989</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="2497" sha1="7a8eu8tnx2zfdm4ztuuatgvrqt86o8r" xml:space="preserve">&lt;languages/&gt;
&lt;translate&gt;
&lt;!--T:1--&gt;
Two of the discomforts of using a CLI to SSH into a node are:

&lt;!--T:2--&gt;
* disconnections
* latency while typing

&lt;!--T:3--&gt;
[https://mosh.org/ Mosh] solves these issues and provides a far superior user experience. The key differences are:

&lt;!--T:4--&gt;
* Mosh uses a persistent UDP connection, sessions remain active even between disconnections or laptop lid closes.
* Mosh uses predictive typing ("local echo") so typing feels instant, even on remote lightning nodes.

&lt;!--T:5--&gt;
[https://linux.die.net/man/1/mosh Mosh man page].

&lt;!--T:6--&gt;
&lt;asciinema loop=1 poster="npt:0:15" autoplay=1 src=https://plebnet.wiki/images/1/1f/MoshCast.cast /&gt;


== Client-side and server-side installation == &lt;!--T:7--&gt;

&lt;!--T:8--&gt;
On linux:

    &lt;!--T:9--&gt;
sudo apt-get install mosh

&lt;!--T:10--&gt;
On OSX:

    &lt;!--T:11--&gt;
brew install mosh


== Usage == &lt;!--T:12--&gt;

&lt;!--T:13--&gt;
Instead of typing:

    &lt;!--T:14--&gt;
$ ssh ubuntu@X.X.X.X

&lt;!--T:15--&gt;
You can use mosh:

    &lt;!--T:16--&gt;
$ mosh ubuntu@X.X.X.X

&lt;!--T:17--&gt;
If using a pem file for authentication, instead of:

    &lt;!--T:18--&gt;
$ ssh -i ~/.ssh/my_key.pem ubuntu@X.X.X.X

&lt;!--T:19--&gt;
Use:

    &lt;!--T:20--&gt;
$ mosh --ssh='ssh -i ~/.ssh/my_key.pem' ubuntu@X.X.X.X

&lt;!--T:21--&gt;
That's a rather long command, so you may want to consider setting up an alias, e.g

    &lt;!--T:22--&gt;
$ alias m="mosh --ssh='ssh -i ~/.ssh/my_key.pem' ubuntu@X.X.X.X"


== use over slow connections == &lt;!--T:23--&gt;

&lt;!--T:24--&gt;
If you're moshing over a slow connection, or into a very distant lightning node:

    &lt;!--T:25--&gt;
$ mosh --ssh='ssh -i ~/.ssh/my_key.pem' --predict=experimental ubuntu@X.X.X.X 

&lt;!--T:26--&gt;
Experimental prediction provides a totally seamless typing experience on your node, as if you were typing on your localhost's CLI.



== Firewall Settings == &lt;!--T:27--&gt;

&lt;!--T:28--&gt;
Mosh uses UDP port 60001, so make sure you open this port in your firewall settings. If you close a terminal without terminating the session, the user can remain logged in, which then occupies the port. For this reason, you may also want to consider opening port 60002. Another option is to ssh in, to kill the zombie session.


== Killing Zombie Sessions == &lt;!--T:29--&gt;

&lt;!--T:30--&gt;
If you have a zombie session preventing you from moshing in, simply kill it with:

    &lt;!--T:31--&gt;
$ who -u
    $ ubuntu   pts/1        2021-07-21 12:40   .         22056 (X.X.X.X via mosh [22056])

&lt;!--T:32--&gt;
Then:

    &lt;!--T:33--&gt;
$ pkill -9 22056
&lt;/translate&gt;</text>
      <sha1>7a8eu8tnx2zfdm4ztuuatgvrqt86o8r</sha1>
    </revision>
  </page>
  <page>
    <title>Mosh/en</title>
    <ns>0</ns>
    <id>952</id>
    <revision>
      <id>1482</id>
      <timestamp>2021-10-02T21:02:42Z</timestamp>
      <contributor>
        <username>FuzzyBot</username>
        <id>29</id>
      </contributor>
      <comment>Updating to match new version of source page</comment>
      <origin>1482</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="2085" sha1="c90g7igpt0mbyslm9zmgxqtm1p9cq1f" xml:space="preserve">&lt;languages/&gt;
Two of the discomforts of using a CLI to SSH into a node are:

* disconnections
* latency while typing

[https://mosh.org/ Mosh] solves these issues and provides a far superior user experience. The key differences are:

* Mosh uses a persistent UDP connection, sessions remain active even between disconnections or laptop lid closes.
* Mosh uses predictive typing ("local echo") so typing feels instant, even on remote lightning nodes.

[https://linux.die.net/man/1/mosh Mosh man page].

&lt;asciinema loop=1 poster="npt:0:15" autoplay=1 src=https://plebnet.wiki/images/1/1f/MoshCast.cast /&gt;


== Client-side and server-side installation ==

On linux:

    sudo apt-get install mosh

On OSX:

    brew install mosh


== Usage ==

Instead of typing:

    $ ssh ubuntu@X.X.X.X

You can use mosh:

    $ mosh ubuntu@X.X.X.X

If using a pem file for authentication, instead of:

    $ ssh -i ~/.ssh/my_key.pem ubuntu@X.X.X.X

Use:

    $ mosh --ssh='ssh -i ~/.ssh/my_key.pem' ubuntu@X.X.X.X

That's a rather long command, so you may want to consider setting up an alias, e.g

    $ alias m="mosh --ssh='ssh -i ~/.ssh/my_key.pem' ubuntu@X.X.X.X"


== use over slow connections ==

If you're moshing over a slow connection, or into a very distant lightning node:

    $ mosh --ssh='ssh -i ~/.ssh/my_key.pem' --predict=experimental ubuntu@X.X.X.X 

Experimental prediction provides a totally seamless typing experience on your node, as if you were typing on your localhost's CLI.



== Firewall Settings ==

Mosh uses UDP port 60001, so make sure you open this port in your firewall settings. If you close a terminal without terminating the session, the user can remain logged in, which then occupies the port. For this reason, you may also want to consider opening port 60002. Another option is to ssh in, to kill the zombie session.


== Killing Zombie Sessions ==

If you have a zombie session preventing you from moshing in, simply kill it with:

    $ who -u
    $ ubuntu   pts/1        2021-07-21 12:40   .         22056 (X.X.X.X via mosh [22056])

Then:

    $ pkill -9 22056</text>
      <sha1>c90g7igpt0mbyslm9zmgxqtm1p9cq1f</sha1>
    </revision>
  </page>
  <page>
    <title>Node Hardening</title>
    <ns>0</ns>
    <id>53</id>
    <revision>
      <id>2065</id>
      <parentid>2064</parentid>
      <timestamp>2021-10-31T18:45:54Z</timestamp>
      <contributor>
        <username>BitcoinRevolution</username>
        <id>39</id>
      </contributor>
      <comment>/* Hardware-based SSH keys */</comment>
      <origin>2065</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="7089" sha1="dk34majb5fz7gesi4primscxp5erya1" xml:space="preserve">&lt;languages/&gt;
&lt;translate&gt;
&lt;!--T:1--&gt;
Your Lightning node stores your private keys and it's generally a good idea to keep it as secure as possible. This is quite a big topic and the following list of suggested actions are by no means exhaustive. 

=Local Hardening= &lt;!--T:2--&gt;



==General common sense== &lt;!--T:3--&gt;

&lt;!--T:4--&gt;
In most cases, your Lightning node will be running on some sort of Linux distribution and SSH is most likely the way you access that node. Make sure that your user password is strong and unique.

&lt;!--T:5--&gt;
DO NOT SHARE SCREENSHOTS WITH QR CODES OR YOUR TOR ADDRESS.

&lt;!--T:6--&gt;
DO NOT SHARE YOUR WALLET ACCESS QR CODES. 

&lt;!--T:7--&gt;
DO NOT SHARE ANYTHING WHICH CAN ALLOW ACCESS TO YOUR NODE (QR CODE/TOR ADDRESS)

Advanced Node Security

==Hardware-based SSH keys==

Logging in with a password or having your SSH keys on your hard drive is not secure. Both can easily be stolen if your computer is compromised. It is significantly more secure to log in with only an SSH key that even you have never been able to read the private key for. The hardware devices can also be configured to require physical touch for authentication, which is a massive security improvement.

1. Generate a hardware-based SSH key.

Check if your computer has a secure element. If it does, you may be able to use that. For Mac, you can use: https://github.com/maxgoedjen/secretive

The Ledger hardware wallet has a secure element and can generate SSH keys within it: https://blog.ledger.com/ssh/

The Trezor hardware wallet also supports SSH keys, but does not have a secure element so might be considered slightly less secure:
https://wiki.trezor.io/SSH

You can buy a Yubikey or OnlyKey and generate SSH keys on that. It's also very good for two factor authentication codes:
https://developers.yubico.com/SSH/ and 
https://onlykey.io/

2. Once the hardware-based SSH keys are generated, you'll need to add the public key as the first line in ~/.ssh/authorized_keys on your node. ie:
&lt;syntaxhighlight lang="bash"&gt;
echo "PUBLIC KEY GOES HERE" &gt;&gt; ~/.ssh/authorized_keys
&lt;/syntaxhighlight&gt;

3. You can optionally disable password log in over SSH by editing &lt;pre&gt;/etc/ssh/sshd_config&lt;/pre&gt; and setting &lt;pre&gt;PasswordAuthentication no&lt;/pre&gt; and restart the ssh service with:
&lt;syntaxhighlight lang="bash"&gt;
service sshd restart
&lt;/syntaxhighlight&gt;

If you decide to turn off password authentication, first ensure that you have multiple hardware-based keys stored in multiple different locations as backups in case you lose access to the main hardware-based key that you use. With password authentication turned off, if you lose access to all of your keys, you will not be able to SSH into your node ever again.

Note that some SSH programs require you to specify the pubic key file in order to use keys to log in. Those programs might not work with hardware-based keys. In that case, it's recommended to just use the standard terminal that comes pre-installed on your operating system (the Terminal app in Mac) and then use SSH via the command:
&lt;syntaxhighlight lang="bash"&gt;
ssh umbrel@umbrel.local
&lt;/syntaxhighlight&gt;

==Hard drive-based SSH keys== &lt;!--T:8--&gt;

&lt;!--T:9--&gt;
If setting up hardware-based SSH keys is too complex, you can try setting up SSH keys stored on your hard drive. It will still be more secure than using password authentication. To do so, first generate your SSH keys on your host (not the lightning node itself).

&lt;!--T:10--&gt;
&lt;syntaxhighlight lang="bash"&gt;
ssh-keygen -t ed25519 -C "$(whoami)@$(uname -n)-$(date -I)"
&lt;/syntaxhighlight&gt;

&lt;!--T:11--&gt;
Next, copy the public key to the Lightning node system. 
&lt;syntaxhighlight lang="bash"&gt;
ssh-copy-id user@&lt;ip of lightning node host&gt;
&lt;/syntaxhighlight&gt;

&lt;!--T:12--&gt;
Then check that you can access your node over SSH using those keys. When authenticating over SSH the system should use your keys and not prompt you for the user password.

&lt;!--T:13--&gt;
Once that's done, disable password login over SSH entirely by editing &lt;pre&gt;/etc/ssh/sshd_config&lt;/pre&gt; and setting &lt;pre&gt;PasswordAuthentication no&lt;/pre&gt; and restart the ssh service using:
&lt;syntaxhighlight lang="bash"&gt;
service sshd restart
&lt;/syntaxhighlight&gt;

==SSH proxy for the web interface==

Being able to log in to Umbrel, Thunderhub, RTL, etc. with just a password on the local network is not secure, especially since those websites don't use HTTPS on the local network. Using only a password is not secure. Require hardware-based SSH key log in to access those interfaces until Umbrel adds two factor authentication to the interface.

I'd recommend not using the Tor URLs for accessing the interfaces for Umbrel or apps. Most of the apps use a default password that's publicly known. If the tor URL is stolen, they will have access to your funds. Even if you change the password, just password-based authentication is not secure as even the password can be stolen using a simple key logger.

1. On your computer (not on the node), create a SOCKS5 proxy using SSH:
&lt;syntaxhighlight lang="bash"&gt;
ssh -D 8123 -f -C -q -N umbrel@umbrel.local
&lt;/syntaxhighlight&gt;

2. Set up your browser or computer to use the proxy. In Firefox, you can search the settings for the word "proxy" and then choose "manual proxy configuration". Enter "localhost" for the SOCKS5 Host and 8123 as the port. For example, you can use Brave for normal browsing and then Firefox for node related things so that only those things are proxied through the node.

3. Configure your network firewall or the firewall on your Umbrel (using iptables) to block the outbound ports for Umbrel, RTL, Thunderhub, etc.

Even if you're not able to set up the firewall, using the SSH tunnel is still more secure since normally those websites don't use HTTPS when accessed locally.

==Reduce local attack surface== &lt;!--T:14--&gt;

&lt;!--T:15--&gt;
Umbrel allows you to install a bunch of different apps, some not being Bitcoin or Lighting related at all such as Nextcloud. By doing so, especially if you're exposing the application publically, you increase the attack surface of your node system. If someone were to exploit a vulnerability in a exposed service or application, the attacker would potentially be able to retrieve your keys stored on the system and steal your funds. In other words, a Lighting node should be dedicated to that task and not be used for a plethora of other things.

=Network hardening= &lt;!--T:16--&gt;
Most, if not all of us, are running our nodes on our home network, along side a large number of other devices, including smartphones, computers and IoT devices. You might want to consider isolating your node from the rest of the clients on the network and control access through firewall rules. 

&lt;!--T:17--&gt;
If your network equipment supports VLAN you have a great tool to tighten up your network security. You could create a separate VLAN for your lighting node and only allow it to communicate out on the required ports. If you do the same with your various other network client types you end up with a nicely segmented network where you can easily control who can access what and how.

&lt;/translate&gt;</text>
      <sha1>dk34majb5fz7gesi4primscxp5erya1</sha1>
    </revision>
  </page>
  <page>
    <title>Node Hardening/en</title>
    <ns>0</ns>
    <id>950</id>
    <revision>
      <id>1478</id>
      <timestamp>2021-10-02T20:57:11Z</timestamp>
      <contributor>
        <username>FuzzyBot</username>
        <id>29</id>
      </contributor>
      <comment>Updating to match new version of source page</comment>
      <origin>1478</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="2729" sha1="mjw56ij4xkatockiyht40tge6d6qluj" xml:space="preserve">&lt;languages/&gt;
Your Lightning node stores your private keys and it's generally a good idea to keep it as secure as possible. This is quite a big topic and the following list of suggested actions are by no means exhaustive. 

=Local Hardening=



==General common sense==

In most cases, your Lightning node will be running on some sort of Linux distribution and SSH is most likely the way you access that node. Make sure that your user password is strong and unique.

DO NOT SHARE SCREENSHOTS WITH QR CODES OR YOUR TOR ADDRESS.

DO NOT SHARE YOUR WALLET ACCESS QR CODES. 

DO NOT SHARE ANYTHING WHICH CAN ALLOW ACCESS TO YOUR NODE (QR CODE/TOR ADDRESS)


==SSH Keys==

It's advised to disable password authentication over SSH and use ssh keys instead. To do so, first generate your SSH keys on your host (not the lightning node itself).

&lt;syntaxhighlight lang="bash"&gt;
ssh-keygen -t ed25519 -C "$(whoami)@$(uname -n)-$(date -I)"
&lt;/syntaxhighlight&gt;

Next, copy the public key to the Lightning node system. 
&lt;syntaxhighlight lang="bash"&gt;
ssh-copy-id user@&lt;ip of lightning node host&gt;
&lt;/syntaxhighlight&gt;

Then check that you can access your node over SSH using those keys. When authenticating over SSH the system should use your keys and not prompt you for the user password.

Once that's done, disable password login over SSH entirely by editing &lt;pre&gt;/etc/ssh/sshd_config&lt;/pre&gt; and setting &lt;pre&gt;PasswordAuthentication no&lt;/pre&gt; and restart the ssh service.



==Reduce local attack surface==

Umbrel allows you to install a bunch of different apps, some not being Bitcoin or Lighting related at all such as Nextcloud. By doing so, especially if you're exposing the application publically, you increase the attack surface of your node system. If someone were to exploit a vulnerability in a exposed service or application, the attacker would potentially be able to retrieve your keys stored on the system and steal your funds. In other words, a Lighting node should be dedicated to that task and not be used for a plethora of other things.

=Network hardening=
Most, if not all of us, are running our nodes on our home network, along side a large number of other devices, including smartphones, computers and IoT devices. You might want to consider isolating your node from the rest of the clients on the network and control access through firewall rules. 

If your network equipment supports VLAN you have a great tool to tighten up your network security. You could create a separate VLAN for your lighting node and only allow it to communicate out on the required ports. If you do the same with your various other network client types you end up with a nicely segmented network where you can easily control who can access what and how.</text>
      <sha1>mjw56ij4xkatockiyht40tge6d6qluj</sha1>
    </revision>
  </page>
  <page>
    <title>Node Hardware</title>
    <ns>0</ns>
    <id>54</id>
    <revision>
      <id>992</id>
      <parentid>755</parentid>
      <timestamp>2021-10-02T19:49:19Z</timestamp>
      <contributor>
        <username>Lucasdcf</username>
        <id>27</id>
      </contributor>
      <comment>Marked this version for translation</comment>
      <origin>992</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="3496" sha1="1u0siwvtfee0mirluvfmbvhgsel0npu" xml:space="preserve">&lt;languages/&gt;
&lt;translate&gt;
&lt;!--T:1--&gt;
The hardware requirements of running a Node are pretty low. You need a system that can run 24/7 and that has at least 600 GB of storage. The storage is needed to save a local copy of the Bitcoin blockchain which is growing over time and hence it's wise to account for future growth too when setting up your system. It's also possible to run a pruned version of the Bitcoin blockchain which would take up a lot less storage space and is probably what most will end up doing eventually. 

&lt;!--T:2--&gt;
The following is sufficient to run a Lightning Node such as Umbrel. 

&lt;!--T:3--&gt;
- 4GB of RAM
- 600+ GB of storage, SSD highly preferable.

&lt;!--T:4--&gt;
You should pick your hardware according to your reasons for running a node. How critical is 24/7 uptime and how robust do you want your setup to be? Do you want to be able to account for disk failure? Here is a basic run through of popular options. 

=Rusty old laptop= &lt;!--T:5--&gt;
If you have an old laptop or computer lying around somewhere, running a node on it can be a feasible endeavor as long as it has enough storage space and RAM. However, laptops are generally not designed for 24/7 operation over long periods of time and if the laptop is old, be prepared for hardware failure at some point. I'd generally advise against using such a system for a Lightning node you plan to put any serious liquidity into.

=Single board computer (Raspberry Pi)= &lt;!--T:6--&gt;
A popular hardware platform for node operators. The Raspberry Pi is a single board computer that can be expanded with external storage to make up a perfectly suitable system. It's cheap to buy and the form factor makes it very appealing for something that needs to run 24/7. It's still not a particularly robust platform however. The SD cards tend to fail quite frequently, especially on systems with any sort of heavy IO, so make sure you get a high quality card. 
=Professional level consumer / Server Grade Setup=
The Zen 2/3 chips from AMD support ECC memory and many motherboards come with multiple NVMe slots. You can easily build yourself a very powerful and robust bare metal solution for sub-$1500 that will last you many years of growth.

=Enterprise Server Grade Setup= &lt;!--T:7--&gt;
If you're serious about creating a more robust hardware setup, you might want to consider enterprise grade hardware. The cost is significant but you can use the hardware for a large selection of services, not just a Lightning Node. 

&lt;!--T:8--&gt;
As an example, consider the following setup.

&lt;!--T:9--&gt;
- A 1U SuperMicro server with 4 drive bays, a single CPU and numerous RAM slots for easy expansion.
- 2-4 large capacity SSD's 

&lt;!--T:10--&gt;
For the host operating system, Proxmox is a great open source virtualization platform based on QEMU/KVM. You can then set up your disks as a ZFS storage pool with mirroring which instantly gets you local storage redundancy. If one disk fails, you won't lose any data and when you replace the drive the mirroring brings the new disk up to speed automatically. Couple that with ZFS snapshots that can be created at no cost (due to CoW) and sent off site and you have a pretty robust and reliable setup with hardware that is designed to take a beating 24/7 for years. Be aware that you should never restore an old image of an LND database, doing so could expose you to risk of transmitting an old state and loss of funds.

&lt;!--T:11--&gt;
Your Lightning node software of choice can then be run in a VM.

&lt;/translate&gt;</text>
      <sha1>1u0siwvtfee0mirluvfmbvhgsel0npu</sha1>
    </revision>
  </page>
  <page>
    <title>Node Hardware/en</title>
    <ns>0</ns>
    <id>945</id>
    <revision>
      <id>1473</id>
      <timestamp>2021-10-02T20:55:09Z</timestamp>
      <contributor>
        <username>FuzzyBot</username>
        <id>29</id>
      </contributor>
      <comment>Updating to match new version of source page</comment>
      <origin>1473</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="3347" sha1="1jhkhft4ix9pflk3erem8dtscwoc7hw" xml:space="preserve">&lt;languages/&gt;
The hardware requirements of running a Node are pretty low. You need a system that can run 24/7 and that has at least 600 GB of storage. The storage is needed to save a local copy of the Bitcoin blockchain which is growing over time and hence it's wise to account for future growth too when setting up your system. It's also possible to run a pruned version of the Bitcoin blockchain which would take up a lot less storage space and is probably what most will end up doing eventually. 

The following is sufficient to run a Lightning Node such as Umbrel. 

- 4GB of RAM
- 600+ GB of storage, SSD highly preferable.

You should pick your hardware according to your reasons for running a node. How critical is 24/7 uptime and how robust do you want your setup to be? Do you want to be able to account for disk failure? Here is a basic run through of popular options. 

=Rusty old laptop=
If you have an old laptop or computer lying around somewhere, running a node on it can be a feasible endeavor as long as it has enough storage space and RAM. However, laptops are generally not designed for 24/7 operation over long periods of time and if the laptop is old, be prepared for hardware failure at some point. I'd generally advise against using such a system for a Lightning node you plan to put any serious liquidity into.

=Single board computer (Raspberry Pi)=
A popular hardware platform for node operators. The Raspberry Pi is a single board computer that can be expanded with external storage to make up a perfectly suitable system. It's cheap to buy and the form factor makes it very appealing for something that needs to run 24/7. It's still not a particularly robust platform however. The SD cards tend to fail quite frequently, especially on systems with any sort of heavy IO, so make sure you get a high quality card. 
=Professional level consumer / Server Grade Setup=
The Zen 2/3 chips from AMD support ECC memory and many motherboards come with multiple NVMe slots. You can easily build yourself a very powerful and robust bare metal solution for sub-$1500 that will last you many years of growth.

=Enterprise Server Grade Setup=
If you're serious about creating a more robust hardware setup, you might want to consider enterprise grade hardware. The cost is significant but you can use the hardware for a large selection of services, not just a Lightning Node. 

As an example, consider the following setup.

- A 1U SuperMicro server with 4 drive bays, a single CPU and numerous RAM slots for easy expansion.
- 2-4 large capacity SSD's 

For the host operating system, Proxmox is a great open source virtualization platform based on QEMU/KVM. You can then set up your disks as a ZFS storage pool with mirroring which instantly gets you local storage redundancy. If one disk fails, you won't lose any data and when you replace the drive the mirroring brings the new disk up to speed automatically. Couple that with ZFS snapshots that can be created at no cost (due to CoW) and sent off site and you have a pretty robust and reliable setup with hardware that is designed to take a beating 24/7 for years. Be aware that you should never restore an old image of an LND database, doing so could expose you to risk of transmitting an old state and loss of funds.

Your Lightning node software of choice can then be run in a VM.</text>
      <sha1>1jhkhft4ix9pflk3erem8dtscwoc7hw</sha1>
    </revision>
  </page>
  <page>
    <title>Notes on Privacy</title>
    <ns>0</ns>
    <id>1262</id>
    <revision>
      <id>2264</id>
      <parentid>2261</parentid>
      <timestamp>2022-02-03T17:34:45Z</timestamp>
      <contributor>
        <username>Itsneski</username>
        <id>20</id>
      </contributor>
      <origin>2264</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="4860" sha1="3tl6q8zwr480yz931m8itsvcoph4cp0" xml:space="preserve">=Important Notes on Privacy=

Before you jump headfirst into running a lightning node, you must ask yourself

* What is your objective to operate a node? (making payments to friends and family, receiving payments, merchant node, routing node, any other?)
* How much of your privacy you are willing to give up in order to pursue your objective? Remember it is your own choice.

The notes cannot be comprehensive and you must be willing to do your own research. Do not trust. Verify. Internet is full of dangerous people and not all advice you receive is comprehensive however "expert" the person providing it appears. Listen to all, decide for your own.

== Learn not to rely on outside 3rd party apps ==

We tend to rely on 3rd party apps in our day-to-day lives, whether it's Twitter, Facebook, and other apps. In Lightning, your ultimate goal is to become an independent economic actor where your decisions are made entirely based on the data collected by your node, nothing else. Your lighting node contains information about all of your node's transactions, whether it's payments, forwards, or payment probes. By using this data you can figure out what nodes to connect to, what nodes are expensive/cheap, what nodes frequently show up in your payment routes, etc. In other words, your node's data is sufficient for you to function as an independent economic actor on the lightning network.

There are two types of apps that node operators tend to use: apps that are installed directly on their node and that rely on node's data, nothing else; and apps that reside outside of their node. Examples of the former are Ride The Lightning and Thunderhub. Examples of the latter are amboss.space, 1ml.space, lnrouter.app, and other apps.

Apps like Ride The Lightning and Thunderhub present much less of a privacy risk than the outside apps, since they act based on your node's data. When you access those apps, either via ethernet or tor, you access them directly on your node without intermediaries. The story is very different with outside 3rd apps. When you access say amboss.space from clearnet, assume that your IP address will be tracked, recorded, and associated with your node public address. This may have the unintended consequences of having a record that associates your node with your actual identity. Same with apps like 1ml.space, lnrouter.app, and others.

In summary, learn to rely on your node's data for any decisions you need to make, not on outside 3rd party apps. If you do need to use outside 3rd party apps, take extra precaution to access those apps via VPN or a tor browser. At least then there is less of a chance for you to dox your identity to those apps.

== SOME LIGHTNING PRIVACY NOTES/REFERENCES ==

Remember some of these might not use practical if your intention is to run a routing node. As always, do your own research. 

Telgram: 

If your Telegram account is tied to your phone and legal identity, then if you announce your node publicly on telegram you are tying your node to your phone and your legal identity, 
You can change your privacy settings in Telegram to mask your phone number and use nym.  However, governments can still get this data. 
There are also risks to communicating about your particular node on all public channels as well regarding the metadata you leak. 
For example, a particular way of writing

Cheeserobot:  
Resolves IDs to TG handles. 
There are privacy risks when TG is attached to a real-world identity,  online pseudonym, or IP.  
Cheeserobot is also a closed source service, so it’s not public information everything that Cheeserobot does.

Privacy Suggestions For senders
 1. One UTXO per node on a private channel. Ideally mixed and for the complete amount. Pick a well-connected node to route THROUGH them.  
 2. Do not send directly to your desired channel partner. Pick a well-connected node to route THROUGH them.  
 3. When done, deplete your channel completely and close it out.
 4. Given enough time, this channel would be known to the network and probe-able, so do not keep these disposable nodes for long.
 5. Send payments in small increments.

Privacy Suggestions For receivers
 1. Never open a channel with a UTXO you own. Get others to open a channel with their UTXO or source a UTXO to open a channel with. Some sources could be Bitrefill Thor, Lightning Lab’s Loop Out, LNBig, Yalls, etc.
 2. If you want to send some funds on-chain, either use a service like Loop Out or close the channel and mix your funds first.
 3. Use Tor only and do not use any sort of alias. Also use a VPN as Tor does not encrypt all data. 
 4. Do not share invoices publicly.
 5. Do not tell others you own a particular node.
 6. Do not create invoices with memos that have revealing information.

== Resources ==
Current State of Lightning: https://abytesjourney.com/lightning-privacy/</text>
      <sha1>3tl6q8zwr480yz931m8itsvcoph4cp0</sha1>
    </revision>
  </page>
  <page>
    <title>Opening channels</title>
    <ns>0</ns>
    <id>18</id>
    <revision>
      <id>2257</id>
      <parentid>2175</parentid>
      <timestamp>2022-01-27T11:22:21Z</timestamp>
      <contributor>
        <username>VS</username>
        <id>18</id>
      </contributor>
      <minor/>
      <origin>2257</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="7029" sha1="1lbgjfzdmzpu0bjnkdhacli9we4paf7" xml:space="preserve">&lt;languages/&gt;
&lt;translate&gt;
&lt;!--T:1--&gt;
The first question which a pleb has after (or even before) the node is synced "'''who should I open channel with?'''"

&lt;!--T:2--&gt;
I would say - '''with a mentor who is willing to spend time with you, teach you the ropes, mentor and guide you to be a better node runner'''

&lt;!--T:3--&gt;
Of course in the age of google, the internet, and instant gratification, this thought can be frowned upon but there is no replacement for a mentor in your journey as node runner.


=== Add Liquidity === &lt;!--T:4--&gt;

&lt;!--T:5--&gt;
Generate a Lightning wallet and add some funds so that you can open channels. Keep in mind that PLEBNET prefers [[Special:MyLanguage/#keep-it-girthy|girthy channels]], so fund your node accordingly.


=== Reserve For Anchor Channels === &lt;!--T:6--&gt;

&lt;!--T:7--&gt;
If you use Anchor Channels (enabled by default in [https://github.com/lightningnetwork/lnd/releases lnd13.1]), lnd keeps a UTXO on your node as a reserve for commitment fees. The reserve amount is 10K sats multiplied by the number of channels you have, up to a [https://github.com/lightningnetwork/lnd/pull/5274 maximum of 100K Sats].

&lt;!--T:8--&gt;
If you have only one UTXO on your node on-chain wallet, you can get into issues that you are unable to spend that UTXO for opening channels. It is therefore suggested that you keep at least one 100K UTXO on your on-chain wallet. 

&lt;!--T:9--&gt;
To do that, 

&lt;!--T:10--&gt;
# In umbrel dashboard - bitcoin wallet - select deposit. It will generate a new address. Copy that.
# In umbrel dashboard - bitcoin wallet - select withdraw. Page the address generated in step 1 above here and choose the amount 100000 Sats
# Select low fee 1 Sat/Vb and send. It will create a UTXO of 100K Sats on your node which will be used for Anchor Channels once there is at least 1 on-chain confirmation of this transaction.


=== Find Nodes in PLEBNET Telegram Group === &lt;!--T:11--&gt;

&lt;!--T:12--&gt;
If you’re not yet able or willing to offer girthy channels and just want to get started with a smaller amount of sats, [https://amboss.space/node/0381de1709efbda38f9afd2d47399caa19a2630c0c795acd24755efa442685fc7d Turgidson] is for PLEBNET newbies and will accept channels as low as 20k.

&lt;!--T:13--&gt;
You may want to check out [https://www.youtube.com/watch?v=qnj-ix45tVw Lightning Routing: The First 30 Days] to get some ideas

&lt;!--T:14--&gt;
Otherwise, you’ll need to find some other nodes in PLEBNET to open channels with.

&lt;!--T:15--&gt;
You can go to http://graph.plebnet.org/ to see the current visual graph of nodes, or type &lt;code&gt;/graph@cheeserobot group&lt;/code&gt; in the PLEBNET chat. &lt;code&gt;/groupnodes@cheeserobot&lt;/code&gt; will output a list of the 50 most recent members and nodes. You can contact plebs form the graph or list and see if they’d like to open a channel.

&lt;!--T:16--&gt;
You can also just ask in the PLEBNET channel if anyone is interested in opening a channel with you.


=== Other Channel Sources === &lt;!--T:17--&gt;

&lt;!--T:18--&gt;
For a two-way routing, required to both send and receive sats, you need a good balance of inbound and outbound liquidity. Most new node runners end up with a lot of outbound liquidity because they are the ones opening channels. [[Getting_Inbound_Liquidity | Here is how you can get some inbound liquidity]]

=== Keep It Girthy === &lt;!--T:20--&gt;

&lt;!--T:21--&gt;
It’s best to have fewer big channels with more sats than it is to have many smaller ones. The recommended minimum channel size is 2 million sats, which will cost you 1 million sats per channel if you are trying to have an even balance of inbound and outbound liquidity.


=== Balanced Channels === &lt;!--T:22--&gt;

&lt;!--T:23--&gt;
The idea is to have balanced channels. This means that there is an equal amount of sats between each node on the channel.

&lt;!--T:24--&gt;
For example, if &lt;code&gt;Node A&lt;/code&gt; opens a channel with &lt;code&gt;Node B&lt;/code&gt; for 2m sats, it will start entirely on their end. &lt;code&gt;Node A&lt;/code&gt; will want to find a way to have 1m sats on each side of the channel.

&lt;!--T:25--&gt;
There are several different ways to accomplish this.


==== “Girthy (formerly known as Ghetto) Submarine Swap” (aka: ‘trust-required’ dual-funded channel) ==== &lt;!--T:26--&gt;

&lt;!--T:27--&gt;
'''ONLY DO THIS WITH ESTABLISHED AND TRUSTED PLEBNET NODES! IT IS POSSIBLE TO LOSE SATS DOING THIS.'''

&lt;!--T:28--&gt;
# &lt;code&gt;Node A&lt;/code&gt; opens a channel with X sats.
# &lt;code&gt;Node B&lt;/code&gt; sends a Lightning invoice for half of the amount X sats that was opened on the channel
# The &lt;code&gt;Node A&lt;/code&gt; operator sends the address of their preferred on-chain Bitcoin wallet to the operator of &lt;code&gt;Node B&lt;/code&gt;
# The &lt;code&gt;Node B&lt;/code&gt; operator sends half of the amount X sats of the opened channel to the Bitcoin wallet of the operator of &lt;code&gt;Node A&lt;/code&gt; from step 3
# &lt;code&gt;Node A&lt;/code&gt; pays the Lightning invoice

&lt;!--T:29--&gt;
In some other versions, the swap is executed as below

&lt;!--T:30--&gt;
# you agree with NODE B you trust to open a 2X channel and at the time of open you push X towards them (i.e you gift them X on LN)
# In return NODE B pay X back to you at your on-chain address. (this is based on trust. Usually, people are honourable because they don't want to spoil their reputation for a few dollars but you never know).
# End result you have a 2X channel with X local X remote. And you have X on-chain to open another channel.


==== MEG (aka: ‘trustless’ dual-funded channel) - Mutually Exchanged Girth ==== &lt;!--T:31--&gt;

&lt;!--T:32--&gt;
With the support for internal funding added, adding balanced channel is now a piece of cake. All you need is a willing peer.

&lt;!--T:33--&gt;
Alex Bosworth’s CLI tool, [https://github.com/alexbosworth/balanceofsatoshis Balance of Satoshis] utilizes keysend to add this functionality to LND (which does not natively support it, yet)

&lt;!--T:34--&gt;
&lt;pre&gt;Please also ensure that your boss 10.10.2 or higher and node.js/npm software is up to date before attempting this.&lt;/pre&gt;

&lt;!--T:35--&gt;
&lt;pre&gt;Pre-req:  make sure NODE 1 and NODE 2 have keysend enabled (this is the default for Umbrel) and at least 1 channel already established to integrate you into the lightning network (you need a path out for key send to new peering node for the whole process to work)

&lt;!--T:36--&gt;
(NODE 1: Alice)
(0) Run: bos open-balanced-channel
(1) enter remote node public key
(2) enter full channel size
(3) enter fee rate
(4) select Y if you want to fund from internal (node wallet) or else use an external wallet to provide the signed transaction for the exact details provided. copy the signed_transaction if you followed external funding.

&lt;!--T:37--&gt;
(NODE 2: Bob)
(0) Run: bos open-balanced-channel (it should see the request from node1 at this point)
(1) agree with funding rate (y/n)
(2) press Y for internal funding (node wallet) or else use an external wallet to provide the signed transaction for the exact details provided. copy the signed_transaction if you followed external funding.
(3) hit enter and this should work.

&lt;!--T:38--&gt;
check via: lncli pendingchannels
&lt;/translate&gt;</text>
      <sha1>1lbgjfzdmzpu0bjnkdhacli9we4paf7</sha1>
    </revision>
  </page>
  <page>
    <title>Opening channels/en</title>
    <ns>0</ns>
    <id>553</id>
    <revision>
      <id>2022</id>
      <parentid>1965</parentid>
      <timestamp>2021-10-21T08:23:59Z</timestamp>
      <contributor>
        <username>FuzzyBot</username>
        <id>29</id>
      </contributor>
      <comment>Updating to match new version of source page</comment>
      <origin>2022</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="9142" sha1="or8hzyzz78ykrcuh9ymwfohhobgtde6" xml:space="preserve">&lt;languages/&gt;
The first question which a pleb has after (or even before) the node is synced "'''who should I open channel with?'''"

I would say - '''with a mentor who is willing to spend time with you, teach you the ropes, mentor and guide you to be a better node runner'''

Of course in the age of google, the internet, and instant gratification, this thought can be frowned upon but there is no replacement for a mentor in your journey as node runner.


=== Add Liquidity ===

Generate a Lightning wallet and add some funds so that you can open channels. Keep in mind that PLEBNET prefers [[Special:MyLanguage/#keep-it-girthy|girthy channels]], so fund your node accordingly.


=== Reserve For Anchor Channels ===

If you use Anchor Channels (enabled by default in [https://github.com/lightningnetwork/lnd/releases lnd13.1]), lnd keeps a UTXO on your node as a reserve for commitment fees. The reserve amount is 10K sats multiplied by the number of channels you have, up to a [https://github.com/lightningnetwork/lnd/pull/5274 maximum of 100K Sats].

If you have only one UTXO on your node on-chain wallet, you can get into issues that you are unable to spend that UTXO for opening channels. It is therefore suggested that you keep at least one 100K UTXO on your on-chain wallet. 

To do that, 

# In umbrel dashboard - bitcoin wallet - select deposit. It will generate a new address. Copy that.
# In umbrel dashboard - bitcoin wallet - select withdraw. Page the address generated in step 1 above here and choose the amount 100000 Sats
# Select low fee 1 Sat/Vb and send. It will create a UTXO of 100K Sats on your node which will be used for Anchor Channels once there is at least 1 on-chain confirmation of this transaction.


=== Find Nodes in PLEBNET Telegram Group ===

If you’re not yet able or willing to offer girthy channels and just want to get started with a smaller amount of sats, [https://amboss.space/node/0381de1709efbda38f9afd2d47399caa19a2630c0c795acd24755efa442685fc7d Turgidson] is for PLEBNET newbies and will accept channels as low as 20k.

You may want to check out [https://www.youtube.com/watch?v=qnj-ix45tVw Lightning Routing: The First 30 Days] to get some ideas

Otherwise, you’ll need to find some other nodes in PLEBNET to open channels with.

You can go to http://graph.plebnet.org/ to see the current visual graph of nodes, or type &lt;code&gt;/graph@cheeserobot group&lt;/code&gt; in the PLEBNET chat. &lt;code&gt;/groupnodes@cheeserobot&lt;/code&gt; will output a list of the 50 most recent members and nodes. You can contact plebs form the graph or list and see if they’d like to open a channel.

You can also just ask in the PLEBNET channel if anyone is interested in opening a channel with you.


=== Other Channel Sources ===

For a two-way routing, required to both send and receive sats, you need a good balance of inbound and outbound liquidity. Most new node runners end up with a lot of outbound liquidity because they are the ones opening channels. Here is how you can get some inbound liquidity:

* Make a payment to someone, buy something from a merchant, make a donation to a charity or project which accepts Lightning payment. All of these will move sats from your local to remote and you will naturally get a balanced channel.
* Make sure you have a node alias (visible on graph - check [https://amboss.space/ amboss]), have public channels open and have 2-4M capacity, Add BCash_Is_Trash &lt;code&gt;0298f6074a454a1f5345cb2a7c6f9fce206cd0bf675d177cdbf0ca7508dd28852f&lt;/code&gt; or &lt;code&gt;0298f6074a454a1f5345cb2a7c6f9fce206cd0bf675d177cdbf0ca7508dd28852f@73.119.255.56:9735&lt;/code&gt; as a peer (do not open channel). They might open channel to you.
* [https://lightningnetwork.plus/ Lightning Network Plus] - to create swaps with other node runners. You open a channel to someone and someone else opens a channel to you. You can make a triangle, square, pentagon. 
* [https://lightningto.me/ Get a balanced channel from ln2me] - you open a channel to them and move sats to them (this is an element of trust). After the channel is opened, they pay you back on-chain. It is an implementation of [https://plebnet.wiki/wiki/Opening_channels#.E2.80.9CGirthy_.28formerly_known_as_Ghetto.29_Submarine_Swap.E2.80.9D_.28aka:_.E2.80.98trust-required.E2.80.99_dual-funded_channel.29 GSS (see blow)]
* [https://community.getumbrel.com/t/instructions-to-get-an-incoming-channel-from-lnbig-with-umbrel/1541 Buying from LNBIG with Umbrel] - you pay for the inbound liquidity. This can be expensive but is usually a popular route.
* [https://github.com/Rings-of-Fire/ring-of-fire/wiki Ring of Fire] - Another swap service similar to LN+
* [https://mainnet.lightningconductor.net/ Lightning Conductor] - They open channel back to you if you open 500K channel to them.
* [https://community.getumbrel.com/t/opening-channels-requests/66 Umbrel Opening Channel Requests]
* You can make a payment to your own custodial wallet like [https://www.walletofsatoshi.com WoS] (Wallet of Satoshi), [https://strike.me Strike], [https://muun.com Muun], [https://breez.technology Breez] or other swap sites you trust and then you can withdraw BTC on-chain from these wallets. The cost varies a lot and you need to do your research.
* LOOP out. This is a trustless service to send payment on lightning and receiving on-chain. It can cost a lot and you may have to make a lot of attempts before you get a route.
* You can ask on PlebNet for plebs to open a channel to you. You can offer to rebalance or cover their costs.
* You can pay someone to open a channel to you on services like [ https://kriptode.com/satsforlikes/index.html sats4like]

=== Keep It Girthy ===

It’s best to have fewer big channels with more sats than it is to have many smaller ones. The recommended minimum channel size is 2 million sats, which will cost you 1 million sats per channel if you are trying to have an even balance of inbound and outbound liquidity.


=== Balanced Channels ===

The idea is to have balanced channels. This means that there is an equal amount of sats between each node on the channel.

For example, if &lt;code&gt;Node A&lt;/code&gt; opens a channel with &lt;code&gt;Node B&lt;/code&gt; for 2m sats, it will start entirely on their end. &lt;code&gt;Node A&lt;/code&gt; will want to find a way to have 1m sats on each side of the channel.

There are several different ways to accomplish this.


==== “Girthy (formerly known as Ghetto) Submarine Swap” (aka: ‘trust-required’ dual-funded channel) ====

'''ONLY DO THIS WITH ESTABLISHED AND TRUSTED PLEBNET NODES! IT IS POSSIBLE TO LOSE SATS DOING THIS.'''

# &lt;code&gt;Node A&lt;/code&gt; opens a channel with X sats.
# &lt;code&gt;Node B&lt;/code&gt; sends a Lightning invoice for half of the amount X sats that was opened on the channel
# The &lt;code&gt;Node A&lt;/code&gt; operator sends the address of their preferred on-chain Bitcoin wallet to the operator of &lt;code&gt;Node B&lt;/code&gt;
# The &lt;code&gt;Node B&lt;/code&gt; operator sends half of the amount X sats of the opened channel to the Bitcoin wallet of the operator of &lt;code&gt;Node A&lt;/code&gt; from step 3
# &lt;code&gt;Node A&lt;/code&gt; pays the Lightning invoice

In some other versions, the swap is executed as below

# you agree with NODE B you trust to open a 2X channel and at the time of open you push X towards them (i.e you gift them X on LN)
# In return NODE B pay X back to you at your on-chain address. (this is based on trust. Usually, people are honourable because they don't want to spoil their reputation for a few dollars but you never know).
# End result you have a 2X channel with X local X remote. And you have X on-chain to open another channel.


==== MEG (aka: ‘trustless’ dual-funded channel) - Mutually Exchanged Girth ====

With the support for internal funding added, adding balanced channel is now a piece of cake. All you need is a willing peer.

Alex Bosworth’s CLI tool, [https://github.com/alexbosworth/balanceofsatoshis Balance of Satoshis] utilizes keysend to add this functionality to LND (which does not natively support it, yet)

&lt;pre&gt;Please also ensure that your boss 10.10.2 or higher and node.js/npm software is up to date before attempting this.&lt;/pre&gt;

&lt;pre&gt;Pre-req:  make sure NODE 1 and NODE 2 have keysend enabled (this is the default for Umbrel) and at least 1 channel already established to integrate you into the lightning network (you need a path out for key send to new peering node for the whole process to work)

(NODE 1: Alice)
(0) Run: bos open-balanced-channel
(1) enter remote node public key
(2) enter full channel size
(3) enter fee rate
(4) select Y if you want to fund from internal (node wallet) or else use an external wallet to provide the signed transaction for the exact details provided. copy the signed_transaction if you followed external funding.

(NODE 2: Bob)
(0) Run: bos open-balanced-channel (it should see the request from node1 at this point)
(1) agree with funding rate (y/n)
(2) press Y for internal funding (node wallet) or else use an external wallet to provide the signed transaction for the exact details provided. copy the signed_transaction if you followed external funding.
(3) hit enter and this should work.

check via: lncli pendingchannels</text>
      <sha1>or8hzyzz78ykrcuh9ymwfohhobgtde6</sha1>
    </revision>
  </page>
  <page>
    <title>Opening channels/fr</title>
    <ns>0</ns>
    <id>1164</id>
    <revision>
      <id>2055</id>
      <parentid>2026</parentid>
      <timestamp>2021-10-24T10:11:56Z</timestamp>
      <contributor>
        <username>ADssx</username>
        <id>38</id>
      </contributor>
      <comment>Created page with "Dans certaines version, le swap est exécuté de la façon suivante :"</comment>
      <origin>2055</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="9999" sha1="jwj9g38glljtvhbrbry698w4w3j7q2o" xml:space="preserve">&lt;languages/&gt;
La première question de tout plébéien après la synchronisation de son nœud : « Avec qui devrais-je ouvrir un canal ? »

Réponse : '''Avec un mentor qui est disposé à passer du temps à vous aider, vous apprendre les bases, vous former et vous guider pour devenir un meilleur gestionnaire de nœud.'''

Évidemment, à l'heure de Google, d'internet et de la gratification immédiate, cela peut être mal vu mais rien ne pourra remplacer un bon mentor dans votre parcours pour devenir un gestionnaire de nœud.


== Ajouter de la liquidité ==

Créez un portefeuille Lightning et ajoutez-y de l'argent afin de pouvoir ouvrir des canaux. Ayez en tête que PlebNet préfère les [[Special:MyLanguage/#keep-it-girthy|gros canaux]] : financez votre nœud en conséquence !


== Réserve pour les canaux ancre (Anchor Channels) ==

Si vous utilisez des Anchor Channels (par défaut dans lnd 13.1+) alors lnd conserve vos UTXO sur votre nœud comme une réserve pour les frais d'ouverture (commitment fees). Le montant en réserve est 10k sats multiplié par votre nombre de canaux, avec [https://github.com/lightningnetwork/lnd/pull/5274 un maximum de 100k sats].

Si vous avez une seule [https://fr.wikipedia.org/wiki/Unspent_transaction_output UTXO] (Unspent transaction output) sur votre portefeuille on-chain, vous pouvez rencontrer des difficultés et être dans l'incapacité de dépenser cet UTXO pour ouvrir des canaux. Il est donc recommandé de garder au moins 100k UTXO sur votre portefeuille on-chain. 

Pour cela : 

# Sur le tableau de bord Umber - Bitcoin Wallet, sélectionnez "Deposit". Cela va générer une nouvelle adresse. Copiez cette adresse.
# Sélectionnez ensuite "Withdraw". Collez l'adresse générée à l'étape 1 ici et sélectionner un montant de 100000 sats.
# Sélectionner des frais bas de 1 sab/vb et envoyez la transaction. Cela va créer un UTXO de 100k sats sur votre nœud qui sera utilisé pour les anchor channels une fois que la transaction aura reçue au moins une confirmation on-chain.


== Trouver des nœuds sur le groupe Telegram PlebNet ==

Si vous n'êtes pas en mesure d'offrir de gros canaux et désirez juste commencer avec de plus petites sommes, [https://amboss.space/node/0381de1709efbda38f9afd2d47399caa19a2630c0c795acd24755efa442685fc7d Turgidson] est un nœud pour les débutants et il accepte les canaux à partir de 20k sats.

Conseils : la vidéo [https://www.youtube.com/watch?v=qnj-ix45tVw Lightning Routing: The First 30 Days] (« Routage sur Lightning : les 30 premiers jours ») donne de bonnes idées.

Sinon, you aurez besoin de trouver quelques autres nœuds sur PlebNet vers qui ouvrir des canaux.

Vous pouvez aller sur http://graph.plebnet.org/ pour consulter le graphe actuel des nœuds PlebNet. Vous pouvez aussi envoyer  &lt;code&gt;/graph@cheeserobot group&lt;/code&gt; dans le chat PlebNet. &lt;code&gt;/groupnodes@cheeserobot&lt;/code&gt; fournit une liste des 50 membres et nœuds les plus récents. Vous pouvez contacter la plèbe de ce graphe et de cette liste afin d'ouvrir un canal avec eux !

Vous pouvez aussi demander sur le groupe PlebNet si quelqu'un veut ouvrir un canal avec vous.


== Autres sources de canaux ==

Pour à la fois envoyer et recevoir des sats il faut un routage bidirectionnel. Pour cela il faut un bon équilibre de liquidité entrante et sortante. La plupart des nouveaux gestionnaires de nœuds on beaucoup de liquidité sortant car ce sont eux qui ont ouvert les canaux. Pour obtenir de la liquidité entrante vous pouvez :

* Payer quelqu'un, acheter à un marchand, faire une donation à une ONG ou à un projet qui accepte les paiements Lightning. Toutes ces actions envoie des sats de votre nœud local vers lquelqu'un et vous aller naturellement obtenir un canal mieux équilibré.
* Si vous avez défini un alias (visible sur le graph), que vous avez ouvert des canaux publics et que vous avez 2-4M sats de capacité au moins alors vous pouvez ajouter BCash_Is_Trash &lt;code&gt;0298f6074a454a1f5345cb2a7c6f9fce206cd0bf675d177cdbf0ca7508dd28852f@73.119.255.56:9735&lt;/code&gt; comme pair (sans pour autant ouvrir un canal vers eux). Ils peuvent ensuite ouvrir un canal vers vous.
* [https://lightningnetwork.plus/ Lightning Network Plus] (LN+) : pour créer des swaps avec d'autres gestionnaires de nœuds. Vous ouvrez un canal vers quelqu'un et quelqu'un d'autre ouvre un canal vers vous. Vous pouvez ainsi faire un triangle, un carré ou un pentagone.
* [https://lightningto.me/ ln2me] : vous ouvrez un canal vers eux et vous leur envoyer des sats (ce qui nécessite de leur faire confiance). Une fois le canal ouvert, ils vous remboursent on-chain. C'est une implémentation de GSS (voir plus bas).
* [https://community.getumbrel.com/t/instructions-to-get-an-incoming-channel-from-lnbig-with-umbrel/1541 Acheter à LNBIG avec Umbrel] : vous pouvez acheter de la liquidité entrante. Cette solution, parfois onéreuse, est assez populaire.
* [https://github.com/Rings-of-Fire/ring-of-fire/wiki Ring of Fire] : service similaire à Lightning Network Plus
* [https://mainnet.lightningconductor.net/ Lightning Conductor] : ils ouvrent un canal vers vous si vous ouvrez un canal d'au moins 500k sats vers eux.
* [https://community.getumbrel.com/t/opening-channels-requests/66 Umbrel Opening Channel Requests]
* Vous pouvez faire un paiement vers votre propre portefeuille comme WoS, Strike, Muun ou Breez, ou encore d'autres sites de swap (en qui vous avez confiance), puis vous pouvez retirer on-chain sur depuis ces portefeuilles. Le coût varie beaucoup, faites vos propres recherches sur le sujet.
* LOOP out : service "trustless" pour envoyer un paiement sur Lightning et le recevoir on chain. Cela peut coûter très cher et cela nécessite parfois de nombreux essais avant d'obtenir une route.
* Vous pouvez demander sur PlebNet à la plèbe d'ouvrir des canaux vers vous. Vous pouvez proposer de rebalancer ou bien de couvrir leurs coûts.
* Vous pouvez payer quelqu'un pour qu'ils ouvrent un canal vers vous sur [ https://kriptode.com/satsforlikes/index.html sats4like]

== La taille compte ==

Il est préférable d'avoir un nombre limité de gros canaux que d'avoir de multiples petits canaux. La taille compte ! La taille minimale recommandée pour un canal est de 2 millions de sats, ce qui vous coûtera 1 million de sats par canal si vous voulez avoir un équilibre entre liquidité entrante et sortante.


== Canaux équilibrés ==

L'objectif est d'avoir des canaux équilibrés. Cela signifie que chaque nœud de part et d'autre du canal a le même nombre de sats.

Par exemple si &lt;code&gt;Node A&lt;/code&gt; ouvre un canal avec &lt;code&gt;Node B&lt;/code&gt; pour 2 million de sats, alors ces sats seront initialement intégralement de son côté. &lt;code&gt;Node A&lt;/code&gt; doit trouver un moyen d'avoir 1 million de sats de chaque côté du canal.

Il y a différents moyens d'accomplir cela :


=== Girth Submarine Swap (GSS) ===

'''NE FAITES CELA QU'AVEC DES NŒUDS PLEBNET EN QUI VOUS AVEZ CONFIANCE ! VOUS POUVEZ PERDRE VOS SATS AVEC CETTE MÉTHODE.'''

# &lt;code&gt;Node A&lt;/code&gt; ouvre un canal avec X sats,
# &lt;code&gt;Node B&lt;/code&gt; envoie une facture Lightning (invoice) pour la moitié de X sats,
# L'opérateur de &lt;code&gt;Node A&lt;/code&gt; envoie l'adresse de leur portefeuille (wallet) onchain à l'opérateur de &lt;code&gt;Node B&lt;/code&gt;,
# L'opérateur de &lt;code&gt;Node B&lt;/code&gt; envoie la moitié de X sats au portefeuille de l'opérateur de &lt;code&gt;Node A&lt;/code&gt; défini à l'étape  3,
# &lt;code&gt;Node A&lt;/code&gt; paye la facture Lightning.

Dans certaines version, le swap est exécuté de la façon suivante :

&lt;div lang="en" dir="ltr" class="mw-content-ltr"&gt;
# you agree with NODE B you trust to open a 2X channel and at the time of open you push X towards them (i.e you gift them X on LN)
# In return NODE B pay X back to you at your on-chain address. (this is based on trust. Usually, people are honourable because they don't want to spoil their reputation for a few dollars but you never know).
# End result you have a 2X channel with X local X remote. And you have X on-chain to open another channel.
&lt;/div&gt;


=== Mutually Exchanged Girth (MEG) ===

&lt;div lang="en" dir="ltr" class="mw-content-ltr"&gt;
With the support for internal funding added, adding balanced channel is now a piece of cake. All you need is a willing peer.
&lt;/div&gt;

&lt;div lang="en" dir="ltr" class="mw-content-ltr"&gt;
Alex Bosworth’s CLI tool, [https://github.com/alexbosworth/balanceofsatoshis Balance of Satoshis] utilizes keysend to add this functionality to LND (which does not natively support it, yet)
&lt;/div&gt;

&lt;div lang="en" dir="ltr" class="mw-content-ltr"&gt;
&lt;pre&gt;Please also ensure that your boss 10.10.2 or higher and node.js/npm software is up to date before attempting this.&lt;/pre&gt;
&lt;/div&gt;

&lt;div lang="en" dir="ltr" class="mw-content-ltr"&gt;
&lt;pre&gt;Pre-req:  make sure NODE 1 and NODE 2 have keysend enabled (this is the default for Umbrel) and at least 1 channel already established to integrate you into the lightning network (you need a path out for key send to new peering node for the whole process to work)
&lt;/div&gt;

&lt;div lang="en" dir="ltr" class="mw-content-ltr"&gt;
(NODE 1: Alice)
(0) Run: bos open-balanced-channel
(1) enter remote node public key
(2) enter full channel size
(3) enter fee rate
(4) select Y if you want to fund from internal (node wallet) or else use an external wallet to provide the signed transaction for the exact details provided. copy the signed_transaction if you followed external funding.
&lt;/div&gt;

&lt;div lang="en" dir="ltr" class="mw-content-ltr"&gt;
(NODE 2: Bob)
(0) Run: bos open-balanced-channel (it should see the request from node1 at this point)
(1) agree with funding rate (y/n)
(2) press Y for internal funding (node wallet) or else use an external wallet to provide the signed transaction for the exact details provided. copy the signed_transaction if you followed external funding.
(3) hit enter and this should work.
&lt;/div&gt;

Avec lnd, vérifiez avec la commande suivante : &lt;code&gt;lncli pendingchannels&lt;/code&gt;</text>
      <sha1>jwj9g38glljtvhbrbry698w4w3j7q2o</sha1>
    </revision>
  </page>
  <page>
    <title>Plebnet Playground</title>
    <ns>0</ns>
    <id>26</id>
    <revision>
      <id>2420</id>
      <parentid>2419</parentid>
      <timestamp>2022-04-13T16:49:58Z</timestamp>
      <contributor>
        <username>Xenonfun</username>
        <id>3</id>
      </contributor>
      <origin>2420</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="8821" sha1="cptfehnf5zbukck92ht7ldgfwa80k9k" xml:space="preserve">&lt;languages/&gt;
&lt;translate&gt;


== Plebnet Playground / plebnet.fun == &lt;!--T:1--&gt;

&lt;!--T:2--&gt;
[[File:PlebnetPlayground.jpg|450px|alt=Plebnet Playground Logo]]

&lt;!--T:3--&gt;
Signet based bitcoin / lnd package which will allow plebs to learn and use lightning network without having to take any financial risks.

&lt;!--T:4--&gt;
Github Repo: https://github.com/PLEBNET-PLAYGROUND/plebnet-playground-docker



== Progress == &lt;!--T:5--&gt;

&lt;!--T:6--&gt;
* Signet master node that handles block production - DONE
* CLI docker setup for bitcoind &amp; lnd under tor - DONE
* ThunderHub and RTL GUI containers added - DONE
* Faucet API to allow plebs to obtain some coins - 'DONE
* Faucet Web UI - DONE
* RPi4 docker images - In future
* Automated traffic so people can get routes - RUNNING
* Jupyter Dashboard Project - IN PROGRESS

== Signet Reference Material == &lt;!--T:7--&gt;

&lt;!--T:8--&gt;
[https://en.bitcoin.it/wiki/Signet#Custom_Signet Signet Setup Wiki]


== Master node info == &lt;!--T:9--&gt;

&lt;!--T:10--&gt;
{| class="wikitable"
| signetchallenge=512102ee856c56a5aaadd1656f849bafa4c9dacc86a2878fe546c6189185f842ae2c1851ae 
|}

&lt;!--T:11--&gt;
{| class="wikitable"
|+ Bitcoin Endpoints
|-
! Address !! Port 
|-
|104.131.10.218 || 38333     
|-
|2604:a880:800:14::2c:9000 || 38333    
|-
|6megrst422lxzsqvshkqkg6z2zhunywhyrhy3ltezaeyfspfyjdzr3qd.onion || 38333     
|-
|cidcbr4jpvorsegnk5ehkpydf57fpl2vw5cdzvqre74byv4knv5a.b32.i2p || 38333     
|}


&lt;!--T:12--&gt;
{| class="wikitable"
|+ Lightning Endpoints 
|-
! NodeId@Address:Port
|-
|03ee9d906caa8e8e66fe97d7a76c2bd9806813b0b0f1cee8b9d03904b538f53c4e@104.131.10.218:9735     
|-
|03ee9d906caa8e8e66fe97d7a76c2bd9806813b0b0f1cee8b9d03904b538f53c4e@xrybvh4myas4rr3p6itf5ib6zqtrfb5gyb5246bakifev5s62rlicyad.onion:9735      
|-
|03ee9d906caa8e8e66fe97d7a76c2bd9806813b0b0f1cee8b9d03904b538f53c4e@[2604:a880:800:14::2c:9000]
|}

{| class="wikitable"
|+ Watchtower Endpoints 
|-
! NodeId@Address:Port
|-
|02c6d32c0596ad26c34cd1978ee72c4ec9ab6e2a82327bc26c3b90c8c14e2e5d96@uoyands3phvswnej6by67rblju3n5syxxaadbzkalmjrx72nmqbgvjqd.onion:9911
|-
|031557cea4a1aa39400801273d5027a419638aa1d6e4d5e77ee8a72b049d1f67fb@3zlvbas7neqmr75zbwnwugqkxl7qlzqkyph25c6uh74slrugznxzwmqd.onion:9911
|-

|}

Block Explorer: https://explorer.plebnet.fun/

== Current Infrastructure == &lt;!--T:13--&gt;

&lt;!--T:14--&gt;
{| class="wikitable"
|-
! Role !! Machine Type !! Cost
|-
|Block producer / LND node || Digital Ocean 2 GB Memory / 2 AMD vCPU / 60 GB Disk  || $19.44      
|}



== Aliases for easy management == &lt;!--T:15--&gt;

 &lt;!--T:16--&gt;
&lt;nowiki&gt;
alias lncli-signet='lncli -n signet '
 &lt;/nowiki&gt;



== lnd.conf == &lt;!--T:17--&gt;

&lt;!--T:18--&gt;
FYI, LND did not add signet support until v0.13.0+, please make sure you are on this version or higher before attempting

 &lt;!--T:19--&gt;
&lt;nowiki&gt;

&lt;!--T:20--&gt;
[Application Options]

&lt;!--T:21--&gt;
listen=0.0.0.0:9735
listen=[::1]:9736
rpclisten=localhost:10009
rpclisten=[::1]:10010
minchansize=10000000
ignore-historical-gossip-filters=true
accept-keysend=true
accept-amp=true
allow-circular-route=true
numgraphsyncpeers=3
# INSERT YOUR ALIAS ON THE NEXT LINE!
alias=HelloJessica
# UNCOMMENT AND EDIT FILE PATH WITH CLEAR TEXT PASSWORD TO AUTO UNLOCK LND WALLET
#wallet-unlock-password-file=/path/to/unlock.password
#externalip=&lt;replace yours if using public IP&gt;
[Bitcoin]
bitcoin.active=true
bitcoin.mainnet=false
bitcoin.signet=true
bitcoin.signetseednode=104.131.10.218
bitcoin.node=bitcoind
bitcoin.dnsseed=0
[Bitcoind]
bitcoind.dir=/var/lib/bitcoind/
bitcoind.rpchost=localhost
bitcoind.rpcuser=bitcoin
bitcoind.rpcpass=bitcoin
bitcoind.zmqpubrawblock=tcp://127.0.0.1:28332
bitcoind.zmqpubrawtx=tcp://127.0.0.1:28333
[tor]
tor.active=true
tor.socks=9050
tor.control=localhost:9051
#password is set in your torrc if you use one below it is just set as a "hello"
tor.password=hello
tor.v3=true
[watchtower]
watchtower.listen=0.0.0.0:9911
watchtower.listen=[::1]:9912
[wtclient]
wtclient.active=true
wtclient.sweep-fee-rate=10
[protocol]
protocol.wumbo-channels=true

&lt;!--T:22--&gt;
&lt;/nowiki&gt;



== bitcoin.conf == &lt;!--T:23--&gt;

 &lt;!--T:24--&gt;
&lt;nowiki&gt;
listen=1
listenonion=1
signet=1
daemon=1
#rpcauth the password here is set as "bitcoin"
rpcauth=bitcoin:c8c8b9740a470454255b7a38d4f38a52$e8530d1c739a3bb0ec6e9513290def11651afbfd2b979f38c16ec2cf76cf348a
txindex=1
#Only include i2psam if you have install i2p
#i2psam=127.0.0.1:7656
server=1
dnsseed=0
[signet]
zmqpubrawblock=tcp://0.0.0.0:28332
zmqpubrawtx=tcp://0.0.0.0:28333
zmqpubhashblock=tcp://0.0.0.0:28334
wallet=/var/lib/bitcoind/signet/wallets
signetchallenge=512102ee856c56a5aaadd1656f849bafa4c9dacc86a2878fe546c6189185f842ae2c1851ae
proxy=127.0.0.1:9050
addnode=104.131.10.218:38333

&lt;!--T:25--&gt;
&lt;/nowiki&gt;



== /etc/tor/torrc == &lt;!--T:26--&gt;

&lt;!--T:27--&gt;
This example has a HashedControlPassword set as "please", you can create your own running '''tor --hash-password mynewpassword'''

 &lt;!--T:28--&gt;
&lt;nowiki&gt;
SocksPort 9050 # Default: Bind to localhost:9050 for local connections.
RunAsDaemon 1


&lt;!--T:29--&gt;
## The port on which Tor will listen for local connections from Tor
## controller applications, as documented in control-spec.txt.
ControlPort 9051
## If you enable the controlport, be sure to enable one of these
## authentication methods, to prevent attackers from accessing it.
HashedControlPassword 16:A170E9325684E5366021C2AA404D4CA5AAE0D6FFE947E60B939083EF61
CookieAuthentication 1
CookieAuthFileGroupReadable 1

&lt;!--T:30--&gt;
&lt;/nowiki&gt;



== notes from getting started with ubuntu 20.04 running in a VM == &lt;!--T:31--&gt;

&lt;!--T:32--&gt;
these notes are incomplete and may or may not help you get things working.

 &lt;!--T:33--&gt;
&lt;nowiki&gt;

&lt;!--T:34--&gt;
# Install and configure tor

&lt;!--T:35--&gt;
sudo apt install -y tor

&lt;!--T:36--&gt;
#we need to add some stuff to torrc so that lnd and bitcoind are allowed to set themselves up as a tor service, or else we get this error:
#unable to initialize tor controller: unable to connect to Tor server: dial tcp 127.0.0.1:9051: connect: connection refused


&lt;!--T:37--&gt;
#edit /etc/tor/torrc 

&lt;!--T:38--&gt;
SocksPort 9050 # Default: Bind to localhost:9050 for local connections.
RunAsDaemon 1

&lt;!--T:39--&gt;
#make sure tor is running and has picked up the changes to the config file
service tor start
service tor restart

&lt;!--T:40--&gt;
#install and configure bitcoin
#https://medium.com/@lukedashjr/how-to-securely-install-bitcoin-9bfeca7d3b2a
wget https://bitcoin.org/bin/bitcoin-core-0.21.1/bitcoin-0.21.1-x86_64-linux-gnu.tar.gz

&lt;!--T:41--&gt;
#gpg verification should go here

&lt;!--T:42--&gt;
tar xvf bitcoin-*tar.gz
sudo cp -vR bitcoin-*/* /usr/

&lt;!--T:43--&gt;
#edit ~/.bitcoin/bitcoin.conf

&lt;!--T:44--&gt;
#install and configure lnd
#https://github.com/lightningnetwork/lnd/releases

&lt;!--T:45--&gt;
wget https://github.com/lightningnetwork/lnd/releases/download/v0.13.1-beta/lnd-linux-amd64-v0.13.1-beta.tar.gz
tar xvf lnd-linux-amd64-v0.13.1-beta.tar.gz
cp lnd-linux-amd64-v0.13.1-beta/ln* /usr/local/bin/

&lt;!--T:46--&gt;
mkdir ~/.lnd/

&lt;!--T:47--&gt;
#edit ~/.lnd/lnd.conf

&lt;!--T:48--&gt;
#start lnd and create a wallet

&lt;!--T:49--&gt;
#https://github.com/lightningnetwork/lnd/blob/master/docs/INSTALL.md#creating-a-wallet
#https://github.com/lightningnetwork/lnd/blob/master/docs/wallet.md
#https://docs.lightning.engineering/lightning-network-tools/lnd/run-lnd

&lt;!--T:50--&gt;
openssl rand -hex 21 &gt; ~/.lnd/wallet_password

&lt;!--T:51--&gt;
cat ~/.lnd/wallet_password
# Copy this password

&lt;!--T:52--&gt;
lncli create
# Follow prompts, use the wallet password as the initial password and set no cipher seed password

&lt;!--T:53--&gt;
#instructions for backing up the wallet goes here


&lt;!--T:54--&gt;
#the first time you run lnd (without a wallet), you cant have the unlock passphrase in the config file to automatically unlock the wallet. now that we have created it, we can add a line to lnd.conf to automatically unlock it:
#wallet-unlock-password-file=/root/.lnd/wallet_password

&lt;!--T:55--&gt;
#deal with error messages about ipv6

&lt;!--T:56--&gt;
#find an address to request signet coins to:

&lt;!--T:57--&gt;
lncli --no-macaroons newaddress p2wkh

&lt;!--T:58--&gt;
bitcoin-cli sendtoaddress "tb1q88nwytlynzwa5f99hpjrae8phpvs5l94dwqfvf" 0.1

&lt;!--T:59--&gt;
./src/bitcoin-cli  --datadir=./signet  -named sendtoaddress address="tb1q88nwytlynzwa5f99hpjrae8phpvs5l94dwqfvf" amount=0.3 fee_rate=25


&lt;!--T:60--&gt;
lncli --no-macaroons connect 03ee9d906caa8e8e66fe97d7a76c2bd9806813b0b0f1cee8b9d03904b538f53c4e@xrybvh4myas4rr3p6itf5ib6zqtrfb5gyb5246bakifev5s62rlicyad.onion:9735
lncli --no-macaroons openchannel 03ee9d906caa8e8e66fe97d7a76c2bd9806813b0b0f1cee8b9d03904b538f53c4e 10000000 2500000


&lt;!--T:61--&gt;
&lt;/nowiki&gt;



== General Step-by-Step Guide (generic) == &lt;!--T:62--&gt;

&lt;!--T:63--&gt;
https://stopanddecrypt.medium.com/?p=489180297d5



== Crowdfunding == &lt;!--T:64--&gt;

&lt;!--T:65--&gt;
https://btcpay.xenon.fun/apps/477A5RjNYiRcHWZUm4di4V6DFLnx/crowdfund

&lt;/translate&gt;</text>
      <sha1>cptfehnf5zbukck92ht7ldgfwa80k9k</sha1>
    </revision>
  </page>
  <page>
    <title>Plebnet Playground/en</title>
    <ns>0</ns>
    <id>222</id>
    <revision>
      <id>1456</id>
      <parentid>623</parentid>
      <timestamp>2021-10-02T20:28:43Z</timestamp>
      <contributor>
        <username>FuzzyBot</username>
        <id>29</id>
      </contributor>
      <comment>Updating to match new version of source page</comment>
      <origin>1456</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="7652" sha1="j0gg6pjlahylg6x4z9w8v38f1ge48gq" xml:space="preserve">&lt;languages/&gt;


== Plebnet Playground / plebnet.fun ==

[[File:PlebnetPlayground.jpg|450px|alt=Plebnet Playground Logo]]

Signet based bitcoin / lnd package which will allow plebs to learn and use lightning network without having to take any financial risks.

Github Repo: https://github.com/PLEBNET-PLAYGROUND/plebnet-playground-docker



== Progress ==

* Signet master node that handles block production - DONE
* CLI docker setup for bitcoind &amp; lnd under tor - DONE
* ThunderHub and RTL GUI containers added - DONE
* Faucet API to allow plebs to obtain some coins - Running, could use some improvement
* Faucet Web UI - Soon
* RPi4 docker images - In future
* Automated traffic so people can get routes - RUNNING
* Jupyter Dashboard Project - IN PROGRESS

== Signet Reference Material ==

[https://en.bitcoin.it/wiki/Signet#Custom_Signet Signet Setup Wiki]


== Master node info ==

{| class="wikitable"
| signetchallenge=512102ee856c56a5aaadd1656f849bafa4c9dacc86a2878fe546c6189185f842ae2c1851ae 
|}

{| class="wikitable"
|+ Bitcoin Endpoints
|-
! Address !! Port 
|-
|104.131.10.218 || 38333     
|-
|2604:a880:800:14::2c:9000 || 38333    
|-
|6megrst422lxzsqvshkqkg6z2zhunywhyrhy3ltezaeyfspfyjdzr3qd.onion || 38333     
|-
|cidcbr4jpvorsegnk5ehkpydf57fpl2vw5cdzvqre74byv4knv5a.b32.i2p || 38333     
|}


{| class="wikitable"
|+ Lightning Endpoints 
|-
! NodeId@Address:Port
|-
|03ee9d906caa8e8e66fe97d7a76c2bd9806813b0b0f1cee8b9d03904b538f53c4e@104.131.10.218:9735     
|-
|03ee9d906caa8e8e66fe97d7a76c2bd9806813b0b0f1cee8b9d03904b538f53c4e@xrybvh4myas4rr3p6itf5ib6zqtrfb5gyb5246bakifev5s62rlicyad.onion:9735      
|-
|03ee9d906caa8e8e66fe97d7a76c2bd9806813b0b0f1cee8b9d03904b538f53c4e@[2604:a880:800:14::2c:9000]
|}



== Current Infrastructure ==

{| class="wikitable"
|-
! Role !! Machine Type !! Cost
|-
|Block producer / LND node || Digital Ocean 2 GB Memory / 2 AMD vCPU / 60 GB Disk  || $19.44      
|}



== Aliases for easy management ==

 &lt;nowiki&gt;
alias lncli-signet='lncli -n signet '
 &lt;/nowiki&gt;



== lnd.conf ==

FYI, LND did not add signet support until v0.13.0+, please make sure you are on this version or higher before attempting

 &lt;nowiki&gt;

[Application Options]

listen=0.0.0.0:9735
listen=[::1]:9736
rpclisten=localhost:10009
rpclisten=[::1]:10010
minchansize=10000000
ignore-historical-gossip-filters=true
accept-keysend=true
accept-amp=true
allow-circular-route=true
numgraphsyncpeers=3
# INSERT YOUR ALIAS ON THE NEXT LINE!
alias=HelloJessica
# UNCOMMENT AND EDIT FILE PATH WITH CLEAR TEXT PASSWORD TO AUTO UNLOCK LND WALLET
#wallet-unlock-password-file=/path/to/unlock.password
#externalip=&lt;replace yours if using public IP&gt;
[Bitcoin]
bitcoin.active=true
bitcoin.mainnet=false
bitcoin.signet=true
bitcoin.signetseednode=104.131.10.218
bitcoin.node=bitcoind
bitcoin.dnsseed=0
[Bitcoind]
bitcoind.dir=/var/lib/bitcoind/
bitcoind.rpchost=localhost
bitcoind.rpcuser=bitcoin
bitcoind.rpcpass=bitcoin
bitcoind.zmqpubrawblock=tcp://127.0.0.1:28332
bitcoind.zmqpubrawtx=tcp://127.0.0.1:28333
[tor]
tor.active=true
tor.socks=9050
tor.control=localhost:9051
#password is set in your torrc if you use one below it is just set as a "hello"
tor.password=hello
tor.v3=true
[watchtower]
watchtower.listen=0.0.0.0:9911
watchtower.listen=[::1]:9912
[wtclient]
wtclient.active=true
wtclient.sweep-fee-rate=10
[protocol]
protocol.wumbo-channels=true

&lt;/nowiki&gt;



== bitcoin.conf ==

 &lt;nowiki&gt;
listen=1
listenonion=1
signet=1
daemon=1
#rpcauth the password here is set as "bitcoin"
rpcauth=bitcoin:c8c8b9740a470454255b7a38d4f38a52$e8530d1c739a3bb0ec6e9513290def11651afbfd2b979f38c16ec2cf76cf348a
txindex=1
#Only include i2psam if you have install i2p
#i2psam=127.0.0.1:7656
server=1
dnsseed=0
[signet]
zmqpubrawblock=tcp://0.0.0.0:28332
zmqpubrawtx=tcp://0.0.0.0:28333
zmqpubhashblock=tcp://0.0.0.0:28334
wallet=/var/lib/bitcoind/signet/wallets
signetchallenge=512102ee856c56a5aaadd1656f849bafa4c9dacc86a2878fe546c6189185f842ae2c1851ae
proxy=127.0.0.1:9050
addnode=104.131.10.218:38333

&lt;/nowiki&gt;



== /etc/tor/torrc ==

This example has a HashedControlPassword set as "please", you can create your own running '''tor --hash-password mynewpassword'''

 &lt;nowiki&gt;
SocksPort 9050 # Default: Bind to localhost:9050 for local connections.
RunAsDaemon 1


## The port on which Tor will listen for local connections from Tor
## controller applications, as documented in control-spec.txt.
ControlPort 9051
## If you enable the controlport, be sure to enable one of these
## authentication methods, to prevent attackers from accessing it.
HashedControlPassword 16:A170E9325684E5366021C2AA404D4CA5AAE0D6FFE947E60B939083EF61
CookieAuthentication 1
CookieAuthFileGroupReadable 1

&lt;/nowiki&gt;



== notes from getting started with ubuntu 20.04 running in a VM ==

these notes are incomplete and may or may not help you get things working.

 &lt;nowiki&gt;

# Install and configure tor

sudo apt install -y tor

#we need to add some stuff to torrc so that lnd and bitcoind are allowed to set themselves up as a tor service, or else we get this error:
#unable to initialize tor controller: unable to connect to Tor server: dial tcp 127.0.0.1:9051: connect: connection refused


#edit /etc/tor/torrc 

SocksPort 9050 # Default: Bind to localhost:9050 for local connections.
RunAsDaemon 1

#make sure tor is running and has picked up the changes to the config file
service tor start
service tor restart

#install and configure bitcoin
#https://medium.com/@lukedashjr/how-to-securely-install-bitcoin-9bfeca7d3b2a
wget https://bitcoin.org/bin/bitcoin-core-0.21.1/bitcoin-0.21.1-x86_64-linux-gnu.tar.gz

#gpg verification should go here

tar xvf bitcoin-*tar.gz
sudo cp -vR bitcoin-*/* /usr/

#edit ~/.bitcoin/bitcoin.conf

#install and configure lnd
#https://github.com/lightningnetwork/lnd/releases

wget https://github.com/lightningnetwork/lnd/releases/download/v0.13.1-beta/lnd-linux-amd64-v0.13.1-beta.tar.gz
tar xvf lnd-linux-amd64-v0.13.1-beta.tar.gz
cp lnd-linux-amd64-v0.13.1-beta/ln* /usr/local/bin/

mkdir ~/.lnd/

#edit ~/.lnd/lnd.conf

#start lnd and create a wallet

#https://github.com/lightningnetwork/lnd/blob/master/docs/INSTALL.md#creating-a-wallet
#https://github.com/lightningnetwork/lnd/blob/master/docs/wallet.md
#https://docs.lightning.engineering/lightning-network-tools/lnd/run-lnd

openssl rand -hex 21 &gt; ~/.lnd/wallet_password

cat ~/.lnd/wallet_password
# Copy this password

lncli create
# Follow prompts, use the wallet password as the initial password and set no cipher seed password

#instructions for backing up the wallet goes here


#the first time you run lnd (without a wallet), you cant have the unlock passphrase in the config file to automatically unlock the wallet. now that we have created it, we can add a line to lnd.conf to automatically unlock it:
#wallet-unlock-password-file=/root/.lnd/wallet_password

#deal with error messages about ipv6

#find an address to request signet coins to:

lncli --no-macaroons newaddress p2wkh

bitcoin-cli sendtoaddress "tb1q88nwytlynzwa5f99hpjrae8phpvs5l94dwqfvf" 0.1

./src/bitcoin-cli  --datadir=./signet  -named sendtoaddress address="tb1q88nwytlynzwa5f99hpjrae8phpvs5l94dwqfvf" amount=0.3 fee_rate=25


lncli --no-macaroons connect 03ee9d906caa8e8e66fe97d7a76c2bd9806813b0b0f1cee8b9d03904b538f53c4e@xrybvh4myas4rr3p6itf5ib6zqtrfb5gyb5246bakifev5s62rlicyad.onion:9735
lncli --no-macaroons openchannel 03ee9d906caa8e8e66fe97d7a76c2bd9806813b0b0f1cee8b9d03904b538f53c4e 10000000 2500000


&lt;/nowiki&gt;



== General Step-by-Step Guide (generic) ==

https://stopanddecrypt.medium.com/?p=489180297d5



== Crowdfunding ==

https://btcpay.xenon.fun/apps/477A5RjNYiRcHWZUm4di4V6DFLnx/crowdfund</text>
      <sha1>j0gg6pjlahylg6x4z9w8v38f1ge48gq</sha1>
    </revision>
  </page>
  <page>
    <title>Plebnet Playground/es</title>
    <ns>0</ns>
    <id>139</id>
    <revision>
      <id>1469</id>
      <parentid>569</parentid>
      <timestamp>2021-10-02T20:47:13Z</timestamp>
      <contributor>
        <username>FuzzyBot</username>
        <id>29</id>
      </contributor>
      <comment>Updating to match new version of source page</comment>
      <origin>1469</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="9400" sha1="m465wfsnggiikcjeafj7fd6vv28hpr5" xml:space="preserve">&lt;languages/&gt;


== Plebnet Playground / plebnet.fun ==

[[File:PlebnetPlayground.jpg|450px|alt=Plebnet Playground Logo]]


Paquete bitcoin / lnd basado en Signet que permitirá a los plebeyos aprender y usar Lightning Network sin tener que correr riesgos financieros.

Github Repo: https://github.com/PLEBNET-PLAYGROUND/plebnet-playground-docker



== Progreso ==

&lt;div class="mw-translate-fuzzy"&gt;
* Nodo maestro de Signet que maneja la producción de bloques - HECHO * Configuración de la ventana acoplable CLI para bitcoind y lnd bajo tor - HECHO * Se agregaron contenedores ThunderHub y RTL GUI - HECHO * API Faucet para permitir que plebeyos obtengan algunas monedas - Ejecutando, podría necesitar alguna mejora * Faucet Interfaz de usuario web - Pronto * Imágenes de la ventana acoplable RPi4 - En el futuro * Tráfico automatizado para que las personas puedan obtener rutas - EN CURSO * Proyecto de panel de Jupyter - EN CURSO
&lt;/div&gt;

&lt;div lang="en" dir="ltr" class="mw-content-ltr"&gt;
== Signet Reference Material ==
&lt;/div&gt;

[https://en.bitcoin.it/wiki/Signet#Custom_Signet Signet Setup Wiki]


== Información del nodo maestro ==

{| class="wikitable"
| signetchallenge=512102ee856c56a5aaadd1656f849bafa4c9dacc86a2878fe546c6189185f842ae2c1851ae 
|}

{| class="wikitable"
|+ Bitcoin Endpoints
|-
! Address !! Port 
|-
|104.131.10.218 || 38333     
|-
|2604:a880:800:14::2c:9000 || 38333    
|-
|6megrst422lxzsqvshkqkg6z2zhunywhyrhy3ltezaeyfspfyjdzr3qd.onion || 38333     
|-
|cidcbr4jpvorsegnk5ehkpydf57fpl2vw5cdzvqre74byv4knv5a.b32.i2p || 38333     
|}


{| class="wikitable"
|+ Lightning Endpoints 
|-
! NodeId@Address:Port
|-
|03ee9d906caa8e8e66fe97d7a76c2bd9806813b0b0f1cee8b9d03904b538f53c4e@104.131.10.218:9735     
|-
|03ee9d906caa8e8e66fe97d7a76c2bd9806813b0b0f1cee8b9d03904b538f53c4e@xrybvh4myas4rr3p6itf5ib6zqtrfb5gyb5246bakifev5s62rlicyad.onion:9735      
|-
|03ee9d906caa8e8e66fe97d7a76c2bd9806813b0b0f1cee8b9d03904b538f53c4e@[2604:a880:800:14::2c:9000]
|}



== Infraestructura actual ==

{| class="wikitable"
|-
! Role !! Machine Type !! Cost
|-
|Block producer / LND node || Digital Ocean 2 GB Memory / 2 AMD vCPU / 60 GB Disk  || $19.44      
|}



== Alias ​​para una fácil gestión ==

 &lt;nowiki&gt;
alias lncli-signet='lncli -n signet '
 &lt;/nowiki&gt;



== lnd.conf ==

Para su información, LND no agregó soporte de signet hasta v0.13.0 +, asegúrese de estar en esta versión o superior antes de intentar

 &lt;nowiki&gt;

[Application Options]

listen=0.0.0.0:9735
listen=[::1]:9736
rpclisten=localhost:10009
rpclisten=[::1]:10010
minchansize=10000000
ignore-historical-gossip-filters=true
accept-keysend=true
accept-amp=true
allow-circular-route=true
numgraphsyncpeers=3
# INSERT YOUR ALIAS ON THE NEXT LINE!
alias=HelloJessica
# UNCOMMENT AND EDIT FILE PATH WITH CLEAR TEXT PASSWORD TO AUTO UNLOCK LND WALLET
#wallet-unlock-password-file=/path/to/unlock.password
#externalip=&lt;replace yours if using public IP&gt;
[Bitcoin]
bitcoin.active=true
bitcoin.mainnet=false
bitcoin.signet=true
bitcoin.signetseednode=104.131.10.218
bitcoin.node=bitcoind
bitcoin.dnsseed=0
[Bitcoind]
bitcoind.dir=/var/lib/bitcoind/
bitcoind.rpchost=localhost
bitcoind.rpcuser=bitcoin
bitcoind.rpcpass=bitcoin
bitcoind.zmqpubrawblock=tcp://127.0.0.1:28332
bitcoind.zmqpubrawtx=tcp://127.0.0.1:28333
[tor]
tor.active=true
tor.socks=9050
tor.control=localhost:9051
#password is set in your torrc if you use one below it is just set as a "hello"
tor.password=hello
tor.v3=true
[watchtower]
watchtower.listen=0.0.0.0:9911
watchtower.listen=[::1]:9912
[wtclient]
wtclient.active=true
wtclient.sweep-fee-rate=10
[protocol]
protocol.wumbo-channels=true

&lt;/nowiki&gt;



== bitcoin.conf ==

 &lt;nowiki&gt;
listen=1
listenonion=1
signet=1
daemon=1
#rpcauth the password here is set as "bitcoin"
rpcauth=bitcoin:c8c8b9740a470454255b7a38d4f38a52$e8530d1c739a3bb0ec6e9513290def11651afbfd2b979f38c16ec2cf76cf348a
txindex=1
#Only include i2psam if you have install i2p
#i2psam=127.0.0.1:7656
server=1
dnsseed=0
[signet]
zmqpubrawblock=tcp://0.0.0.0:28332
zmqpubrawtx=tcp://0.0.0.0:28333
zmqpubhashblock=tcp://0.0.0.0:28334
wallet=/var/lib/bitcoind/signet/wallets
signetchallenge=512102ee856c56a5aaadd1656f849bafa4c9dacc86a2878fe546c6189185f842ae2c1851ae
proxy=127.0.0.1:9050
addnode=104.131.10.218:38333

&lt;/nowiki&gt;



== /etc/tor/torrc ==


Este ejemplo tiene una HashedControlPassword configurada como "please", puede crear su propia '' 'tor --hash-password mynewpassword' ''

 &lt;nowiki&gt;
SocksPort 9050 # Default: Bind to localhost:9050 for local connections.
RunAsDaemon 1


## The port on which Tor will listen for local connections from Tor
## controller applications, as documented in control-spec.txt.
ControlPort 9051
## If you enable the controlport, be sure to enable one of these
## authentication methods, to prevent attackers from accessing it.
HashedControlPassword 16:A170E9325684E5366021C2AA404D4CA5AAE0D6FFE947E60B939083EF61
CookieAuthentication 1
CookieAuthFileGroupReadable 1

&lt;/nowiki&gt;



== notas sobre cómo empezar con ubuntu 20.04 ejecutándose en una máquina virtual ==

Estas notas están incompletas y pueden ayudarlo o no a hacer que las cosas funcionen.

 &lt;nowiki&gt;

# Instalar y configurar tor

sudo apt install -y tor

#we need to add some stuff to torrc so that lnd and bitcoind are allowed to set themselves up as a tor service, or else we get this error:
#unable to initialize tor controller: unable to connect to Tor server: dial tcp 127.0.0.1:9051: connect: connection refused


#edit /etc/tor/torrc 

SocksPort 9050 # Default: Bind to localhost:9050 for local connections.
RunAsDaemon 1

# asegúrese de que tor se esté ejecutando y haya recogido los cambios en el archivo de configuración
service tor start
service tor restart

#instalar y configurar bitcoin
#https://medium.com/@lukedashjr/how-to-securely-install-bitcoin-9bfeca7d3b2a
wget https://bitcoin.org/bin/bitcoin-core-0.21.1/bitcoin-0.21.1-x86_64-linux-gnu.tar.gz

&lt;div lang="en" dir="ltr" class="mw-content-ltr"&gt;
#gpg verification should go here
&lt;/div&gt;

&lt;div lang="en" dir="ltr" class="mw-content-ltr"&gt;
tar xvf bitcoin-*tar.gz
sudo cp -vR bitcoin-*/* /usr/
&lt;/div&gt;

&lt;div lang="en" dir="ltr" class="mw-content-ltr"&gt;
#edit ~/.bitcoin/bitcoin.conf
&lt;/div&gt;

&lt;div lang="en" dir="ltr" class="mw-content-ltr"&gt;
#install and configure lnd
#https://github.com/lightningnetwork/lnd/releases
&lt;/div&gt;

&lt;div lang="en" dir="ltr" class="mw-content-ltr"&gt;
wget https://github.com/lightningnetwork/lnd/releases/download/v0.13.1-beta/lnd-linux-amd64-v0.13.1-beta.tar.gz
tar xvf lnd-linux-amd64-v0.13.1-beta.tar.gz
cp lnd-linux-amd64-v0.13.1-beta/ln* /usr/local/bin/
&lt;/div&gt;

&lt;div lang="en" dir="ltr" class="mw-content-ltr"&gt;
mkdir ~/.lnd/
&lt;/div&gt;

&lt;div lang="en" dir="ltr" class="mw-content-ltr"&gt;
#edit ~/.lnd/lnd.conf
&lt;/div&gt;

&lt;div lang="en" dir="ltr" class="mw-content-ltr"&gt;
#start lnd and create a wallet
&lt;/div&gt;

&lt;div lang="en" dir="ltr" class="mw-content-ltr"&gt;
#https://github.com/lightningnetwork/lnd/blob/master/docs/INSTALL.md#creating-a-wallet
#https://github.com/lightningnetwork/lnd/blob/master/docs/wallet.md
#https://docs.lightning.engineering/lightning-network-tools/lnd/run-lnd
&lt;/div&gt;

&lt;div lang="en" dir="ltr" class="mw-content-ltr"&gt;
openssl rand -hex 21 &gt; ~/.lnd/wallet_password
&lt;/div&gt;

&lt;div lang="en" dir="ltr" class="mw-content-ltr"&gt;
cat ~/.lnd/wallet_password
# Copy this password
&lt;/div&gt;

&lt;div lang="en" dir="ltr" class="mw-content-ltr"&gt;
lncli create
# Follow prompts, use the wallet password as the initial password and set no cipher seed password
&lt;/div&gt;

&lt;div lang="en" dir="ltr" class="mw-content-ltr"&gt;
#instructions for backing up the wallet goes here
&lt;/div&gt;


&lt;div lang="en" dir="ltr" class="mw-content-ltr"&gt;
#the first time you run lnd (without a wallet), you cant have the unlock passphrase in the config file to automatically unlock the wallet. now that we have created it, we can add a line to lnd.conf to automatically unlock it:
#wallet-unlock-password-file=/root/.lnd/wallet_password
&lt;/div&gt;

&lt;div lang="en" dir="ltr" class="mw-content-ltr"&gt;
#deal with error messages about ipv6
&lt;/div&gt;

&lt;div lang="en" dir="ltr" class="mw-content-ltr"&gt;
#find an address to request signet coins to:
&lt;/div&gt;

&lt;div lang="en" dir="ltr" class="mw-content-ltr"&gt;
lncli --no-macaroons newaddress p2wkh
&lt;/div&gt;

&lt;div lang="en" dir="ltr" class="mw-content-ltr"&gt;
bitcoin-cli sendtoaddress "tb1q88nwytlynzwa5f99hpjrae8phpvs5l94dwqfvf" 0.1
&lt;/div&gt;

&lt;div lang="en" dir="ltr" class="mw-content-ltr"&gt;
./src/bitcoin-cli  --datadir=./signet  -named sendtoaddress address="tb1q88nwytlynzwa5f99hpjrae8phpvs5l94dwqfvf" amount=0.3 fee_rate=25
&lt;/div&gt;


&lt;div lang="en" dir="ltr" class="mw-content-ltr"&gt;
lncli --no-macaroons connect 03ee9d906caa8e8e66fe97d7a76c2bd9806813b0b0f1cee8b9d03904b538f53c4e@xrybvh4myas4rr3p6itf5ib6zqtrfb5gyb5246bakifev5s62rlicyad.onion:9735
lncli --no-macaroons openchannel 03ee9d906caa8e8e66fe97d7a76c2bd9806813b0b0f1cee8b9d03904b538f53c4e 10000000 2500000
&lt;/div&gt;


&lt;div lang="en" dir="ltr" class="mw-content-ltr"&gt;
&lt;/nowiki&gt;
&lt;/div&gt;



&lt;div lang="en" dir="ltr" class="mw-content-ltr"&gt;
== General Step-by-Step Guide (generic) ==
&lt;/div&gt;

&lt;div lang="en" dir="ltr" class="mw-content-ltr"&gt;
https://stopanddecrypt.medium.com/?p=489180297d5
&lt;/div&gt;



&lt;div lang="en" dir="ltr" class="mw-content-ltr"&gt;
== Crowdfunding ==
&lt;/div&gt;

&lt;div lang="en" dir="ltr" class="mw-content-ltr"&gt;
https://btcpay.xenon.fun/apps/477A5RjNYiRcHWZUm4di4V6DFLnx/crowdfund
&lt;/div&gt;</text>
      <sha1>m465wfsnggiikcjeafj7fd6vv28hpr5</sha1>
    </revision>
  </page>
  <page>
    <title>Plebnet logo</title>
    <ns>0</ns>
    <id>276</id>
    <revision>
      <id>1012</id>
      <parentid>757</parentid>
      <timestamp>2021-10-02T19:49:38Z</timestamp>
      <contributor>
        <username>Lucasdcf</username>
        <id>27</id>
      </contributor>
      <comment>Marked this version for translation</comment>
      <origin>1012</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="190" sha1="dlinqxhvgkllt4p06fahhbtkdjwlthr" xml:space="preserve">&lt;languages/&gt;
&lt;translate&gt;
&lt;!--T:1--&gt;
A logo design created as a gift for the PlebNet community, thank you so much sbddesigns!

&lt;!--T:2--&gt;
https://github.com/sbddesign/PlebNetLogo
&lt;/translate&gt;</text>
      <sha1>dlinqxhvgkllt4p06fahhbtkdjwlthr</sha1>
    </revision>
  </page>
  <page>
    <title>Plebnet logo/en</title>
    <ns>0</ns>
    <id>934</id>
    <revision>
      <id>1459</id>
      <timestamp>2021-10-02T20:29:17Z</timestamp>
      <contributor>
        <username>FuzzyBot</username>
        <id>29</id>
      </contributor>
      <comment>Updating to match new version of source page</comment>
      <origin>1459</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="143" sha1="8z667zeaytnox0e0aanmqrlxzqa2byc" xml:space="preserve">&lt;languages/&gt;
A logo design created as a gift for the PlebNet community, thank you so much sbddesigns!

https://github.com/sbddesign/PlebNetLogo</text>
      <sha1>8z667zeaytnox0e0aanmqrlxzqa2byc</sha1>
    </revision>
  </page>
  <page>
    <title>Ppm</title>
    <ns>0</ns>
    <id>39</id>
    <revision>
      <id>1014</id>
      <parentid>758</parentid>
      <timestamp>2021-10-02T19:49:45Z</timestamp>
      <contributor>
        <username>Lucasdcf</username>
        <id>27</id>
      </contributor>
      <comment>Marked this version for translation</comment>
      <origin>1014</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="370" sha1="78n8lhmdxh4hfls23je46bg2b0vlzdx" xml:space="preserve">&lt;languages/&gt;
&lt;translate&gt;
&lt;!--T:1--&gt;
The acronym PPM stands for "Parts Per Million". It quantifies the number of Satoshis per 1 Million Sats.

&lt;!--T:2--&gt;
For example:

    &lt;!--T:3--&gt;
1ppm is 1 sat per 1 Million Satoshis
    1000ppm is 1000 sats per 1 Million Satoshis
    4000ppm is 4000 sats per 1 Million Satoshis
    4000ppm is 1000 sats per 250k Satoshis
&lt;/translate&gt;</text>
      <sha1>78n8lhmdxh4hfls23je46bg2b0vlzdx</sha1>
    </revision>
  </page>
  <page>
    <title>Ppm/en</title>
    <ns>0</ns>
    <id>602</id>
    <revision>
      <id>1121</id>
      <timestamp>2021-10-02T20:06:06Z</timestamp>
      <contributor>
        <username>FuzzyBot</username>
        <id>29</id>
      </contributor>
      <comment>Updating to match new version of source page</comment>
      <origin>1121</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="312" sha1="r26yep5wenrveplcevc1ez3h09zncj1" xml:space="preserve">&lt;languages/&gt;
The acronym PPM stands for "Parts Per Million". It quantifies the number of Satoshis per 1 Million Sats.

For example:

    1ppm is 1 sat per 1 Million Satoshis
    1000ppm is 1000 sats per 1 Million Satoshis
    4000ppm is 4000 sats per 1 Million Satoshis
    4000ppm is 1000 sats per 250k Satoshis</text>
      <sha1>r26yep5wenrveplcevc1ez3h09zncj1</sha1>
    </revision>
  </page>
  <page>
    <title>Project Ideas</title>
    <ns>0</ns>
    <id>43</id>
    <revision>
      <id>1015</id>
      <parentid>759</parentid>
      <timestamp>2021-10-02T19:49:50Z</timestamp>
      <contributor>
        <username>Lucasdcf</username>
        <id>27</id>
      </contributor>
      <comment>Marked this version for translation</comment>
      <origin>1015</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="1141" sha1="1pmdb02zrozavuvhxsg8799bcvc0cit" xml:space="preserve">&lt;languages/&gt;
&lt;translate&gt;
&lt;!--T:1--&gt;
This is a page to track project ideas. What does the PlebNet need building?

&lt;!--T:2--&gt;
* Better visualization tools, e.g create playbacks of an entire day's forwarding events
* Basic auto-balancing scripts
** Existing packages that could be used as starting point: [https://github.com/C-Otto/rebalance-lnd rebalance-lnd], [https://github.com/alexbosworth/balanceofsatoshis BOS]
* [[Special:MyLanguage/Plebnet Playground|Plebnet Playground]]
* GirthMatrix - VR girth experience (e.g. https://plebnet.satoshis.tech/3d )
* Self account creation for wiki - perhaps using new Amboss groups and then signing message with node
* Software to automatically rebalance a node: set a budget, it takes care of keeping node balanced.
* Software to automatically set fees. Analyze flows, and set fees with the aim of keeping the node channels balanced.
** Existing packages that could be used as starting point: [https://github.com/accumulator/charge-lnd charge-lnd]
* A site that logs nodes through which payments happen easily, versus nodes through which payments fail a lot
* Better / advanced reporting
&lt;/translate&gt;</text>
      <sha1>1pmdb02zrozavuvhxsg8799bcvc0cit</sha1>
    </revision>
  </page>
  <page>
    <title>Project Ideas/en</title>
    <ns>0</ns>
    <id>948</id>
    <revision>
      <id>1476</id>
      <timestamp>2021-10-02T20:56:35Z</timestamp>
      <contributor>
        <username>FuzzyBot</username>
        <id>29</id>
      </contributor>
      <comment>Updating to match new version of source page</comment>
      <origin>1476</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="1094" sha1="k6mzh9tfj7f5dadtvskvj7459w8amy3" xml:space="preserve">&lt;languages/&gt;
This is a page to track project ideas. What does the PlebNet need building?

* Better visualization tools, e.g create playbacks of an entire day's forwarding events
* Basic auto-balancing scripts
** Existing packages that could be used as starting point: [https://github.com/C-Otto/rebalance-lnd rebalance-lnd], [https://github.com/alexbosworth/balanceofsatoshis BOS]
* [[Special:MyLanguage/Plebnet Playground|Plebnet Playground]]
* GirthMatrix - VR girth experience (e.g. https://plebnet.satoshis.tech/3d )
* Self account creation for wiki - perhaps using new Amboss groups and then signing message with node
* Software to automatically rebalance a node: set a budget, it takes care of keeping node balanced.
* Software to automatically set fees. Analyze flows, and set fees with the aim of keeping the node channels balanced.
** Existing packages that could be used as starting point: [https://github.com/accumulator/charge-lnd charge-lnd]
* A site that logs nodes through which payments happen easily, versus nodes through which payments fail a lot
* Better / advanced reporting</text>
      <sha1>k6mzh9tfj7f5dadtvskvj7459w8amy3</sha1>
    </revision>
  </page>
  <page>
    <title>Push Channel Opens</title>
    <ns>0</ns>
    <id>8</id>
    <revision>
      <id>1016</id>
      <parentid>760</parentid>
      <timestamp>2021-10-02T19:50:04Z</timestamp>
      <contributor>
        <username>Lucasdcf</username>
        <id>27</id>
      </contributor>
      <comment>Marked this version for translation</comment>
      <origin>1016</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="810" sha1="pu44fiz5y1tjvscxeoooas6pdloc9ee" xml:space="preserve">&lt;languages/&gt;
&lt;translate&gt;
&lt;!--T:1--&gt;
"Ghetto Submarine Swaps" can be reduced to a two-step process as long as your client has the ability to specify a local amount and a push amount.


== push channel opens with lncli == &lt;!--T:2--&gt;

&lt;!--T:3--&gt;
lncli has this ability built-in. For example, to open a balanced 5M channel:

&lt;!--T:4--&gt;
&lt;code&gt;lncli openchannel --node_key &lt;node_key&gt; --local_amt 5000000 --push_amt 2500000 --sat_per_vbyte 1&lt;/code&gt;

&lt;!--T:5--&gt;
Do note that 'local amount' is 5M, because it represents the channel's total girth, however since we *push* half, the channel is balanced. This effectively reduces a ghetto submarine swap to two steps:

&lt;!--T:6--&gt;
* node 1: open channel with N local and N/2 push
* node 2: send N/2 to node 1, on-chain

&lt;!--T:7--&gt;
[[File: Push_open.png|500px]]
&lt;/translate&gt;</text>
      <sha1>pu44fiz5y1tjvscxeoooas6pdloc9ee</sha1>
    </revision>
  </page>
  <page>
    <title>Push Channel Opens/en</title>
    <ns>0</ns>
    <id>951</id>
    <revision>
      <id>1481</id>
      <timestamp>2021-10-02T21:01:02Z</timestamp>
      <contributor>
        <username>FuzzyBot</username>
        <id>29</id>
      </contributor>
      <comment>Updating to match new version of source page</comment>
      <origin>1481</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="708" sha1="ldeqpei48e5vuvn16pef4yuiwv8cgu5" xml:space="preserve">&lt;languages/&gt;
"Ghetto Submarine Swaps" can be reduced to a two-step process as long as your client has the ability to specify a local amount and a push amount.


== push channel opens with lncli ==

lncli has this ability built-in. For example, to open a balanced 5M channel:

&lt;code&gt;lncli openchannel --node_key &lt;node_key&gt; --local_amt 5000000 --push_amt 2500000 --sat_per_vbyte 1&lt;/code&gt;

Do note that 'local amount' is 5M, because it represents the channel's total girth, however since we *push* half, the channel is balanced. This effectively reduces a ghetto submarine swap to two steps:

* node 1: open channel with N local and N/2 push
* node 2: send N/2 to node 1, on-chain

[[File: Push_open.png|500px]]</text>
      <sha1>ldeqpei48e5vuvn16pef4yuiwv8cgu5</sha1>
    </revision>
  </page>
  <page>
    <title>Reduce channel database size</title>
    <ns>0</ns>
    <id>1260</id>
    <revision>
      <id>2252</id>
      <parentid>2249</parentid>
      <timestamp>2022-01-26T22:15:59Z</timestamp>
      <contributor>
        <username>VS</username>
        <id>18</id>
      </contributor>
      <minor/>
      <comment>/* Reduce LND DB size, like a BO$$! */</comment>
      <origin>2252</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="6416" sha1="99z6qxt2ne1je76wvzzwf3mz1uzf8i9" xml:space="preserve">=== Reduce LND DB size, like a BO$$! === 

Are you tired of having a sluggish node that's slow and takes a long time to restart? 
Do you want a lightweight and extremely responsive node?

You have come to the right place, my friends. Let's make it happen!!


'''Part 1 - Updating lnd.conf'''

First things first, lets ssh into your node and find the lnd.conf ,  we will first need to edit this file and add a few settings. For umbrel users the directory is something like umbrel/umbrel/lnd/lnd.conf

cd umbrel/lnd 

nano lnd.conf

Under [Application Options]

Add the following lines

gc-canceled-invoices-on-startup=true

gc-canceled-invoices-on-the-fly=true

Then we will need to make an additional category, under [Application Options] to add the new bolt settings. scroll down the file find an empty space and create [bolt] section. 

[bolt]

db.bolt.auto-compact=true

db.bolt.auto-compact-min-age=0

Once done go ahead and save the file by hitting ctrl + x, yes, enter to save the newly edited lnd.conf file.

'''Part 2 - Results for channel update count'''

Now that the lnd.conf settings are out of the way, we can run this command. Please note that if you are running Umbrel the command below will work, if not on Umbrel please make sure you have the correct path before lncli listchannels.  Thanks to ⚡G-Spot-21_69_420⚡ for mentioning this command. 

~/umbrel/bin/lncli listchannels | jq -r '.[][]| [.num_updates, .remote_pubkey] | @tsv' | sort -rn | head -10

You can change the -10 from the line above to -20 to bring top 20 nodes with the most channel updates. 

By running this command we will get the top 10 channels that have the most channel updates. (These updates cause your channel.db file to get very very large) This should be concerning to all serious node runners because it brings sluggishness, connection issues, and over all makes your node not as responsive. 

After running the command above, your results will look something like this. (The top command will only bring you 10 results) You may change it to 20 results if you want to clean more bloat. 

52227  PubKey

48209  PubKey

38230  PubKey

You will see that the first result has 52,227 channel updates, a good rule of thumb would be to pick all the channels above 50K channel updates and note down the pubkey of the listed channels and also the channel capacity in a notepad or equivalent. Doing this will make things neat organized and less of a headache when it comes time to close and reopen all these channels.

Once you you are done picking out the channels with the most updates and  happy with it. That's great, now you really get down and dirty with your node by closing the channels that have the most updates. 

'''Part 3 - Closing Channels''' 

We will then close these channels and re-open.  Closing them would have to be done manually one by one. I know it sounds boring and not really fun, but if you're serious and care about a healthy node it must be done. You will also realize how fast the lnd restarts get and how responsive your node becomes. 

'''Part 4 - Before restarting LND'''

Now lets go to the directory where your channel.db is located. I want you to take a note of your channel.db size. 

cd /umbrel/lnd/data/graph/mainnet

ls -l

Take note of the the channel.db size. We will come back to this directory after restarting your lnd to see how much space we saved. 

If you have bos installed there is one last command that you will need to run to maximize your database file space savings before actually restarting lnd. 

bos clean-failed-payments

You will see the results as something like this. 

deleting_failed_payments: true

failed_payments: 53

searching_for_failed_payments: 2022-01-26T06:08:54.331Z

total_failed_payments_deleted: 53


'''Part 5 - Restarting LND'''

We can do this in many ways, choose which ever is more convenient for you. Make sure to do a channel back up once all your channels are closed, You never know. 

For Umbrel users:

cd umbrel/scripts

sudo ./stop wait for it shut down  then run sudo ./start 

or you can just run (Restarts LND only)

cd umbrel &amp;&amp; docker-compose restart lnd

or you can just quickly restart from your dashboard if you're too lazy to run commands ;)

Now let's wait for lnd to start and sync up to the network. 

We will go back to the directory where the channel.db file was stored by running this. 

cd /umbrel/lnd/data/graph/mainnet

then 

ls -l

You should see a drastic difference in the file size of your channel.db at least a few gigs in savings depending on how often your rebalance and how big your node is. 

'''Part 6 - Re-Opening Channels'''

For re-opening these channels back if you have bos installed you're in luck. You may copy and paste the channels and there capacities that you saved in a notepad earlier. Run this command to batch open all the channels that you closed earlier. You will also save huge on opening fees since the batch open will be done in one big transaction. 

[Example]
bos open pubkey --amount 1000000 pubkey2 --amount 5000000 pubkey3 --amount 2000000 pubkey4 --amount 2169420

If you don't have bos installed then you will have to open the channels with your favorite method manually. Using ThunderHub, RTL, and I'm sure there's many other platforms and methods that can be used for this. 

'''Part 7 - Finishing notes'''

This is a tested and proven method, my node has about 290 + channels and almost 30 BTC capacity. My channel.db was over 8 gigs!! I realized the performance of my node degrading day by day. By doing everything that I wrote in this article I was able to shave a good 7 gigs of bloated bs that accumulated in a period of 6 months. I know it seems like a lot of steps but it is well worth it. 

I was literally able to do all of this under 1 hour, I got lucky because the mempool was very low so almost all the channels closed within 10 mins and the same with opening them. 

Cost: 

Closing 20 channels: 20 x 223 = 4,460 sats

Opening 20 channels with bos open: 1,000 sats

Outcome:

Reduced node database size from 8GB to 1.01GB

Phat savings like a BO$$$$! I hope this is as helpful to you as much as it was for me. Thanks for reading, and if you wanna connect to my node my pubkey is beneath.  

'''Phatsats PubKey: 034b025cd658515f37bb125b6ef040f428b0ce678253c805358e9db60c40d9f96a'''

[[User:Phatsats|Phatsats]] ([[User talk:Phatsats|talk]]) 22:07, 26 January 2022 (UTC)</text>
      <sha1>99z6qxt2ne1je76wvzzwf3mz1uzf8i9</sha1>
    </revision>
  </page>
  <page>
    <title>Resources</title>
    <ns>0</ns>
    <id>48</id>
    <revision>
      <id>2411</id>
      <parentid>2273</parentid>
      <timestamp>2022-03-16T17:41:53Z</timestamp>
      <contributor>
        <username>VS</username>
        <id>18</id>
      </contributor>
      <minor/>
      <origin>2411</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="2567" sha1="q3iwpq0t4jqeqb5r6mgm7dh0cua77qv" xml:space="preserve">&lt;languages/&gt;
&lt;translate&gt;
&lt;!--T:1--&gt;
Here are some External Resources which can assist you in your journey as a node runner. Install at your own risk and after your own research.

&lt;!--T:2--&gt;
[https://github.com/lnbook/lnbook Must Read e-Book] by some awesome people like Antonopoulos, Pickhardt and Roasbeef. 
It's written in simple language and a few hours of effort can really help you in the long run.

&lt;!--T:3--&gt;
[https://github.com/alexbosworth/balanceofsatoshis bos] for node management, rebalancing, telegram interface, command-line interfaces.

&lt;!--T:4--&gt;
[https://github.com/accumulator/charge-lnd charge lnd] for automated fee adjustment scripts

&lt;!--T:5--&gt;
[https://github.com/smallworlnd/stream-lnd-htlcs Streaming HTLC events] for monitoring routing traffic.

&lt;!--T:6--&gt;
[https://github.com/C-Otto/rebalance-lnd Rebalance Lnd] for rebalancing

&lt;!--T:7--&gt;
[https://gridflare.xyz/ For recommendations to improve your centrality and betweenness]

&lt;!--T:8--&gt;
[https://lnnodeinsight.com/ For channel simulation, peer network and other views]

&lt;!--T:9--&gt;
[https://lnrouter.app/ Terminal Score Debugger and other tools]

&lt;!--T:10--&gt;
[https://bitcoinsecurity.guide/ Bitcoin Security Guide]

&lt;!--T:11--&gt;
[https://github.com/BhaagBoseDK/autorebalance Simple Auto Rebalance Script] to keep a minimum balance on every channel at a reasonable cost.

&lt;!--T:12--&gt;
[https://github.com/cryptosharks131/lndg LNDg] to analyze lnd data and manage your node with automation (rebalancing and much more).

&lt;!--T:13--&gt;
[https://terminal.lightning.engineering/ Terminal Web] classifies nodes into good and pending and assigns a score. Based on our experience, the score does not materially affect routing, even though it helps attract other nodes to connect to yours (sort of like a marketing tool). You can use the [https://lnrouter.app/scores/terminal Terminal Score Debugger] tool to debug and optimize your node's score.

&lt;!--T:14--&gt;
[https://plebnet.wiki/wiki/Umbrel_-_Installing_BoS Balance of Satoshis] is an excellent tool to help you optimize channel rebalancing. It'll show you routing hops along with fees for each hop.  You can then further optimize rebalancing cost by excluding expensive nodes.

[https://github.com/itsneski/lightning-jet Lightning Jet] is a fully automated rebalancer for LND nodes. You can run jet with &lt;code&gt;enforceProfitability&lt;/code&gt; set to true in the config file to ensure that all of your rebalances are profitable by default.

[https://coinhodler04108.com/helpful-resources coinhodler04108.com] has a list of helpful resources.
&lt;/translate&gt;</text>
      <sha1>q3iwpq0t4jqeqb5r6mgm7dh0cua77qv</sha1>
    </revision>
  </page>
  <page>
    <title>Resources/en</title>
    <ns>0</ns>
    <id>949</id>
    <revision>
      <id>1477</id>
      <timestamp>2021-10-02T20:57:11Z</timestamp>
      <contributor>
        <username>FuzzyBot</username>
        <id>29</id>
      </contributor>
      <comment>Updating to match new version of source page</comment>
      <origin>1477</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="1212" sha1="juz1knaemgpknczug8na9n2xb2neqxc" xml:space="preserve">&lt;languages/&gt;
Here are some External Resources which can assist you in your journey as a node runner. Install at your own risk and after your own research.

[https://github.com/lnbook/lnbook Must Read e-Book] by some awesome people like Antonopoulos, Pickhardt and Roasbeef. 
It's written in simple language and a few hours of effort can really help you in the long run.

[https://github.com/alexbosworth/balanceofsatoshis bos] for node management, rebalancing, telegram interface, command-line interfaces.

[https://github.com/accumulator/charge-lnd charge lnd] for automated fee adjustment scripts

[https://github.com/smallworlnd/stream-lnd-htlcs Streaming HTLC events] for monitoring routing traffic.

[https://github.com/C-Otto/rebalance-lnd Rebalance Lnd] for rebalancing

[https://gridflare.xyz/ For recommendations to improve your centrality and betweenness]

[https://lnnodeinsight.com/ For channel simulation, peer network and other views]

[https://lnrouter.app/ Terminal Score Debugger and other tools]

[https://bitcoinsecurity.guide/ Bitcoin Security Guide]

[https://github.com/BhaagBoseDK/autorebalance Simple Auto Rebalance Script] to keep a minimum balance on every channel at a reasonable cost.</text>
      <sha1>juz1knaemgpknczug8na9n2xb2neqxc</sha1>
    </revision>
  </page>
  <page>
    <title>Running A Profitable Routing Node</title>
    <ns>0</ns>
    <id>62</id>
    <revision>
      <id>2272</id>
      <parentid>2265</parentid>
      <timestamp>2022-02-20T00:28:48Z</timestamp>
      <contributor>
        <username>VS</username>
        <id>18</id>
      </contributor>
      <minor/>
      <origin>2272</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="3325" sha1="h6kbgru411tfxkyp3vmnepqpbcr5wej" xml:space="preserve">&lt;languages/&gt;
&lt;translate&gt;
&lt;!--T:1--&gt;
The profitability of a routing node is like for any business - revenue minus costs.  Revenue consists of fees that your node collects when routing transactions.  Costs consist of channel close/open fees, costs to move sats to your node, channel rebalance costs, and loop in/outs. Therefore, your node is profitable as long as revenue minus costs is positive.  Tracking [https://t.me/plebnet/40471 nodes's p&amp;l] on a weekly basis may give you a good idea of how your node is progressing towards profitability. It is important to have [https://t.me/plebnet/81578 KPIs] for your node which you can measure before you can improve it.

&lt;!--T:2--&gt;
Profitability is an important objective to keep in mind, but it takes time to get there. So when beginning your Lightning journey, it's essential to keep an open mind and be prepared to learn.  There is no right or wrong way to develop your node, so it comes down to the strategy that you opt to follow.  [https://youtu.be/LRZy-VtCPe4 Allocate your capital strategically] and be mindful of the costs (channel open/close, rebalancing, etc) and they do add up.

&lt;!--T:3--&gt;
We talk about channel girth (size in sats) quite a bit, but the quality of [https://bitcoinmagazine.com/.amp/culture/four-tips-run-profitable-lightning-node your peer is more important than girth].  In other words, you can have a very liquid 2mil sats channel and an illiquid 10mil channel.  With that being said, a girthier channel to a quality peer is better.

&lt;!--T:4--&gt;
A quality peer is a well-maintained active node that can help you get more traffic.  One metric that you can look at when selecting a peer is [https://medium.com/@jungly/measuring-node-centrality-in-lightning-network-8102a59999f0 centrality] - how close your node is to the center of the graph as opposed to being on the outside. In addition, here are some of the tools that can help optimize your node's centrality: [https://lnnodeinsight.com/ lnnodeinsight] - has a channel simulator to test centrality before establishing a channel with a node; [http://gridflare.xyz gridflare] - provides node recommendations to improve centrality.

&lt;!--T:5--&gt;
Your node will have a mix of channels of different sizes.  In general, it does not make sense to keep liquidity in channels with inactive peers.  You'd want to re-allocate your inactive liquidity either through circular rebalancing or through closing inactive channels and utilizing the freed-up liquidity elsewhere.  You will incur fees either way, so it comes down to weighing pros/cost of the options.  Based on our experience, mixing small channels with big channels does not impact a node's routing ability.

&lt;!--T:8--&gt;
The following links discuss strategies and options you have available to run a profitable routing node.

&lt;!--T:9--&gt;
*[[Special:MyLanguage/Fees And Profitability|Fees And Profitability]] (Includes instructions for auto-adjusting fees, simple auto rebalancing, and automatic KPI script!)

&lt;!--T:10--&gt;
*[[Special:MyLanguage/Balancing Nodes|Balancing Nodes]]

&lt;!--T:11--&gt;
*[[Special:MyLanguage/Help! I do not see any routing through my node|Help! I do not see any routing through my node]]

&lt;!--T:12--&gt;
*[[Special:MyLanguage/Help! My sats are only moving in one direction|Help! My sats are only moving in one direction]]

&lt;/translate&gt;</text>
      <sha1>h6kbgru411tfxkyp3vmnepqpbcr5wej</sha1>
    </revision>
  </page>
  <page>
    <title>Running A Profitable Routing Node/en</title>
    <ns>0</ns>
    <id>363</id>
    <revision>
      <id>854</id>
      <timestamp>2021-10-02T19:46:47Z</timestamp>
      <contributor>
        <username>FuzzyBot</username>
        <id>29</id>
      </contributor>
      <comment>Updating to match new version of source page</comment>
      <origin>854</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="3864" sha1="kthou3yl4x8wvoa7v9g54q857m9jlte" xml:space="preserve">&lt;languages/&gt;
The profitability of a routing node is like for any business - revenue minus costs.  Revenue consists of fees that your node collects when routing transactions.  Costs consist of channel close/open fees, costs to move sats to your node, channel rebalance costs, and loop in/outs. Therefore, your node is profitable as long as revenue minus costs is positive.  Tracking [https://t.me/plebnet/40471 nodes's p&amp;l] on a weekly basis may give you a good idea of how your node is progressing towards profitability. It is important to have [https://t.me/plebnet/81578 KPIs] for your node which you can measure before you can improve it.

Profitability is an important objective to keep in mind, but it takes time to get there. So when beginning your Lightning journey, it's essential to keep an open mind and be prepared to learn.  There is no right or wrong way to develop your node, so it comes down to the strategy that you opt to follow.  [https://youtu.be/LRZy-VtCPe4 Allocate your capital strategically] and be mindful of the costs (channel open/close, rebalancing, etc) and they do add up.

We talk about channel girth (size in sats) quite a bit, but the quality of [https://bitcoinmagazine.com/.amp/culture/four-tips-run-profitable-lightning-node your peer is more important than girth].  In other words, you can have a very liquid 2mil sats channel and an illiquid 10mil channel.  With that being said, a girthier channel to a quality peer is better.

A quality peer is a well-maintained active node that can help you get more traffic.  One metric that you can look at when selecting a peer is [https://medium.com/@jungly/measuring-node-centrality-in-lightning-network-8102a59999f0 centrality] - how close your node is to the center of the graph as opposed to being on the outside. In addition, here are some of the tools that can help optimize your node's centrality: [https://lnnodeinsight.com/ lnnodeinsight] - has a channel simulator to test centrality before establishing a channel with a node; [http://gridflare.xyz gridflare] - provides node recommendations to improve centrality.

Your node will have a mix of channels of different sizes.  In general, it does not make sense to keep liquidity in channels with inactive peers.  You'd want to re-allocate your inactive liquidity either through circular rebalancing or through closing inactive channels and utilizing the freed-up liquidity elsewhere.  You will incur fees either way, so it comes down to weighing pros/cost of the options.  Based on our experience, mixing small channels with big channels does not impact a node's routing ability.

[https://terminal.lightning.engineering/ Terminal Web] classifies nodes into good and pending and assigns a score. Based on our experience, the score does not materially affect routing, even though it helps attract other nodes to connect to yours (sort of like a marketing tool). You can use the [https://lnrouter.app/scores/terminal Terminal Score Debugger] tool to debug and optimize your node's score.

[https://plebnet.wiki/wiki/Umbrel_-_Installing_BoS Balance of Satoshis] is an excellent tool to help you optimize channel rebalancing. It'll show you routing hops along with fees for each hop.  You can then further optimize rebalancing cost by excluding expensive nodes.

The following links discuss strategies and options you have available to run a profitable routing node.

*[[Special:MyLanguage/Fees And Profitability|Fees And Profitability]] (Includes instructions for auto-adjusting fees, simple auto rebalancing, and automatic KPI script!)

*[[Special:MyLanguage/Balancing Nodes|Balancing Nodes]]

*[[Special:MyLanguage/Help! I do not see any routing through my node|Help! I do not see any routing through my node]]

*[[Special:MyLanguage/Help! My sats are only moving in one direction|Help! My sats are only moving in one direction]]</text>
      <sha1>kthou3yl4x8wvoa7v9g54q857m9jlte</sha1>
    </revision>
  </page>
  <page>
    <title>Setting a node alias</title>
    <ns>0</ns>
    <id>16</id>
    <revision>
      <id>2223</id>
      <parentid>1072</parentid>
      <timestamp>2022-01-06T16:32:12Z</timestamp>
      <contributor>
        <username>Mads</username>
        <id>8</id>
      </contributor>
      <comment>/* How to Set an Alias and Color for Your Node */</comment>
      <origin>2223</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="1754" sha1="5fifr0yyvpv9gfar19lqlghor85f01m" xml:space="preserve">&lt;languages/&gt;
&lt;translate&gt;

=== How to Set an Alias and Color for Your Node ===

Personalizing your node makes it easier for your node to be identified by others. You can give it a name and a color that shows up when your node is viewed using external applications, such as [https://1ml.com/ 1ml] and [http://graph.kycjelly.com/ graph.kycjelly.com].

In order to do this, you will need to access your node via the command line terminal using SSH. If you’re using Umbrel/LND, use [https://lightningwiki.net/index.php/Setting_alias_and_color_for_Umbrel these instructions].
If you are using Raspiblitz, you will be prompted to name your node (setting your alias) during setup, but you can also change it later by accessing lndconf in the ‘system’ option on the main menu screen. 

If you’re familiar with the Linux command line, you’ll find this step very simple. [https://www.guru99.com/linux-commands-cheat-sheet.html You can view a cheat sheet of common Linux commands here].



[[File:Change alias.jpeg|500px]]


Important note: Whenever you update your node’s software, you will need to reset these settings, so you should take note of the these settings for reference. (Do not overwrite the new lnd.conf with your old version, just update those specific lines.)

== Emojis ==

You can place emojis in your node alias to spice things up a bit! Don't go too crazy please, and include some regular characters so people can easily search for your node. To add an emoji simply copy the emoji (from an internet webpage, for example) and paste it into the LND conf file where you would normally edit your alias. It may not show up properly in command line, but when you save and exit it should show up properly nearly everywhere else!
&lt;/translate&gt;</text>
      <sha1>5fifr0yyvpv9gfar19lqlghor85f01m</sha1>
    </revision>
  </page>
  <page>
    <title>Suez</title>
    <ns>0</ns>
    <id>46</id>
    <revision>
      <id>1073</id>
      <parentid>202</parentid>
      <timestamp>2021-10-02T19:52:01Z</timestamp>
      <contributor>
        <username>Lucasdcf</username>
        <id>27</id>
      </contributor>
      <comment>Prepared the page for translation</comment>
      <origin>1073</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="928" sha1="cy0yjqz0txu1j6ihtvd9m6g550des9t" xml:space="preserve">&lt;languages/&gt;
&lt;translate&gt;
Suez is a “Tool for pretty printing and optimizing Lightning Network channels.”.


[[File: Suez_tui.png|800px]]


= Installation =

A good place to save third party software on your node is the ~/src directory.

    mkdir -p ~/src
    cd ~/src


=== Cloning from Git ===

We’ll need to clone the code from github, this is done using git. So let’s first make sure we have git installed:

    sudo apt-get install git -y
    git —version
    git clone https://github.com/prusnak/suez.git
    cd suez


=== Python &amp; Poetry ===

Suez is implemented in Python3, and uses ‘poetry’ for its dependencies. Python3 is the default python version if you’re running Ubuntu &gt;= 20.04.

    python3 —version
    pip3 install poetry


=== Installing dependencies and running suez ===

At this point you should be able to complete the last 2 steps:

    poetry install
    poetry run ./suez
&lt;/translate&gt;</text>
      <sha1>cy0yjqz0txu1j6ihtvd9m6g550des9t</sha1>
    </revision>
  </page>
  <page>
    <title>Terminal UIs</title>
    <ns>0</ns>
    <id>6</id>
    <revision>
      <id>1074</id>
      <parentid>14</parentid>
      <timestamp>2021-10-02T19:52:11Z</timestamp>
      <contributor>
        <username>Lucasdcf</username>
        <id>27</id>
      </contributor>
      <comment>Prepared the page for translation</comment>
      <origin>1074</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="472" sha1="buqyvrj0trv5blmlo3zgoya0eeqonto" xml:space="preserve">&lt;languages/&gt;
&lt;translate&gt;
Terminal UIs (TUIs) enable lightning node operators to interact with their nodes graphically via a Terminal (as opposed to a web browser). This has the advantage of requiring a smaller software stack than browser-based user interfaces.


== Lightning TUIs ==


=== Suez ===

Suez is a [https://github.com/prusnak/suez Tool for pretty printing and optimizing Lightning Network channels] written in Python.

[[File: Suez_tui.png|800px]]
&lt;/translate&gt;</text>
      <sha1>buqyvrj0trv5blmlo3zgoya0eeqonto</sha1>
    </revision>
  </page>
  <page>
    <title>UPS</title>
    <ns>0</ns>
    <id>15</id>
    <revision>
      <id>2271</id>
      <parentid>2270</parentid>
      <timestamp>2022-02-15T17:17:27Z</timestamp>
      <contributor>
        <username>Phijo</username>
        <id>45</id>
      </contributor>
      <origin>2271</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="9205" sha1="gd0t9nksx4my5zj5hjju1uws11rnoyf" xml:space="preserve">&lt;languages/&gt;
&lt;translate&gt;

=== Add a Backup Power Supply === &lt;!--T:1--&gt;

&lt;!--T:2--&gt;
A UPS (uninterruptible power supply) ensures that your node continues to function through minor power fluctuations and power outages.

&lt;!--T:3--&gt;
If you don’t shut your Raspberry Pi down properly this is essentially the same as pulling the power cord out of your desktop computer every time you want to shut it down. When this happens, you risk corrupting your device’s SD card, as well as data on your hard drive.

&lt;!--T:4--&gt;
The solution is that you plug your device into a high-output power bank. This is basically a juiced-up version of what you might use to charge your phone while camping. The battery pack gets plugged into the wall and your device gets plugged into the battery pack.

&lt;!--T:5--&gt;
A UPS should only be relied on to provide you with enough time to safely shut down your node until your power is restored. You should not connect your router or modem to the UPS due to potential data corruption that may occur if your node is in the process of writing to the disk when a power outage occurs.

&lt;!--T:6--&gt;
Many UPS devices have a loud audible alert that will be triggered when the power goes out.

&lt;!--T:7--&gt;
Here are some options to consider:

&lt;!--T:8--&gt;
* https://www.amazon.com/APC-Battery-Protector-Back-UPS-BE600M1/dp/B01FWAZEIU/ref=sr_1_1?dchild=1&amp;keywords=B01FWAZEIU&amp;qid=1632500054&amp;sr=8-1
* https://www.amazon.com/Liebert-Protection-Three-Year-Warranty-PST5-660MT120/dp/B07BXZPF99/ref=sr_1_1?dchild=1&amp;keywords=B07BXZPF99&amp;qid=1632500142&amp;sr=8-1
* https://www.amazon.co.uk/gp/product/B07BZCD927/ For those looking for UK Sockets.


==== Advanced UPS Setup ==== &lt;!--T:9--&gt;

&lt;!--T:10--&gt;
If you want to automate a graceful shutdown for the node once the UPS power capacity goes to a minimum level, you can connect the UPS Serial port (via USB) to the Raspberry Pi or PC and have it communicate with the UPS once configuring the UPS daemon in the Pi or you Linux setup correctly, it will initiate a graceful shutdown if the capacity hits 5%

&lt;!--T:11--&gt;
The following steps should be run via SSH:

&lt;!--T:12--&gt;
&lt;pre&gt;sudo apt-get install apcupsd
sudo nano /etc/default/apcupsd&lt;/pre&gt;
In /etc/default/apcupsd change ‘ISCONFIGURED=no’ to ‘ISCONFIGURED=yes’

&lt;!--T:13--&gt;
&lt;pre&gt;sudo nano  /etc/apcupsd/apcupsd.conf&lt;/pre&gt;
Change the values as below, make sure the DEVICE field is empty, the default is /dev/ttyS0 and should be cleared.

&lt;!--T:14--&gt;
&lt;pre&gt;UPSNAME myups
UPSCABLE usb
UPSTYPE usb
DEVICE&lt;/pre&gt;
Note - Make sure the Restart apcupsd

&lt;!--T:15--&gt;
&lt;pre&gt;sudo apcupsd restart&lt;/pre&gt;


===Check UPS=== &lt;!--T:16--&gt;

&lt;!--T:17--&gt;
CHECK IF UPS IS RECOGNISED OR ELSE YOU WILL HAVE TO STOP IT!

&lt;!--T:18--&gt;
&lt;pre&gt;apcaccess status&lt;/pre&gt;

&lt;!--T:19--&gt;
if this shows 

&lt;!--T:20--&gt;
&lt;code&gt;STATUS   : COMMLOST&lt;/code&gt;

&lt;!--T:21--&gt;
do the following further checks - it could be that UPS is not recognised in USB due to power issue. 
&lt;pre&gt;lsusb&lt;/pre&gt;
will list the connected UBS devices. On some umbrel installations, UPS is not recognised on the USB bus and if that happens you would not see that in the output of this command.
&lt;pre&gt;
umbrel@umbrel:~ $ lsusb
Bus 002 Device 002: ID 2109:0715 VIA Labs, Inc. 
Bus 002 Device 001: ID 1d6b:0003 Linux Foundation 3.0 root hub
Bus 001 Device 001: ID 1d6b:0002 Linux Foundation 2.0 root hub
umbrel@umbrel:~ $ 
&lt;/pre&gt;
If this happens on your node, there is an issue and you must check /var/log/syslog
&lt;pre&gt;
tail -f /var/log/syslog
&lt;/pre&gt;
if you see lots of USB related error messages written of the following description
&lt;pre&gt;
Jul 26 14:30:55 umbrel kernel: [ 6004.122153] usb 1-1: new high-speed USB device number 122 using xhci_hcd
Jul 26 14:30:55 umbrel kernel: [ 6004.122286] xhci_hcd 0000:01:00.0: Setup ERROR: setup address command for slot 1.
Jul 26 14:30:55 umbrel kernel: [ 6004.330262] xhci_hcd 0000:01:00.0: Setup ERROR: setup address command for slot 1.
Jul 26 14:30:55 umbrel kernel: [ 6004.542121] usb 1-1: device not accepting address 122, error -22
Jul 26 14:30:55 umbrel kernel: [ 6004.670139] usb 1-1: new high-speed USB device number 123 using xhci_hcd
&lt;/pre&gt;
you should stop the apcupsd since your device is not recognising the UPS and filling up the syslog with error messages. If you keep it running UPSD which cannot connect to the UBS device, the syslog will be bloated with these error messages.
you can press ctrl-c to stop the output from tail -f

&lt;!--T:22--&gt;
&lt;pre&gt;sudo /etc/init.d/apcupsd stop&lt;/pre&gt;
and 
&lt;pre&gt;
sudo nano /etc/default/apcupsd&lt;/pre&gt;
In /etc/default/apcupsd change ‘ISCONFIGURED=yes’ to ‘ISCONFIGURED=no’

&lt;!--T:23--&gt;
The implications are that your UPS will protect only for short power outages but would not safely shutdown. We are still looking for solutions for this issue which could be related to the power supply to SSD on some installations.

&lt;!--T:24--&gt;
IF YOUR UPS WAS RECOGNISED and you did not see any issues in syslog as above you are good and proceed below.


===Proceed Further=== &lt;!--T:25--&gt;

&lt;!--T:26--&gt;
Check UPS status:

&lt;!--T:27--&gt;
&lt;pre&gt;apcaccess status&lt;/pre&gt;
output example:

&lt;!--T:28--&gt;
&lt;pre&gt;$ apcaccess status
APC      : 001,035,0900
DATE     : 2021-06-14 02:13:51 +0000
HOSTNAME : umbrelmavic
VERSION  : 3.14.14 (31 May 2016) debian
UPSNAME  : myups
CABLE    : USB Cable
DRIVER   : USB UPS Driver
UPSMODE  : Stand Alone
STARTTIME: 2021-06-13 01:38:35 +0000
MODEL    : Back-UPS ES 350
STATUS   : ONLINE
LINEV    : 120.0 Volts
LOADPCT  : 0.0 Percent
BCHARGE  : 100.0 Percent
TIMELEFT : 36.4 Minutes
MBATTCHG : 5 Percent
MINTIMEL : 3 Minutes
MAXTIME  : 0 Seconds
SENSE    : High
LOTRANS  : 88.0 Volts
HITRANS  : 139.0 Volts
ALARMDEL : 30 Seconds
BATTV    : 13.7 Volts
LASTXFER : Unacceptable line voltage changes
NUMXFERS : 1
XONBATT  : 2021-06-13 01:50:34 +0000
TONBATT  : 0 Seconds
CUMONBATT: 251 Seconds
XOFFBATT : 2021-06-13 01:54:45 +0000
STATFLAG : 0x05000008
SERIALNO : XXXXXXXXXXXX
BATTDATE : 2007-06-08
NOMINV   : 120 Volts
NOMBATTV : 12.0 Volts
FIRMWARE : 823.B1.D USB FW:B1
END APC  : 2021-06-14 02:13:55 +0000&lt;/pre&gt;

&lt;!--T:29--&gt;
Once the output looks correct, specifically the STATUS shows as ONLINE, you can test the setup by disconnecting the UPS from the main power, watch the message prompts on the terminal and and let the battery drain until the point that a showdown will be initiated, this will confirm that your setup is correct.
&lt;/translate&gt;


===  Setting up the UPS with NUT  === &lt;!--T:30--&gt;
Network UPS Tools (NUT) supports lots of different UPS types and provides another option of configuring a UPS with a node where the node and the UPS communicate. 
Working with lots of UPS and generally quite well with Linux it might be a good choice if your UPS is supported. 

To see if your UPS is supported visit:
https://networkupstools.org/stable-hcl.html

I tested it with a Raspiblitz and an Eaton 3S and it worked perfectly.
https://networkupstools.org/

The configuration itself as well as some more advanced features are explained in an easy to follow set of commands here:
https://wiki.ipfire.org/addons/nut/detailed

After everything is set up as described you might want to change some parameters to better match the nodes and your personal requirements:
In /etc/nut/upsmon.conf one should replace the SHUTDOWNCMD "/sbin/shutdown -h +0" with the suitable command to shut down the node without killing running processes like LND etc.
The correct command to shut down a Raspiblitz seems to be "/home/admin/config.scripts/blitz.shutdown.sh" for example. 
So the line 
&lt;pre&gt;
SHUTDOWNCMD "/sbin/shutdown -h +0"
&lt;/pre&gt; 
should be replaced with 
&lt;pre&gt; SHUTDOWNCMD "/home/admin/config.scripts/blitz.shutdown.sh"&lt;/pre&gt; 
in case of a Raspiblitz.

I also wanted to change the behavior once the power is lost. 
I wanted the node to be powered down much sooner than the default value. 
So I used the following command to set the value for low battery to 90%. :
&lt;pre&gt; upsrw -s battery.charge.low=90 -u admin -p mypasswd &lt;/pre&gt;  
(mypasswd should obviously be replaced with you password) 
Now the node would be shut down at 90% battery remaining giving it all the time in the world to power off safely.

To view a complete list of the UPS variables, both informational and modifiable (while UPS is the Name of you UPS) use:

&lt;pre&gt; upsc UPS &lt;/pre&gt;  

To determine the modifiable variables for your UPS, their current settings and their available setting values execute the command: 

&lt;pre&gt; upsrw UPS&lt;/pre&gt;  

You can now modify the variables you wish using a command similar to the following: 

&lt;pre&gt; upsrw -s battery.charge.low=20 -u admin -p admin UPS &lt;/pre&gt;  

Some resources that might help for individual configuration:
https://networkupstools.org/docs/user-manual.chunked/ar01s06.html
https://wiki.ipfire.org/addons/nut/detailed

To test everything you can plug you laptop into the ups (for draining the battery faster), plug the node not into the USP but some other power source.
Then connect the USB-cable of the UPS to the node and disconnect the UPS from external power after that. 
That way the battery will drain because of the Laptop, it will eventually reach low battery state and execute the shutdown command for the node.
At least if you have set everything up correctly...</text>
      <sha1>gd0t9nksx4my5zj5hjju1uws11rnoyf</sha1>
    </revision>
  </page>
  <page>
    <title>UPS/ar</title>
    <ns>0</ns>
    <id>1324</id>
    <revision>
      <id>2410</id>
      <parentid>2408</parentid>
      <timestamp>2022-03-04T14:07:35Z</timestamp>
      <contributor>
        <username>Bamski</username>
        <id>46</id>
      </contributor>
      <comment>Created page with "إذا لم تقم بإيقاف تشغيل Raspberry Pi بشكل صحيح، فهذا مشابه لسحب سلك الطاقة من جهاز الكمبيوتر  في كل مرة..."</comment>
      <origin>2410</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="7997" sha1="orutscbmqngv05j8o2l80zyilbcg7fx" xml:space="preserve">&lt;languages/&gt;

== إضافة امداد كهربائي احتياطي ==

يضمن UPS (بطاريات الامداد المتواصل) أن تستمر العقدة في العمل خلال تقلبات الطاقة الطفيفة وانقطاع التيار الكهربائي.

إذا لم تقم بإيقاف تشغيل Raspberry Pi بشكل صحيح، فهذا مشابه لسحب سلك الطاقة من جهاز الكمبيوتر  في كل مرة تريد إيقاف تشغيله. عندما يحدث هذا ، فإنك تخاطر بإتلاف بطاقة الذاكرة SD بجهازك، وكذلك البيانات الموجودة على محرك الأقراص الثابتة SSD.

الحل هو أن تقوم بتوصيل جهازك ببنك طاقة عالي الإنتاج. هذا الجهاز يعتبر شبيهًا  ببنك الطاقة الذي قد تستخدمه لشحن هاتفك أثناء التخييم ولكنه أقوى بكثير.  يتم توصيل حزمة البطارية بالحائط ويتم توصيل جهازك بحزمة البطارية.

يجب الاعتماد على UPS فقط لتزويدك بالوقت الكافي لإيقاف تشغيل العقدة بأمان حتى يتم استعادة التيار الكهربائي. يجب ألا تقوم بتوصيل الراوتر أو المودم الخاص بك بـ UPS نظرًا لاحتمال تلف البيانات الذي قد يحدث إذا كانت العقدة الخاصة بك في طور الكتابة إلى القرص عند حدوث انقطاع للتيار الكهربائي.

تحتوي العديد من أجهزة UPS على تنبيه صوتي مرتفع يتم تشغيله عند انقطاع التيار الكهربائي.

وفيما يلي بعض الخيارات للنظر فيها:

&lt;div lang="en" dir="ltr" class="mw-content-ltr"&gt;
* https://www.amazon.com/APC-Battery-Protector-Back-UPS-BE600M1/dp/B01FWAZEIU/ref=sr_1_1?dchild=1&amp;keywords=B01FWAZEIU&amp;qid=1632500054&amp;sr=8-1
* https://www.amazon.com/Liebert-Protection-Three-Year-Warranty-PST5-660MT120/dp/B07BXZPF99/ref=sr_1_1?dchild=1&amp;keywords=B07BXZPF99&amp;qid=1632500142&amp;sr=8-1
* https://www.amazon.co.uk/gp/product/B07BZCD927/ For those looking for UK Sockets.
&lt;/div&gt;


==== إعداد UPS بشكل احترافي ====

إذا كنت ترغب في أتمتة إيقاف تشغيل للعقدة بشكل مريح بمجرد وصول سعة طاقة UPS إلى الحد الأدنى، يمكنك توصيل منفذ UPS التسلسلي (عبر USB) بـ Raspberry Pi أو الكمبيوتر الشخصي وجعله يتواصل مع UPS بمجرد إعداد البرنامج الخفي الخاص بالـ UPS داخل جهاز Pi أو Linux الخاص بك بشكل صحيح، سيبدأ عملية إيقاف تشغيل مريحة إذا وصلت السعة إلى 5٪

&lt;div lang="en" dir="ltr" class="mw-content-ltr"&gt;
The following steps should be run via SSH:
&lt;/div&gt;

&lt;div lang="en" dir="ltr" class="mw-content-ltr"&gt;
&lt;pre&gt;sudo apt-get install apcupsd
sudo nano /etc/default/apcupsd&lt;/pre&gt;
In /etc/default/apcupsd change ‘ISCONFIGURED=no’ to ‘ISCONFIGURED=yes’
&lt;/div&gt;

&lt;div lang="en" dir="ltr" class="mw-content-ltr"&gt;
&lt;pre&gt;sudo nano  /etc/apcupsd/apcupsd.conf&lt;/pre&gt;
Change the values as below, make sure the DEVICE field is empty, the default is /dev/ttyS0 and should be cleared.
&lt;/div&gt;

&lt;div lang="en" dir="ltr" class="mw-content-ltr"&gt;
&lt;pre&gt;UPSNAME myups
UPSCABLE usb
UPSTYPE usb
DEVICE&lt;/pre&gt;
Note - Make sure the Restart apcupsd
&lt;/div&gt;

&lt;div lang="en" dir="ltr" class="mw-content-ltr"&gt;
&lt;pre&gt;sudo apcupsd restart&lt;/pre&gt;
&lt;/div&gt;

&lt;div lang="en" dir="ltr" class="mw-content-ltr"&gt;
===Check UPS===
&lt;/div&gt;

&lt;div lang="en" dir="ltr" class="mw-content-ltr"&gt;
CHECK IF UPS IS RECOGNISED OR ELSE YOU WILL HAVE TO STOP IT!
&lt;/div&gt;

&lt;div lang="en" dir="ltr" class="mw-content-ltr"&gt;
&lt;pre&gt;apcaccess status&lt;/pre&gt;
&lt;/div&gt;

&lt;div lang="en" dir="ltr" class="mw-content-ltr"&gt;
if this shows
&lt;/div&gt; 

&lt;div lang="en" dir="ltr" class="mw-content-ltr"&gt;
&lt;code&gt;STATUS   : COMMLOST&lt;/code&gt;
&lt;/div&gt;

&lt;div lang="en" dir="ltr" class="mw-content-ltr"&gt;
do the following further checks - it could be that UPS is not recognised in USB due to power issue. 
&lt;pre&gt;lsusb&lt;/pre&gt;
will list the connected UBS devices. On some umbrel installations, UPS is not recognised on the USB bus and if that happens you would not see that in the output of this command.
&lt;pre&gt;
umbrel@umbrel:~ $ lsusb
Bus 002 Device 002: ID 2109:0715 VIA Labs, Inc. 
Bus 002 Device 001: ID 1d6b:0003 Linux Foundation 3.0 root hub
Bus 001 Device 001: ID 1d6b:0002 Linux Foundation 2.0 root hub
umbrel@umbrel:~ $ 
&lt;/pre&gt;
If this happens on your node, there is an issue and you must check /var/log/syslog
&lt;pre&gt;
tail -f /var/log/syslog
&lt;/pre&gt;
if you see lots of USB related error messages written of the following description
&lt;pre&gt;
Jul 26 14:30:55 umbrel kernel: [ 6004.122153] usb 1-1: new high-speed USB device number 122 using xhci_hcd
Jul 26 14:30:55 umbrel kernel: [ 6004.122286] xhci_hcd 0000:01:00.0: Setup ERROR: setup address command for slot 1.
Jul 26 14:30:55 umbrel kernel: [ 6004.330262] xhci_hcd 0000:01:00.0: Setup ERROR: setup address command for slot 1.
Jul 26 14:30:55 umbrel kernel: [ 6004.542121] usb 1-1: device not accepting address 122, error -22
Jul 26 14:30:55 umbrel kernel: [ 6004.670139] usb 1-1: new high-speed USB device number 123 using xhci_hcd
&lt;/pre&gt;
you should stop the apcupsd since your device is not recognising the UPS and filling up the syslog with error messages. If you keep it running UPSD which cannot connect to the UBS device, the syslog will be bloated with these error messages.
you can press ctrl-c to stop the output from tail -f
&lt;/div&gt;

&lt;div lang="en" dir="ltr" class="mw-content-ltr"&gt;
&lt;pre&gt;sudo /etc/init.d/apcupsd stop&lt;/pre&gt;
and 
&lt;pre&gt;
sudo nano /etc/default/apcupsd&lt;/pre&gt;
In /etc/default/apcupsd change ‘ISCONFIGURED=yes’ to ‘ISCONFIGURED=no’
&lt;/div&gt;

&lt;div lang="en" dir="ltr" class="mw-content-ltr"&gt;
The implications are that your UPS will protect only for short power outages but would not safely shutdown. We are still looking for solutions for this issue which could be related to the power supply to SSD on some installations.
&lt;/div&gt;

&lt;div lang="en" dir="ltr" class="mw-content-ltr"&gt;
IF YOUR UPS WAS RECOGNISED and you did not see any issues in syslog as above you are good and proceed below.
&lt;/div&gt;


&lt;div lang="en" dir="ltr" class="mw-content-ltr"&gt;
===Proceed Further===
&lt;/div&gt;

&lt;div lang="en" dir="ltr" class="mw-content-ltr"&gt;
Check UPS status:
&lt;/div&gt;

&lt;div lang="en" dir="ltr" class="mw-content-ltr"&gt;
&lt;pre&gt;apcaccess status&lt;/pre&gt;
output example:
&lt;/div&gt;

&lt;div lang="en" dir="ltr" class="mw-content-ltr"&gt;
&lt;pre&gt;$ apcaccess status
APC      : 001,035,0900
DATE     : 2021-06-14 02:13:51 +0000
HOSTNAME : umbrelmavic
VERSION  : 3.14.14 (31 May 2016) debian
UPSNAME  : myups
CABLE    : USB Cable
DRIVER   : USB UPS Driver
UPSMODE  : Stand Alone
STARTTIME: 2021-06-13 01:38:35 +0000
MODEL    : Back-UPS ES 350
STATUS   : ONLINE
LINEV    : 120.0 Volts
LOADPCT  : 0.0 Percent
BCHARGE  : 100.0 Percent
TIMELEFT : 36.4 Minutes
MBATTCHG : 5 Percent
MINTIMEL : 3 Minutes
MAXTIME  : 0 Seconds
SENSE    : High
LOTRANS  : 88.0 Volts
HITRANS  : 139.0 Volts
ALARMDEL : 30 Seconds
BATTV    : 13.7 Volts
LASTXFER : Unacceptable line voltage changes
NUMXFERS : 1
XONBATT  : 2021-06-13 01:50:34 +0000
TONBATT  : 0 Seconds
CUMONBATT: 251 Seconds
XOFFBATT : 2021-06-13 01:54:45 +0000
STATFLAG : 0x05000008
SERIALNO : XXXXXXXXXXXX
BATTDATE : 2007-06-08
NOMINV   : 120 Volts
NOMBATTV : 12.0 Volts
FIRMWARE : 823.B1.D USB FW:B1
END APC  : 2021-06-14 02:13:55 +0000&lt;/pre&gt;
&lt;/div&gt;

&lt;div lang="en" dir="ltr" class="mw-content-ltr"&gt;
Once the output looks correct, specifically the STATUS shows as ONLINE, you can test the setup by disconnecting the UPS from the main power, watch the message prompts on the terminal and and let the battery drain until the point that a showdown will be initiated, this will confirm that your setup is correct.
&lt;/div&gt;</text>
      <sha1>orutscbmqngv05j8o2l80zyilbcg7fx</sha1>
    </revision>
  </page>
  <page>
    <title>UPS/en</title>
    <ns>0</ns>
    <id>933</id>
    <revision>
      <id>1457</id>
      <timestamp>2021-10-02T20:28:45Z</timestamp>
      <contributor>
        <username>FuzzyBot</username>
        <id>29</id>
      </contributor>
      <comment>Updating to match new version of source page</comment>
      <origin>1457</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="6001" sha1="ky7tvuaw7oeg8nraqg0gdxzb53uvka2" xml:space="preserve">&lt;languages/&gt;

=== Add a Backup Power Supply ===

A UPS (uninterruptible power supply) ensures that your node continues to function through minor power fluctuations and power outages.

If you don’t shut your Raspberry Pi down properly this is essentially the same as pulling the power cord out of your desktop computer every time you want to shut it down. When this happens, you risk corrupting your device’s SD card, as well as data on your hard drive.

The solution is that you plug your device into a high-output power bank. This is basically a juiced-up version of what you might use to charge your phone while camping. The battery pack gets plugged into the wall and your device gets plugged into the battery pack.

A UPS should only be relied on to provide you with enough time to safely shut down your node until your power is restored. You should not connect your router or modem to the UPS due to potential data corruption that may occur if your node is in the process of writing to the disk when a power outage occurs.

Many UPS devices have a loud audible alert that will be triggered when the power goes out.

Here are some options to consider:

* https://www.amazon.com/APC-Battery-Protector-Back-UPS-BE600M1/dp/B01FWAZEIU/ref=sr_1_1?dchild=1&amp;keywords=B01FWAZEIU&amp;qid=1632500054&amp;sr=8-1
* https://www.amazon.com/Liebert-Protection-Three-Year-Warranty-PST5-660MT120/dp/B07BXZPF99/ref=sr_1_1?dchild=1&amp;keywords=B07BXZPF99&amp;qid=1632500142&amp;sr=8-1
* https://www.amazon.co.uk/gp/product/B07BZCD927/ For those looking for UK Sockets.


==== Advanced UPS Setup ====

If you want to automate a graceful shutdown for the node once the UPS power capacity goes to a minimum level, you can connect the UPS Serial port (via USB) to the Raspberry Pi or PC and have it communicate with the UPS once configuring the UPS daemon in the Pi or you Linux setup correctly, it will initiate a graceful shutdown if the capacity hits 5%

The following steps should be run via SSH:

&lt;pre&gt;sudo apt-get install apcupsd
sudo nano /etc/default/apcupsd&lt;/pre&gt;
In /etc/default/apcupsd change ‘ISCONFIGURED=no’ to ‘ISCONFIGURED=yes’

&lt;pre&gt;sudo nano  /etc/apcupsd/apcupsd.conf&lt;/pre&gt;
Change the values as below, make sure the DEVICE field is empty, the default is /dev/ttyS0 and should be cleared.

&lt;pre&gt;UPSNAME myups
UPSCABLE usb
UPSTYPE usb
DEVICE&lt;/pre&gt;
Note - Make sure the Restart apcupsd

&lt;pre&gt;sudo apcupsd restart&lt;/pre&gt;

===Check UPS===

CHECK IF UPS IS RECOGNISED OR ELSE YOU WILL HAVE TO STOP IT!

&lt;pre&gt;apcaccess status&lt;/pre&gt;

if this shows 

&lt;code&gt;STATUS   : COMMLOST&lt;/code&gt;

do the following further checks - it could be that UPS is not recognised in USB due to power issue. 
&lt;pre&gt;lsusb&lt;/pre&gt;
will list the connected UBS devices. On some umbrel installations, UPS is not recognised on the USB bus and if that happens you would not see that in the output of this command.
&lt;pre&gt;
umbrel@umbrel:~ $ lsusb
Bus 002 Device 002: ID 2109:0715 VIA Labs, Inc. 
Bus 002 Device 001: ID 1d6b:0003 Linux Foundation 3.0 root hub
Bus 001 Device 001: ID 1d6b:0002 Linux Foundation 2.0 root hub
umbrel@umbrel:~ $ 
&lt;/pre&gt;
If this happens on your node, there is an issue and you must check /var/log/syslog
&lt;pre&gt;
tail -f /var/log/syslog
&lt;/pre&gt;
if you see lots of USB related error messages written of the following description
&lt;pre&gt;
Jul 26 14:30:55 umbrel kernel: [ 6004.122153] usb 1-1: new high-speed USB device number 122 using xhci_hcd
Jul 26 14:30:55 umbrel kernel: [ 6004.122286] xhci_hcd 0000:01:00.0: Setup ERROR: setup address command for slot 1.
Jul 26 14:30:55 umbrel kernel: [ 6004.330262] xhci_hcd 0000:01:00.0: Setup ERROR: setup address command for slot 1.
Jul 26 14:30:55 umbrel kernel: [ 6004.542121] usb 1-1: device not accepting address 122, error -22
Jul 26 14:30:55 umbrel kernel: [ 6004.670139] usb 1-1: new high-speed USB device number 123 using xhci_hcd
&lt;/pre&gt;
you should stop the apcupsd since your device is not recognising the UPS and filling up the syslog with error messages. If you keep it running UPSD which cannot connect to the UBS device, the syslog will be bloated with these error messages.
you can press ctrl-c to stop the output from tail -f

&lt;pre&gt;sudo /etc/init.d/apcupsd stop&lt;/pre&gt;
and 
&lt;pre&gt;
sudo nano /etc/default/apcupsd&lt;/pre&gt;
In /etc/default/apcupsd change ‘ISCONFIGURED=yes’ to ‘ISCONFIGURED=no’

The implications are that your UPS will protect only for short power outages but would not safely shutdown. We are still looking for solutions for this issue which could be related to the power supply to SSD on some installations.

IF YOUR UPS WAS RECOGNISED and you did not see any issues in syslog as above you are good and proceed below.


===Proceed Further===

Check UPS status:

&lt;pre&gt;apcaccess status&lt;/pre&gt;
output example:

&lt;pre&gt;$ apcaccess status
APC      : 001,035,0900
DATE     : 2021-06-14 02:13:51 +0000
HOSTNAME : umbrelmavic
VERSION  : 3.14.14 (31 May 2016) debian
UPSNAME  : myups
CABLE    : USB Cable
DRIVER   : USB UPS Driver
UPSMODE  : Stand Alone
STARTTIME: 2021-06-13 01:38:35 +0000
MODEL    : Back-UPS ES 350
STATUS   : ONLINE
LINEV    : 120.0 Volts
LOADPCT  : 0.0 Percent
BCHARGE  : 100.0 Percent
TIMELEFT : 36.4 Minutes
MBATTCHG : 5 Percent
MINTIMEL : 3 Minutes
MAXTIME  : 0 Seconds
SENSE    : High
LOTRANS  : 88.0 Volts
HITRANS  : 139.0 Volts
ALARMDEL : 30 Seconds
BATTV    : 13.7 Volts
LASTXFER : Unacceptable line voltage changes
NUMXFERS : 1
XONBATT  : 2021-06-13 01:50:34 +0000
TONBATT  : 0 Seconds
CUMONBATT: 251 Seconds
XOFFBATT : 2021-06-13 01:54:45 +0000
STATFLAG : 0x05000008
SERIALNO : XXXXXXXXXXXX
BATTDATE : 2007-06-08
NOMINV   : 120 Volts
NOMBATTV : 12.0 Volts
FIRMWARE : 823.B1.D USB FW:B1
END APC  : 2021-06-14 02:13:55 +0000&lt;/pre&gt;

Once the output looks correct, specifically the STATUS shows as ONLINE, you can test the setup by disconnecting the UPS from the main power, watch the message prompts on the terminal and and let the battery drain until the point that a showdown will be initiated, this will confirm that your setup is correct.</text>
      <sha1>ky7tvuaw7oeg8nraqg0gdxzb53uvka2</sha1>
    </revision>
  </page>
  <page>
    <title>Umbrel - Installing BoS</title>
    <ns>0</ns>
    <id>23</id>
    <revision>
      <id>2241</id>
      <parentid>2190</parentid>
      <timestamp>2022-01-15T00:32:15Z</timestamp>
      <contributor>
        <username>Noderunner</username>
        <id>24</id>
      </contributor>
      <comment>/* Installing Telegram Bot */</comment>
      <origin>2241</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="8723" sha1="fpfhpm3nc6gb83hn3dy0a0cceerex9p" xml:space="preserve">==Installing BOS==
These are the commands to enter in a command-line interface for Umbrel - (once you have ssh'd into your umbrel, you can follow these steps):

These instructions are from [https://github.com/alexbosworth/run-lnd#install-lnd bos installation instructions]. 

&lt;code&gt;
curl -sL https://deb.nodesource.com/setup_16.x | sudo -E bash -

sudo apt-get install -y nodejs
&lt;/code&gt;

Avoid using sudo with NPM

&lt;code&gt;
mkdir ~/.npm-global

npm config set prefix '~/.npm-global'
&lt;/code&gt;

Update path

&lt;code&gt;
nano ~/.profile
&lt;/code&gt;

Add a new line to the end:

&lt;code&gt;
PATH="$HOME/.npm-global/bin:$PATH"
&lt;/code&gt;

This line should be by itself, literally at the end. Outside of any "if then" code. 

Save and exit 
&lt;code&gt;ctrl + x &lt;br&gt;
y 
enter&lt;/code&gt;

update shell:

&lt;code&gt;
. ~/.profile
&lt;/code&gt;

Install balanceofsatoshis. This command also works for upgrade

&lt;code&gt;
npm i -g balanceofsatoshis
&lt;/code&gt;

=== Upgrading bos ===
Skip this step if you are installing BoS for the first time. Go down to next section, "Validate..."

If you already have bos and want to upgrade:

kill running telegram bot process

&lt;code&gt;ps -ef | grep bos | grep -v grep&lt;/code&gt; does it show the running process for bos telegram? if yes terminate that session with &lt;code&gt; kill -9 processid&lt;/code&gt; process id the is the first number in ps -ef outout (see below - the process id is 32605)
&lt;pre&gt;
umbrel@umbrel:~ $ ps -ef |grep bos | grep -v grep
umbrel   32605 10432  0 20:58 pts/2    00:00:11 node /usr/bin/bos telegram --connect
&lt;/pre&gt;

upgrade using (you may have to use sudo if you previously installed bos with sudo)

&lt;code&gt;
npm i -g balanceofsatoshis
&lt;/code&gt;

however, there could be some checks you can make before upgrade to make sure you do not run into trouble.

# if you have previously installed bos with &lt;code&gt;sudo npm i -g balanceofsatoshis&lt;/code&gt; please upgrade also with sudo or else you might run into version issues.
# if your upgrades succeed up &lt;code&gt;bos -V&lt;/code&gt; still gives the old version do the following


&lt;code&gt;find / -name bos 2&gt;/dev/null&lt;/code&gt;
does it show 4 areas?
&lt;pre&gt;
$ find / -name bos 2&gt;/dev/null
/usr/lib/node_modules/balanceofsatoshis/bos
/usr/bin/bos
/usr/local/lib/node_modules/balanceofsatoshis/bos
/usr/local/bin/bos
&lt;/pre&gt;
if yes, please delete the /usr/local/bin installation by
&lt;code&gt;
sudo rm /usr/local/bin/bos
sudo rm -r /usr/local/lib/node_modules/balanceofsatoshis
&lt;/code&gt;

check &lt;code&gt;/usr/bin/bos -V &lt;/code&gt; shows correct version?

then exit the shell and enter again. Check with &lt;code&gt;bos -V&lt;/code&gt;

reconnect your telegram bot with the new version.

=== Validate that the tool is working: ===

Run the following commands and validate the output (not an error):
&lt;p&gt;
&lt;code&gt;bos --version&lt;/code&gt;&lt;br&gt;
&lt;code&gt;bos utxos&lt;/code&gt;
&lt;/p&gt;

If you get a 503, UnexpectedgetUtxosError, do the following:
&lt;p&gt;


&lt;code&gt;sudo nano /etc/hosts&lt;/code&gt;&lt;br&gt;
add the following line at the bottom &lt;br&gt; &lt;br&gt;
&lt;code&gt;127.0.0.1 umbrel.local&lt;/code&gt; &lt;br&gt; &lt;br&gt;
Then save and exit, &lt;code&gt;ctrl + x &lt;br&gt;
y 
enter&lt;/code&gt;

&lt;br&gt;
Now test again

&lt;/p&gt;

=== Installing Telegram Bot ===

==== Video Instructions of Initial Setup====
Go to Telegram
Start chat with [https://t.me/BotFather @BotFather]
press 
&lt;code&gt;/start
/newbot
&lt;/code&gt;

Link to video instructions.
https://t.me/plebnet/153904

After the video setup, ''see also [[BoS Telegram AutoStart]]'' (OR) scroll down to the TMUX instructions to keep the bot running in the background. Use only one of them.


==== Text Instructions of Initial Setup====
Go to Telegram
Start chat with [https://t.me/BotFather @BotFather]
press 
&lt;code&gt;/start
/newbot
&lt;/code&gt;
Decide A bot name &lt;code&gt;NodeAliasNew&lt;/code&gt;
Decide a bot user name for telegram &lt;code&gt;BotName_bot&lt;/code&gt;

You will get a long alphanumeric API KEY for the bot, Note that. You can always retrieve it using &lt;code&gt;/mybot&lt;/code&gt; with BotFather
&lt;br&gt;
BotFather will give you a link to your new bot, click on it and it will take you to your bot.
&lt;br&gt;
Now come back to your node
&lt;br&gt;
On your SSH session run:
&lt;code&gt; bos telegram &lt;/code&gt;
at first prompt type API key (alpha numeric) received from BotFather.

In Telegram go to your bot by clicking on the link provided in BotFather (t.me/BotName_bot). Then press Start.

type &lt;code&gt;/connect&lt;/code&gt;
&lt;br&gt;
you will get a numeric key, type that numeric key on the second prompt in your ssh session with &lt;code&gt; bos telegram &lt;/code&gt;

You should get a connected message in your Telegram Bot as well as on SSH session.

Verify by typing &lt;code&gt;/version&lt;/code&gt; in your telegram bot and you should see the version number of bos.


Press Ctrl-C in SSH session with &lt;code&gt; bos telegram &lt;/code&gt;
&lt;br&gt;
bos telegram command needs to be running in the background for the bot to be online always, you can keep the bot online with either Docker or TMUX. If you prefer not to install docker or tmux option, see the disown/nohup section at the end.
&lt;br&gt;
&lt;br&gt;
''see also [[BoS Telegram AutoStart]]''

==== TMUX Instructions ====
TMUX
To use tmux, you can do the following:

&lt;code&gt;
sudo apt-get install tmux

tmux new -s &lt;give any session name&gt; 
&lt;/code&gt;

The session name can be anything you like to name. e.g. "my_telegram_bot"

then in that window
&lt;code&gt;
bos telegram --connect &lt;connect id&gt; 
&lt;/code&gt;
where connect_id is your connection id - numeric key received from bot.

at this point, your bot should be working

to detach from TMUX, now enter 
&lt;code&gt; 
ctrl+b 
d
&lt;/code&gt;
note ctrl-b is one command followed by d (not ctrl-b d together)

It should say detached from the session

If you want to connect back to this session later, just ssh again and then &lt;code&gt;tmux ls &lt;/code&gt; and you should see your session
you can then use &lt;code&gt;tmux attach -t &lt;YourSessionNameHere&gt; &lt;/code&gt;
you can keep attaching and detaching from the session
and it keeps running

tmux kill-server —— to kill the sessions
tmux attach -t &lt;session name&gt;

==== Disown or Nohup Instructions====
if you are not using docker or tmux and want a simpler unix way or running the process in background after you exit the shell you can use disown or nohup.

&lt;code&gt; bos telegram --connect &lt;yourConnectionCode&gt; 1&gt; /tmp/bos.log 2&gt;&amp;1 &amp; disown &lt;/code&gt;
OR
&lt;code&gt; nohup bos telegram --connect &lt;yourConnectionCode&gt; 1&gt; /tmp/bos.log 2&gt;&amp;1 &amp; &lt;/code&gt;

both command will execute the process in background and you will get the process id as

&lt;code&gt;
$ /usr/bin/bos telegram --connect XXXXXX 1&gt;/tmp/bos.log 2&gt;&amp;1 &amp; disown

[1] 26912 &lt;---- this process ID will be different for each session.
&lt;/code&gt;

when you are running under nohup, exit your shell by typing &lt;code&gt;exit&lt;/code&gt; on your shell prompt and do not just press x on there terminal window to close the window. Closing terminal window sends SIGTERM to terminated the running processes under the shell instead of SIGHUP. 

disown is preferred, some plebs have reported issues with nohup that the process exits after they exit from shell (possibly by closing the window instead of pressing exit).

==== Docker Instructions: ====
If you have done npm install as above, docker ends up running a separate copy and it will cause confusion when you upgrade (because your bos telegram would show a different version to rest of upgraded bos).
We suggest you run bos telegram under tmux, disown, or nohup as described above.
if you still prefer to run under docker the instructions are below.

Run:

&lt;code&gt;docker pull alexbosworth/balanceofsatoshis&lt;/code&gt; 

For upgragrade
&lt;code&gt;docker ps | grep bos | grep -v grep&lt;/code&gt; and note the container id of bos container.

&lt;code&gt;docker rm -f {container-id}&lt;/code&gt; to remove the previous image.

Now pull the new image and proceed to restart the bos container &lt;code&gt;docker ps&lt;/code&gt; to check the container id running bos and &lt;code&gt;docker restart &lt;container id&gt;&lt;/code&gt;

This is the UMBREL SPECIFIC docker command string to run the telegram bot:&lt;br&gt; &lt;code&gt;10.21.21.9&lt;/code&gt;, this is a sample LND_IP. To get your own LND_IP address to use in the docker command, run:
&lt;br&gt;
&lt;code&gt;cat /home/umbrel/.env &lt;/code&gt;
&lt;br&gt;
and replace the IP you get in the below command. 
&lt;br&gt;
&lt;code&gt;
docker run -d --restart always --network="host" --add-host=umbrel.local:10.21.21.9 -v $HOME/.bos:/home/node/.bos -v $HOME/umbrel/lnd:/home/node/.lnd:ro alexbosworth/balanceofsatoshis:latest telegram --connect &lt;YOUR CONNECT CODE HERE&gt;
&lt;/code&gt;

====Paying invoices from bot====
If you have secure access to your telegram account and you want to allow the Telegram Bot to pay invoices set a budget to pay for invoices through telegram using bot's &lt;code&gt;/pay&lt;/code&gt; command:

&lt;code&gt;bos telegram —-connect &lt;numeric key from telegram bot&gt; —-budget &lt;yourMaxBudget in sats&gt;&lt;/code&gt;

If you prefer to use bot only for messages from your node, do not set budget and it wont be able to pay any invoices.</text>
      <sha1>fpfhpm3nc6gb83hn3dy0a0cceerex9p</sha1>
    </revision>
  </page>
  <page>
    <title>Upgrading Umbrel Node</title>
    <ns>0</ns>
    <id>49</id>
    <revision>
      <id>1064</id>
      <parentid>700</parentid>
      <timestamp>2021-10-02T19:50:28Z</timestamp>
      <contributor>
        <username>Lucasdcf</username>
        <id>27</id>
      </contributor>
      <comment>Marked this version for translation</comment>
      <origin>1064</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="2626" sha1="r59w6sgmkrub4u5a4ao1i6z7ffw4but" xml:space="preserve">&lt;languages/&gt;
&lt;translate&gt;

== Intro == &lt;!--T:1--&gt;

&lt;!--T:2--&gt;
Every once in a while you may have to upgrade your node. When a new upgrade is available, your umbrel dashboard will show a message like this.

&lt;!--T:3--&gt;
[[File:Umbrell upgrade.jpg|File:Umbrell upgrade.jpg]]

&lt;!--T:4--&gt;
However, before you rush in, it is better to be prepared for the upgrade so that you can recover from any surprises. For example, do note that all files under ~/umbrel area are overwritten. Some online tutorials mistakenly recommended installing certain tools under ~/umbrel/apps area and they will be gone.

&lt;!--T:5--&gt;
If there is any custom code/application/things you want to save, keep them under ~/ or ~/mydir or ~/&lt;yourname&gt; area.


== Upgrade Check List == &lt;!--T:6--&gt;

&lt;!--T:7--&gt;
The following checklist can help you prepare for any unforeseen circumstances before you upgrade.

&lt;!--T:8--&gt;
# Take a Static Channel Backup
# Copy the output of &lt;code&gt; bos peers &lt;/code&gt; or your channel listings from [https://amboss.space/ amboss] so that you have a list of channels you have opened and local balances.
# Double check your 24-word seed for umbrel and any wallet passwords you have setup. Keep a safe backup.
# Make an upgrade area to safe keep some files. ssh to your node and &lt;p&gt; &lt;code&gt; cd ~ &lt;br /&gt; mkdir upgrade &lt;br /&gt; cd upgrade &lt;/code&gt;&lt;/p&gt;
# copy lnd.conf. Upgrade will overwrite it and you will need to re-do your customization again. With umbrel 0.4.1 lnd.conf is not overwritten but better safe than sorry &lt;p&gt;&lt;code&gt; cp ~/umbrel/lnd/lnd.conf ~/upgrade/ &lt;/code&gt;&lt;/p&gt;
# take a list of your watchtower peers so that you can add them again (if they are lost)&lt;p&gt;&lt;code&gt; ~/umbrel/bin/lncli wtclient towers | tee ~/upgrade/wtclienttowers.json&lt;/code&gt;&lt;/p&gt;
# Note down your running TMUX sessions, and bos telegram connect keys


== updrade == &lt;!--T:9--&gt;

&lt;!--T:10--&gt;
Follow the instructions to upgrade


== post upgrade == &lt;!--T:11--&gt;

&lt;!--T:12--&gt;
# make a general healthchecks of your channels, nodes, balances.
# compare the lnd.conf in upgrade directory with ~/umbrel/lnd/lnd.conf and repeat your customisation again. If only changes are your own changes, you can also replace the file with the one you saved before the upgrade. With umbrel 0.4.1 lnd.conf is not overwritten so you can only find new parameters added after upgrade if any.
# restart lnd &lt;code&gt; cd ~/umbrel ; docker-compose restart lnd; docker-compose ps &lt;/code&gt;
# compare your watch towers are still intact or else add them again. &lt;code&gt; ~/umbrel/bin/lncli wtclient towers &lt;/code&gt;
# reconnect bos telegram, streaming htlc, and any other services you run under TMUX
&lt;/translate&gt;</text>
      <sha1>r59w6sgmkrub4u5a4ao1i6z7ffw4but</sha1>
    </revision>
  </page>
  <page>
    <title>Upgrading Umbrel Node/en</title>
    <ns>0</ns>
    <id>953</id>
    <revision>
      <id>1487</id>
      <timestamp>2021-10-02T21:05:07Z</timestamp>
      <contributor>
        <username>FuzzyBot</username>
        <id>29</id>
      </contributor>
      <comment>Updating to match new version of source page</comment>
      <origin>1487</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="2466" sha1="maitmfh6j2lijympsbn70d6m6sgigj8" xml:space="preserve">&lt;languages/&gt;

== Intro ==

Every once in a while you may have to upgrade your node. When a new upgrade is available, your umbrel dashboard will show a message like this.

[[File:Umbrell upgrade.jpg|File:Umbrell upgrade.jpg]]

However, before you rush in, it is better to be prepared for the upgrade so that you can recover from any surprises. For example, do note that all files under ~/umbrel area are overwritten. Some online tutorials mistakenly recommended installing certain tools under ~/umbrel/apps area and they will be gone.

If there is any custom code/application/things you want to save, keep them under ~/ or ~/mydir or ~/&lt;yourname&gt; area.


== Upgrade Check List ==

The following checklist can help you prepare for any unforeseen circumstances before you upgrade.

# Take a Static Channel Backup
# Copy the output of &lt;code&gt; bos peers &lt;/code&gt; or your channel listings from [https://amboss.space/ amboss] so that you have a list of channels you have opened and local balances.
# Double check your 24-word seed for umbrel and any wallet passwords you have setup. Keep a safe backup.
# Make an upgrade area to safe keep some files. ssh to your node and &lt;p&gt; &lt;code&gt; cd ~ &lt;br /&gt; mkdir upgrade &lt;br /&gt; cd upgrade &lt;/code&gt;&lt;/p&gt;
# copy lnd.conf. Upgrade will overwrite it and you will need to re-do your customization again. With umbrel 0.4.1 lnd.conf is not overwritten but better safe than sorry &lt;p&gt;&lt;code&gt; cp ~/umbrel/lnd/lnd.conf ~/upgrade/ &lt;/code&gt;&lt;/p&gt;
# take a list of your watchtower peers so that you can add them again (if they are lost)&lt;p&gt;&lt;code&gt; ~/umbrel/bin/lncli wtclient towers | tee ~/upgrade/wtclienttowers.json&lt;/code&gt;&lt;/p&gt;
# Note down your running TMUX sessions, and bos telegram connect keys


== updrade ==

Follow the instructions to upgrade


== post upgrade ==

# make a general healthchecks of your channels, nodes, balances.
# compare the lnd.conf in upgrade directory with ~/umbrel/lnd/lnd.conf and repeat your customisation again. If only changes are your own changes, you can also replace the file with the one you saved before the upgrade. With umbrel 0.4.1 lnd.conf is not overwritten so you can only find new parameters added after upgrade if any.
# restart lnd &lt;code&gt; cd ~/umbrel ; docker-compose restart lnd; docker-compose ps &lt;/code&gt;
# compare your watch towers are still intact or else add them again. &lt;code&gt; ~/umbrel/bin/lncli wtclient towers &lt;/code&gt;
# reconnect bos telegram, streaming htlc, and any other services you run under TMUX</text>
      <sha1>maitmfh6j2lijympsbn70d6m6sgigj8</sha1>
    </revision>
  </page>
  <page>
    <title>Using Charge-Lnd to Adjust HTLC Limits</title>
    <ns>0</ns>
    <id>954</id>
    <revision>
      <id>1519</id>
      <parentid>1516</parentid>
      <timestamp>2021-10-06T17:56:30Z</timestamp>
      <contributor>
        <username>VS</username>
        <id>18</id>
      </contributor>
      <origin>1519</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="1538" sha1="nct0692jttxoali0k7f52p2e0h51oj7" xml:space="preserve">A maximum htlc setting can be used to limit the amount of outbound liquidity that can pass through a channel, subject to channel outbound liquidity. This can be a good thing, because when someone tries to forward a payment through one of your channels, but that channel doesn't have enough liquidity, it will cause a payment failure at your node. If your node gets a lot of payment failures it may affect your node's reliability reputation in the network. By setting max-htlc limits so that your channels are only considered when they have enough liquidity to handle the payment, it can reduce the number of failures your node experiences, and improve the lightning network as a whole.

Note that max-htlc settings don't limit the amount of incoming liquidity a channel can receive, which is good. Incoming liquidity is not what causes failures on your node, and it also allows for your locally depleted channels to have liquidity flow back into them without any issue, despite low maximum htlcs.

Charge-Lnd can be used to automatically adjust your max-htlc limits on your channels. Today it is not possible to set up in the main configuration file along with the fees and there is an [https://github.com/accumulator/charge-lnd/issues/48 open issue report] for that. However the following workaround can be done to set up max-htlc.

You can use special fork of charge-lnd to set max_htlc_msat = local balance. [https://plebnet.wiki/wiki/Fees_And_Profitability#Using_Charge-Lnd_to_set_Maximum_HTLCs See here for installation instructions]</text>
      <sha1>nct0692jttxoali0k7f52p2e0h51oj7</sha1>
    </revision>
  </page>
  <page>
    <title>Watchtowers</title>
    <ns>0</ns>
    <id>278</id>
    <revision>
      <id>723</id>
      <parentid>720</parentid>
      <timestamp>2021-09-29T11:02:03Z</timestamp>
      <contributor>
        <username>VS</username>
        <id>18</id>
      </contributor>
      <origin>723</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="377" sha1="kzvgevvyphr7vfg4wv4fsgtfr5imu7q" xml:space="preserve">This page looks incomplete. Check here [https://plebnet.wiki/wiki/LND_Configuration_Settings#Watch_Tower_Settings for detailed watchtower page]
This page is a STUB.

Setting up a Watchtower:

Node A:

    lncli tower info

Then send the URI to node B.

Once node B sends you their URI:

    lncli wtclient add &lt;URI&gt;

Finally to list your watchtowers:

    lncli wtclient towers</text>
      <sha1>kzvgevvyphr7vfg4wv4fsgtfr5imu7q</sha1>
    </revision>
  </page>
  <page>
    <title>Welcome to Plebnet</title>
    <ns>0</ns>
    <id>20</id>
    <revision>
      <id>2205</id>
      <parentid>2204</parentid>
      <timestamp>2021-12-30T03:08:36Z</timestamp>
      <contributor>
        <username>D++</username>
        <id>31</id>
      </contributor>
      <origin>2205</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="9494" sha1="hj6iyph4ez0sadj2jssw6keqeerg59m" xml:space="preserve">&lt;languages/&gt;
&lt;translate&gt;
&lt;!--T:1--&gt;
Hopefully this can be a guide for people wondering where to start, and what really is plebnet? 
	First, plebnet, this crazy awesome community, was started by a group of selfless, generous plebs working together to onboard people to the bitcoin lightning network!  Constantly evolving, the goal remains:  bring people together to understand and support the lightning network, learn from each other the basics of running a node or using a lightning wallet, and bridge the gap that remains between the tech/cyber world and the everyday user.  
	
More on the plebnet infrastructure will be addressed below, but first I will attempt to answer some of the common questions people pose to the group when first joining, as well with some important tips.  

== PLEB TIPS THAT EVERYONE SHOULD KNOW == &lt;!--T:2--&gt;

&lt;!--T:3--&gt;
TRUST NO ONE

&lt;!--T:4--&gt;
THERE ARE RISKS WITH RUNNING A LIGHTNING NODE

&lt;!--T:5--&gt;
DO YOUR OWN RESEARCH

&lt;!--T:6--&gt;
LEARN FROM MISTAKES AND HELP OTHERS

&lt;!--T:7--&gt;
RUNNING A NODE IS NOT THE SAME AS MINING BITCOIN

== How did I get here? == &lt;!--T:8--&gt;

&lt;!--T:20--&gt;
I am unable to answer that question for you, but maybe you clicked on one of our links on Twitter? You may have also typed in kycjelly.com after hearing Walton’s wonderful voice proclaim it on Clubhouse... but really that is for you to figure out.

== Can I become a node operator? == &lt;!--T:9--&gt;

&lt;!--T:21--&gt;
I can speak with experience here - anyone can learn to operate a lightning node.  This does not mean that anyone can do it with ease, or that you will be able to run your node successfully and without risk.  You must be able to do your own research and actually do your own work.  Instead of posing questions like the one I am responding to here, maybe try asking: can someone point me to the best resources for someone interested in lightning, or interested in running a lightning node? 

== How much money can I make running a lightning node? How much are you making weekly? == &lt;!--T:10--&gt;

&lt;!--T:22--&gt;
Questions along these lines are tricky to answer and depend on too many variables for it to get a response.  Many of us running nodes are not currently profitable.  Our main purpose is learning, supporting the network, and refining ways to operate a healthy node not at a loss.  If you see a future on a bitcoin standard, there is a good chance everyone will be transacting on lightning.  Some people see their good channels and connections as an investment for years in the future.  There is no guarantee though that any node will be profitable now or at another time.  This answer is not meant to deter anyone, and we do have node runners that have become profitable recently, but they have put a serious amount of time, accounting, strategy, and capital in their nodes to get to where they are. Instead of looking at how much money you can make, you must understand your costs and income. To operate a node your costs are:

&lt;!--T:11--&gt;
* Capital Expense of purchasing hardware. You should probably write it off over the useful life of that hardware. Remember as you get hooked you will spend on upgrades, redundant infrastructure, and so on.
* Operating Costs outside your control:
** Cost of internet bandwidth and electricity (minimal but still there is a cost)
** Cost of opening and closing a channel. These depend on the on-chain mining costs at that time. It is possible to open a channel at 1 sat/vb at times but the price on-chain can change in the future.
** Cost of rebalancing if you need to do. Ideally, if you operate a good node there will be two-way traffic but still rebalancing is something one has to do once in a while and the cost is variable and determined by the network.
** Cost of buying inbound liquidity if you cannot source it from plebs.
** Cost of loop out and other services you might use to operate your node.

&lt;!--T:12--&gt;
You need to balance these costs against the only source of income which is your routing fees. You can set them very high but maybe no one will route through you. You can set them very low and you will not cover your cost(s). So this is a tight rope 3D chess you will play when you operate a node. It may not rain sats but it would sure be fun! 

== Can I open a channel with someone for X amount of sats? What is the best amount of sats to open a channel with? == &lt;!--T:13--&gt;

&lt;!--T:23--&gt;
The answer to this question is... it's a moving bar.  It also depends on what kind of node you want to operate, what amount of funds you have, and who you want to connect to.  I think there are ~3 broad categories of nodes in the lightning network 
	
# Profitable routing nodes: those that require a lot of management, capital, and skill 
# Middle ground nodes: a less defined group, nodes with a handful of decent-sized channels, good peers, and are great for supporting and expanding the network
# Personal use nodes:  nodes for people who want to have 1-2 good connections, the experience of understanding lightning and node running, and the ability to route personal transactions in or out of their node.  

&lt;!--T:16--&gt;
So after understanding these different node groups, the answer for a good channel size for a profitable routing node is different than a node with a different use case.  As of now many of the bigger routing nodes have set channel size minimums from around 2 million sats and up (some have minimums of 10 million sats!).  If you are just starting out, some PlebNet nodes that are great to connect to are [https://amboss.space/node/0381de1709efbda38f9afd2d47399caa19a2630c0c795acd24755efa442685fc7d Turgidson] &amp; [https://amboss.space/node/035f42b1c1cd8afe605f3fc1befc270844ec9885b7c53f713faa672869c25cb148 GirthMavic], any size channel 20k sats and up will work to connect with them.  

== Resources == &lt;!--T:24--&gt;

&lt;!--T:17--&gt;
Now back to the best parts of PlebNet: the resources shared, the pleb connections made, and the magic of the Lightning network!  A lot of questions people ask may be answered, and resources can be found with a quick look at the pinned posts, the PlebNet wikis, or in the PlebNet telegram:  

&lt;!--T:18--&gt;
* https://plebnet.wiki
* https://library.plebnet.org		

== Please contribute if you are able == &lt;!--T:25--&gt;


&lt;!--T:27--&gt;
Plebs just like you are volunteering their time and expertise to help the next pleb.  This is probably my favorite thing about PlebNet - seeing someone who joined a week ago jump in to help out a new pleb and answer their questions is really amazing.  The three links above will most likely lead you to anything you are looking for, including a list of Lightning-related telegram groups (support chats for Raspiblitz, BOS, and Umbrel for example), and many more gems of knowledge.  If you are still stumped and want to ask in PlebNet, we are lucky to have the entire range of lightning user: literally, plebs that are developing on lightning, to a pleb with a fashion design background, oh and some pretty well-known champions of bitcoin as well 😉.  I am fairly confident in saying that, at this time, it is the best hub of connections and resources for the lightning network. 

	
== PlebNet infrastructure == &lt;!--T:19--&gt;

&lt;!--T:26--&gt;
As PlebNet has grown, we have evolved, and adjusted, and reinvented into what we are today.  Currently, we have 7 different tiers of telegram groups for different purposes:

 
&lt;!--T:28--&gt;
* [https://t.me/CHLNgroup PlebNet - LIGHTNING 101]: Fantastic with onboarding users to custodial Lightning, and helping people make their first transactions on the lightning network.  People may get their minds blown by the speed and cheap fees that are a product of the Lightning network.
* [https://t.me/plebnet PlebNet]: The largest PlebNet group, with a super amazing graph/web of plebs, where resources flow and friends are made!
* PlebNet // NODERUNNERS:  This group is a little smaller and focused on those who have gotten their node up and running and have a few channels, aka have made the steps beyond the initial set up a node, and are ready to talk a little more serious about node running.  If you think you are ready, give a shoutout to [https://telegram.me/AEHW1 @AEHW1] to add you over to this group. Checklist:
# Use Telegram user id,
# Claim your node with @CheeseRobot,
# Announce the node in Plebnet,
# Enable group invites in your Telegram settings.
* PlebNet Advanced: This group is specifically focused on the development of the network and tools for routing and network optimization.  Think super technical mumbojumbo and people creating and troubleshooting tools that could one day we could all be using for our nodes, who knows!
* [https://t.me/Pleb2Salvador #Plebs2Salvador]: This group was created to build endless chains of 69 to celebrate the day El Salvador adopted BTC as legal currency. The chain is still ongoing and it is a nice side group for new node runners. You receive a channel from a previous peer and you commit to open a 1m or higher channel to your next peer. No maximum, 21 69 420 sats girth preferred. 
* [http://es.plebnet.org PlebNet Español]: Focused on Spanish-speaking people interested in learning about Lightning and setting up a node.
* [https://t.me/plebnetbusiness PlebNet for Business]: Where businesses learn about Lightning and setting up nodes for their business.



&lt;!--T:29--&gt;
There are also [[Special:MyLanguage/Local PlebNet groups|local PlebNet groups]] organizing in-person events in their city/country. Feel free to join them as well!
&lt;/translate&gt;</text>
      <sha1>hj6iyph4ez0sadj2jssw6keqeerg59m</sha1>
    </revision>
  </page>
  <page>
    <title>Welcome to Plebnet/en</title>
    <ns>0</ns>
    <id>947</id>
    <revision>
      <id>2054</id>
      <parentid>2034</parentid>
      <timestamp>2021-10-24T10:11:37Z</timestamp>
      <contributor>
        <username>FuzzyBot</username>
        <id>29</id>
      </contributor>
      <comment>Updating to match new version of source page</comment>
      <origin>2054</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="9127" sha1="j6j16893tkaxxloace3g50n1e76hkss" xml:space="preserve">&lt;languages/&gt;
Hopefully this can be a guide for people wondering where to start, and what really is plebnet? 
	First, plebnet, this crazy awesome community, was started by a group of selfless, generous plebs working together to onboard people to the bitcoin lightning network!  Constantly evolving, the goal remains:  bring people together to understand and support the lightning network, learn from each other the basics of running a node or using a lightning wallet, and bridge the gap that remains between the tech/cyber world and the everyday user.  
	
More on the plebnet infrastructure will be addressed below, but first I will attempt to answer some of the common questions people pose to the group when first joining, as well with some important tips.  

== PLEB TIPS THAT EVERYONE SHOULD KNOW ==

TRUST NO ONE

THERE ARE RISKS WITH RUNNING A LIGHTNING NODE

DO YOUR OWN RESEARCH

LEARN FROM MISTAKES AND HELP OTHERS

RUNNING A NODE IS NOT THE SAME AS MINING BITCOIN

== How did I get here? ==

I am unable to answer that question for you, but maybe you clicked on one of our links on Twitter? You may have also typed in kycjelly.com after hearing Walton’s wonderful voice proclaim it on Clubhouse... but really that is for you to figure out.

== Can I become a node operator? ==

I can speak with experience here - anyone can learn to operate a lightning node.  This does not mean that anyone can do it with ease, or that you will be able to run your node successfully and without risk.  You must be able to do your own research and actually do your own work.  Instead of posing questions like the one I am responding to here, maybe try asking:  Can someone point me to the best resources for someone interested in lightning, or interested in running a lightning node? 

== How much money can I make running a lightning node? How much are you making weekly? ==

Questions along these lines are tricky to answer and depend on too many variables for it to get a response.  Many of us running nodes are not currently profitable.  Our main purpose is learning, supporting the network, and refining ways to operate a healthy node not at a loss.  If you see a future on a bitcoin standard, there is a good chance everyone will be transacting on lightning.  Some people see their good channels and connections as an investment for years in the future.  There is no guarantee though that any node will be profitable now or at another time.  This answer is not meant to deter anyone, and we do have node runners that have become profitable recently, but they have put a serious amount of time, accounting, strategy, and capital in their nodes to get to where they are. Instead of looking at how much money you can make, you must understand your costs and income. To operate a node your costs are:

* Capital Expense of purchasing hardware. You should probably write it off over the useful life of that hardware. Remember as you get hooked you will spend on upgrades, redundant infrastructure, and so on.
* Operating Costs outside your control:
** Cost of internet bandwidth and electricity (minimal but still there is a cost)
** Cost of opening and closing a channel. These depend on the on-chain mining costs at that time. It is possible to open a channel at 1 sat/vb at times but the price on-chain can change in the future.
** Cost of rebalancing if you need to do. Ideally, if you operate a good node there will be two-way traffic but still rebalancing is something one has to do once in a while and the cost is variable and determined by the network.
** Cost of buying inbound liquidity if you cannot source it from plebs.
** Cost of loop out and other services you might use to operate your node.

You need to balance these costs against the only source of income which is your routing fees. You can set them very high but maybe no one will route through you. You can set them very low and you will not cover your cost(s). So this is a tight rope 3D chess you will play when you operate a node. It may not rain sats but it would sure be fun! 

== Can I open a channel with someone for X amount of sats? What is the best amount of sats to open a channel with? ==

The answer to this question is... it's a moving bar.  It also depends on what kind of node you want to operate, what amount of funds you have, and who you want to connect to.  I think there are ~3 broad categories of nodes in the lightning network 
	
# Profitable routing nodes: those that require a lot of management, capital, and skill 
# Middle ground nodes: a less defined group, nodes with a handful of decent-sized channels, good peers, and are great for supporting and expanding the network
# Personal use nodes:  nodes for people who want to have 1-2 good connections, the experience of understanding lightning and node running, and the ability to route personal transactions in or out of their node.  

So after understanding these different node groups, the answer for a good channel size for a profitable routing node is different than a node with a different use case.  As of now many of the bigger routing nodes have set channel size minimums from around 2 million sats and up (some have minimums of 10 million sats!).  If you are just starting out, some PlebNet nodes that are great to connect to are [https://amboss.space/node/0381de1709efbda38f9afd2d47399caa19a2630c0c795acd24755efa442685fc7d Turgidson] &amp; [https://amboss.space/node/035f42b1c1cd8afe605f3fc1befc270844ec9885b7c53f713faa672869c25cb148 GirthMavic], any size channel 20k sats and up will work to connect with them.  

== Resources ==

Now back to the best parts of PlebNet: the resources shared, the pleb connections made, and the magic of the Lightning network!  A lot of questions people ask may be answered, and resources can be found with a quick look at the pinned posts, the PlebNet wikis, or in the PlebNet telegram:  

* https://plebnet.wiki
* https://library.plebnet.org		

== Please contribute if you are able ==


Plebs just like you are volunteering their time and expertise to help the next pleb.  This is probably my favorite thing about PlebNet - seeing someone who joined a week ago jump in to help out a new pleb and answer their questions is really amazing.  The three links above will most likely lead you to anything you are looking for, including a list of Lightning-related telegram groups (support chats for Raspiblitz, BOS, and Umbrel for example), and many more gems of knowledge.  If you are still stumped and want to ask in PlebNet, we are lucky to have the entire range of lightning user: literally, plebs that are developing on lightning, to a pleb with a fashion design background, oh and some pretty well-known champions of bitcoin as well 😉.  I am fairly confident in saying that, at this time, it is the best hub of connections and resources for the lightning network. 

	
== PlebNet infrastructure ==

As PlebNet has grown, we have evolved, and adjusted, and reinvented into what we are today.  Currently, we have 7 different tiers of telegram groups for different purposes:

 
* [https://t.me/CHLNgroup PlebNet - LIGHTNING 101]: Fantastic with onboarding users to custodial Lightning, and helping people make their first transactions on the lightning network.  People may get their minds blown by the speed and cheap fees that are a product of the Lightning network.
* [https://t.me/plebnet PlebNet]: The largest PlebNet group, with a super amazing graph/web of plebs, where resources flow and friends are made!
* PlebNet // NODERUNNERS:  This group is a little smaller and focused on those who have gotten their node up and running and have a few channels, aka have made the steps beyond the initial set up a node, and are ready to talk a little more serious about node running.  If you think you are ready, give a shoutout to @AEHW1 to add you over to this group. Checklist:
# Use Telegram user id,
# Claim your node with @CheeseRobot,
# Announce the node in Plebnet,
# Enable group invites in your Telegram settings.
* PlebNet Advanced: This group is specifically focused on the development of the network and tools for routing and network optimization.  Think super technical mumbojumbo and people creating and troubleshooting tools that could one day we could all be using for our nodes, who knows!
* [https://t.me/Pleb2Salvador #Plebs2Salvador]: This group was created to build endless chains of 69 to celebrate the day El Salvador adopted BTC as legal currency. The chain is still ongoing and it is a nice side group for new node runners. You receive a channel from a previous peer and you commit to open a 1m or higher channel to your next peer. No maximum, 21 69 420 sats girth preferred. 
* [http://es.plebnet.org PlebNet Español]: Focused on Spanish-speaking people interested in learning about Lightning and setting up a node.
* [https://t.me/plebnetbusiness PlebNet for Business]: Where businesses learn about Lightning and setting up nodes for their business.



There are also [[Special:MyLanguage/Local PlebNet groups|local PlebNet groups]] organizing in-person events in their city/country. Feel free to join them as well!</text>
      <sha1>j6j16893tkaxxloace3g50n1e76hkss</sha1>
    </revision>
  </page>
  <page>
    <title>Welcome to Plebnet/es</title>
    <ns>0</ns>
    <id>903</id>
    <revision>
      <id>2050</id>
      <parentid>2046</parentid>
      <timestamp>2021-10-24T10:09:40Z</timestamp>
      <contributor>
        <username>FuzzyBot</username>
        <id>29</id>
      </contributor>
      <comment>Updating to match new version of source page</comment>
      <origin>2050</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="16601" sha1="6cn87ow9qeopz349wrmgz5v1yhjxt1p" xml:space="preserve">&lt;languages/&gt;
Espero que esto pueda ser una guía para la gente que se pregunta por dónde empezar, y qué es realmente plebnet? 
	En primer lugar, plebnet, esta increíble comunidad, fue iniciada por un grupo de plebeyos desinteresados y generosos que trabajan juntos para incorporar a la gente a la Bitcoin Lightning Network.  En constante evolución, el objetivo sigue siendo: reunir a la gente para que entienda y apoye la red lightning, aprender unos de otros los fundamentos de la gestión de un nodo o del uso de un monedero Lightning, y cerrar la brecha que sigue existiendo entre el mundo tech/cyber y el usuario cotidiano.  
	
Más adelante se hablará de la infraestructura de la plebnet, pero primero intentaré responder a algunas de las preguntas comunes que la gente plantea al grupo cuando se une por primera vez, así como a algunos consejos importantes.  

&lt;div class="mw-translate-fuzzy"&gt;
'''CONSEJOS DE LA PLEBE QUE TODO EL MUNDO DEBERÍA SABER:'''
&lt;/div&gt;

NO CONFÍES EN NADIE

HAY RIESGOS EN OPERAR UN NODO LIGHTNING

DO YOUR OWN RESEARCH - INVESTIGUE USTED MISMO

APRENDA CON TUS ERRORES Y AYUDA A LOS DEMÁS

EJECUTAR UN NODO NO ES LO MISMO QUE MINAR BITCOIN

&lt;div class="mw-translate-fuzzy"&gt;
*¿Cómo he llegado hasta aquí? - No puedo responder a esa pregunta, pero tal vez hiciste clic en uno de nuestros enlaces en Twitter. También es posible que hayas tecleado es.kycjelly.com o es.plebnet.org después de escuchar sobre plebnet en Clubhouse o Twitter Spaces... pero en realidad eso lo tienes que averiguar tú.
&lt;/div&gt;

&lt;div lang="en" dir="ltr" class="mw-content-ltr"&gt;
I am unable to answer that question for you, but maybe you clicked on one of our links on Twitter? You may have also typed in kycjelly.com after hearing Walton’s wonderful voice proclaim it on Clubhouse... but really that is for you to figure out.
&lt;/div&gt;

&lt;div class="mw-translate-fuzzy"&gt;
*¿Puedo convertirme en operador de nodos? - Puedo hablar con experiencia: cualquiera puede aprender a operar un nodo Lightning.  Esto no significa que cualquiera pueda hacerlo con facilidad, o que usted será capaz de operar su nodo con éxito y sin riesgo.  Debes ser capaz de hacer tu propia investigación y hacer tu propio trabajo.  En lugar de plantear preguntas como la que estoy respondiendo aquí, tal vez intente preguntar:  ¿Puede alguien indicarme los mejores recursos para alguien interesado en lightning, o interesado en ejecutar un nodo lightning?
&lt;/div&gt;

&lt;div lang="en" dir="ltr" class="mw-content-ltr"&gt;
I can speak with experience here - anyone can learn to operate a lightning node.  This does not mean that anyone can do it with ease, or that you will be able to run your node successfully and without risk.  You must be able to do your own research and actually do your own work.  Instead of posing questions like the one I am responding to here, maybe try asking:  Can someone point me to the best resources for someone interested in lightning, or interested in running a lightning node?
&lt;/div&gt; 

&lt;div class="mw-translate-fuzzy"&gt;
*¿Cuánto dinero puedo ganar operando un nodo lighting?  ¿Cuánto ganas semanalmente?  - Las preguntas de este tipo son difíciles de responder y dependen de demasiadas variables como para obtener una respuesta.  Muchos de los que dirigimos nodos no somos actualmente rentables.  Nuestro principal objetivo es aprender, apoyar a la red y perfeccionar las formas de operar un nodo saludable que no tenga pérdidas.  Si ves un futuro en un estándar de bitcoin, es muy probable que todo el mundo realice transacciones en lightning.  Algunas personas ven sus buenos canales y conexiones como una inversión para años en el futuro.  Sin embargo, no hay garantía de que ningún nodo sea rentable ahora o en otro momento.  Esta respuesta no pretende disuadir a nadie, y tenemos corredores de nodos que se han vuelto rentables recientemente, pero han puesto una cantidad seria de tiempo, contabilidad, estrategia y capital en sus nodos para llegar a donde están. En lugar de mirar cuánto dinero puedes hacer, debes entender tus costes e ingresos. Para operar un nodo, sus costes son
&lt;/div&gt;

&lt;div lang="en" dir="ltr" class="mw-content-ltr"&gt;
Questions along these lines are tricky to answer and depend on too many variables for it to get a response.  Many of us running nodes are not currently profitable.  Our main purpose is learning, supporting the network, and refining ways to operate a healthy node not at a loss.  If you see a future on a bitcoin standard, there is a good chance everyone will be transacting on lightning.  Some people see their good channels and connections as an investment for years in the future.  There is no guarantee though that any node will be profitable now or at another time.  This answer is not meant to deter anyone, and we do have node runners that have become profitable recently, but they have put a serious amount of time, accounting, strategy, and capital in their nodes to get to where they are. Instead of looking at how much money you can make, you must understand your costs and income. To operate a node your costs are:
&lt;/div&gt;

&lt;div class="mw-translate-fuzzy"&gt;
** Gasto de capital de la compra de hardware. Probablemente deberías amortizarlo a lo largo de la vida útil de ese hardware. Recuerde que a medida que se enganche gastará en actualizaciones, infraestructura redundante, etc.
** Costes de funcionamiento que están fuera de tu control
*** Coste de de banda de Internet y de la electricidad (mínimo, pero aún así hay un coste).
*** Coste de abrir y cerrar un canal. Estos dependen de los costes de minería en la blockchain en ese momento. Es posible abrir un canal a 1 sat/vb a veces, pero el precio en la cadena puede cambiar en el futuro.
*** Coste de rebalanceo si necesitas hacerlo. Idealmente, si operas un buen nodo habrá tráfico bidireccional pero aún así el rebalanceo es algo que hay que hacer de vez en cuando y el coste es variable y está determinado por la red.
*** El coste de comprar inbound liquidity si no puedes obtenerla de la plebe.
*** El coste de los loop outs y otros servicios que puedas utilizar para operar tu nodo.
&lt;/div&gt;

Tienes que equilibrar estos costes con la única fuente de ingresos que son tus fees de enrutamiento. Puede fijarlas muy altas, pero puede que nadie se dirija a usted. Puedes ponerlas muy bajas y no cubrirás tus costes. Así que se trata de una cuerda floja de ajedrez en 3D que se juega cuando se opera un nodo. Puede que no llueva sats, pero seguro que será divertido. 

&lt;div class="mw-translate-fuzzy"&gt;
*¿Puedo abrir un canal con alguien por X cantidad de sats?  O ¿cuál es la mejor cantidad de sats para abrir un canal? - La respuesta a esta pregunta es... es una barra móvil.  También depende del tipo de nodo que quieras operar, de la cantidad de fondos que tengas y de con quién quieras conectarte.  Creo que hay unas 3 grandes categorías de nodos en la red lightning 
	
1) nodos de enrutamiento rentables: los que requieren mucha gestión, capital y habilidad
&lt;/div&gt;

&lt;div lang="en" dir="ltr" class="mw-content-ltr"&gt;
The answer to this question is... it's a moving bar.  It also depends on what kind of node you want to operate, what amount of funds you have, and who you want to connect to.  I think there are ~3 broad categories of nodes in the lightning network 
	
# Profitable routing nodes: those that require a lot of management, capital, and skill 
# Middle ground nodes: a less defined group, nodes with a handful of decent-sized channels, good peers, and are great for supporting and expanding the network
# Personal use nodes:  nodes for people who want to have 1-2 good connections, the experience of understanding lightning and node running, and the ability to route personal transactions in or out of their node.
&lt;/div&gt;  

&lt;div class="mw-translate-fuzzy"&gt;
Así que después de entender estos diferentes grupos de nodos, la respuesta para un buen tamaño de canal para un nodo de enrutamiento rentable es diferente a un nodo con un caso de uso diferente.  En la actualidad, muchos de los nodos de enrutamiento más grandes han establecido un tamaño mínimo de canal de alrededor de 2 millones de sats y más (¡algunos tienen un mínimo de 10 millones de sats!).  Si estás empezando, algunos nodos de plebnet que son excelentes para conectarse son [https://amboss.space/node/0381de1709efbda38f9afd2d47399caa19a2630c0c795acd24755efa442685fc7d Turgidson] y [https://amboss.space/node/035f42b1c1cd8afe605f3fc1befc270844ec9885b7c53f713faa672869c25cb148 GirthMavic], cualquier tamaño de canal de 20k sats y más funcionará para conectarse con ellos.
&lt;/div&gt;  

&lt;div lang="en" dir="ltr" class="mw-content-ltr"&gt;
== Resources ==
&lt;/div&gt;

&lt;div class="mw-translate-fuzzy"&gt;
Ahora volvamos a las mejores partes de plebnet: los recursos compartidos, las conexiones de la pleb y la magia de lightning network.  Muchas de las preguntas que la gente hace pueden ser respondidas, y los recursos pueden ser encontrados con un rápido vistazo a los posts fijados, los wikis de plebnet, o en el telegram de plebnet:
&lt;/div&gt;  

&lt;div class="mw-translate-fuzzy"&gt;
https://plebnet.wiki  https://library.plebnet.org
&lt;/div&gt;		

&lt;div lang="en" dir="ltr" class="mw-content-ltr"&gt;
== Please contribute if you are able ==
&lt;/div&gt;


&lt;div lang="en" dir="ltr" class="mw-content-ltr"&gt;
Plebs just like you are volunteering their time and expertise to help the next pleb.  This is probably my favorite thing about PlebNet - seeing someone who joined a week ago jump in to help out a new pleb and answer their questions is really amazing.  The three links above will most likely lead you to anything you are looking for, including a list of Lightning-related telegram groups (support chats for Raspiblitz, BOS, and Umbrel for example), and many more gems of knowledge.  If you are still stumped and want to ask in PlebNet, we are lucky to have the entire range of lightning user: literally, plebs that are developing on lightning, to a pleb with a fashion design background, oh and some pretty well-known champions of bitcoin as well 😉.  I am fairly confident in saying that, at this time, it is the best hub of connections and resources for the lightning network.
&lt;/div&gt; 

	
&lt;div class="mw-translate-fuzzy"&gt;
*¡Por favor, contribuya si puede!  Los plebeyos como tú están ofreciendo su tiempo y experiencia para ayudar al siguiente plebeyo.  Esto es probablemente lo que más me gusta de plebnet - ver a alguien que se unió hace una semana para ayudar a un nuevo pleb y responder a sus preguntas es realmente increíble.  Los tres links anteriores probablemente te llevarán a cualquier cosa que busques, incluyendo una lista de grupos de telegram relacionados con lightning (chats de apoyo para raspiblitz, bos y umbrel, por ejemplo), y muchas más joyas de conocimiento.  Si todavía estás perplejo y quieres preguntar en plebnet, tenemos la suerte de contar con un montón usuarios de lightning: literalmente, plebeyos que están desarrollando en lightning, hasta un plebeyo con formación en diseño de moda, oh y algunos campeones de bitcoin bastante conocidos también 😉.  Estoy bastante seguro de decir que, en este momento, es el mejor centro de conexiones y recursos para la red lightning. 

Infraestructura de Plebnet: a medida que plebnet ha crecido, hemos evolucionado, y nos hemos ajustado, y reinventado en lo que somos hoy.  Actualmente tenemos 7 niveles diferentes de grupos de telegramas para diferentes propósitos:

*PLEBNET - LIGHTNING 101: https://t.me/CHLNgroup este grupo es fantástico con el onboarding de los usuarios a lightning custodial, y ayudando a la gente a hacer sus primeras transacciones en la red lightning.  La gente puede quedar boquiabierta por la velocidad y las tarifas baratas que son producto de la red lightning. (Las charlas en ese grupo son en inglés, una buena alternativa a ese grupo si solo hablas español es https://t.me/lightning_network_spanish)
*PLEBNET: https://t.me/plebnet este es el lugar. El grupo más grande de plebnet, con un gráfico/red súper increíble de plebs, ¡donde los recursos fluyen y se hacen amigos! (Las charlas en ese grupo son en inglés)
*PLEBNET // NODERUNNERS:  Este grupo es un poco más pequeño y se centra en aquellos que ya están operando sus nodo y tienen algunos canales, es decir, han hecho los pasos más allá de la configuración inicial de un nodo, y están listos para hablar un poco más en serio sobre el funcionamiento del nodo.  Si crees que estás listo, dale un grito a @AEHW1 para que te agregue a este grupo. Lista de comprobación 1. Tenga un id de usuario de telegram 2. Reclama tu nodo con @CheeseRobot 3. Anuncia el nodo en Plebnet. 4. Habilita el Group Invite en la configuración de tu TG o suma @AEHW1 a sus contactos. (Las charlas en ese grupo son en inglés, una buena alternativa a ese grupo si solo hablas español es el grupo de Latinodos. Para sumarse a ese grupo, siga las mismas reglas, pero contacta a @Professor_der en lugar de @AEHW1)
*PLEBNET AVANZADO:  Este grupo se centra específicamente en el desarrollo de la red y las herramientas para el enrutamiento y la optimización de la red.  Piensa en un mumbojumbo supertécnico y en gente que crea y resuelve problemas con herramientas que un día todos podríamos usar para nuestros nodos, ¡quién sabe! (Las charlas en ese grupo son en inglés)
*[https://t.me/Pleb2Salvador #Plebs2Salvador]: Este grupo fue creado para construir cadenas interminables de 69 para celebrar el día en que El Salvador adoptó BTC como moneda legal. La cadena sigue en marcha y es un buen grupo paralelo para los nuevos corredores de nodos. Recibes un canal del peer anterior y te comprometes a abrir un canal de 1m o superior a tu siguiente peer. No hay máximo, se prefiere un girth de 21 69 420 sats. (Las charlas en ese grupo son en inglés)
*PLEBNET Español: http://es.plebnet.org Este grupo está enfocado específicamente a personas de habla hispana interesadas en aprender sobre Lightning y montar un nodo.
*PLEBNET for BUSINESS: https://t.me/plebnetbusiness Este grupo es donde los negocios vienen a aprender sobre Lightning y a configurar nodos para sus negocios.
&lt;/div&gt;

&lt;div lang="en" dir="ltr" class="mw-content-ltr"&gt;
As PlebNet has grown, we have evolved, and adjusted, and reinvented into what we are today.  Currently, we have 7 different tiers of telegram groups for different purposes:
&lt;/div&gt;

 
&lt;div lang="en" dir="ltr" class="mw-content-ltr"&gt;
* [https://t.me/CHLNgroup PlebNet - LIGHTNING 101]: Fantastic with onboarding users to custodial Lightning, and helping people make their first transactions on the lightning network.  People may get their minds blown by the speed and cheap fees that are a product of the Lightning network.
* [https://t.me/plebnet PlebNet]: The largest PlebNet group, with a super amazing graph/web of plebs, where resources flow and friends are made!
* PlebNet // NODERUNNERS:  This group is a little smaller and focused on those who have gotten their node up and running and have a few channels, aka have made the steps beyond the initial set up a node, and are ready to talk a little more serious about node running.  If you think you are ready, give a shoutout to @AEHW1 to add you over to this group. Checklist:
# Use Telegram user id,
# Claim your node with @CheeseRobot,
# Announce the node in Plebnet,
# Enable group invites in your Telegram settings.
* PlebNet Advanced: This group is specifically focused on the development of the network and tools for routing and network optimization.  Think super technical mumbojumbo and people creating and troubleshooting tools that could one day we could all be using for our nodes, who knows!
* [https://t.me/Pleb2Salvador #Plebs2Salvador]: This group was created to build endless chains of 69 to celebrate the day El Salvador adopted BTC as legal currency. The chain is still ongoing and it is a nice side group for new node runners. You receive a channel from a previous peer and you commit to open a 1m or higher channel to your next peer. No maximum, 21 69 420 sats girth preferred. 
* [http://es.plebnet.org PlebNet Español]: Focused on Spanish-speaking people interested in learning about Lightning and setting up a node.
* [https://t.me/plebnetbusiness PlebNet for Business]: Where businesses learn about Lightning and setting up nodes for their business.
&lt;/div&gt;



&lt;div lang="en" dir="ltr" class="mw-content-ltr"&gt;
There are also [[Special:MyLanguage/Local PlebNet groups|local PlebNet groups]] organizing in-person events in their city/country. Feel free to join them as well!
&lt;/div&gt;</text>
      <sha1>6cn87ow9qeopz349wrmgz5v1yhjxt1p</sha1>
    </revision>
  </page>
  <page>
    <title>Welcome to Plebnet/fr</title>
    <ns>0</ns>
    <id>1076</id>
    <revision>
      <id>2052</id>
      <parentid>2047</parentid>
      <timestamp>2021-10-24T10:10:09Z</timestamp>
      <contributor>
        <username>ADssx</username>
        <id>38</id>
      </contributor>
      <comment>Created page with "Il y a aussi des [[Special:MyLanguage/Local PlebNet groups|groupes PlebNet locaux]] qui organisent des évènements en personne dans leur ville. Rejoignez-nous !"</comment>
      <origin>2052</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="8156" sha1="1yg3k3iax5bhy58we04xfi5bkp4duhk" xml:space="preserve">&lt;languages/&gt;
Ceci est un guide pour ceux qui se demandent ce qu'est PlebNet et où commencer.

PlebNet c'est une communauté géniale initiée par un groupe de plébéiens désintéressés qui voulaient travailler ensemble pour intégrer un maximum de gens sur Lightning.

Les objectifs de PlebNet sonts :
* Rassembler les utilisateurs du réseau Lightning,
* Améliorer la connaissance de Lighnting,
* Apprendre ensemble comment gérer un nœud (node) et utiliser un portemonnaie (wallet) Lightning,
* Vulgariser Lightning et réduire le fossé entre le monde tech et les utilisateurs lambda. 

Vous trouverez d'abord les questions les plus fréquentes ainsi que des conseils utiles, suivis d'informations sur l'infrastructure PlebNet plus bas.  

== CONSEILS ESSENTIELS QUE TOUT PLÉBÉIEN DOIT CONNAÎTRE ==

NE FAITES CONFIANCE À PERSONNE

GÉRER UN NŒUD LIGHTNING COMPORTE DES RISQUES

CHERCHEZ PAR VOUS-MÊME

APPRENEZ DE VOS ERREURS ET AIDEZ LES AUTRES

FAIRE TOURNER UN NŒUD N'EST PAS LA MÊME CHOSE QUE MINER DU BITCOIN

== Qu'est-ce que je fais ici ? ==

Nul ne peut répondre à cette question à votre place, mais peut-être que vous avez cliqué sur un de nos liens sur Twitter ?

== Comment faire tourner un nœud ? ==

Tout le monde peut gérer un nœud Lightning. Néanmoins, cela ne veut pas dire que c'est chose aisée ou bien que cela ne comporte aucun risque. Faites vos travail et évaluez les risques par vous-mêmes. Au lieu de poser des questions telle que celle-ci, essayez de trouver les meilleures ressources sur Lightning et la gestion d'un nœud. 

== Combien puis-je gagner en faisant tourner un nœud Lightning? Combien gagnez-vous par semaine ? ==

Difficile de répondre à ces questions car cela dépend de multiples variables. Beaucoup parmi nous font tourner leur nœud sans être profitable. Notre objectif est avant tout d'apprendre, d'aider le réseau et de déterminer le meilleur moyen de gérer un nœud sans perdre d'argent. Si pour vous le futur sera basé sur un étalon Bitcoin, alors cela signifie sûrement que les transactions passeront par Lightning. Certains voient leurs nœuds et canaux comme un investissement pour ce futur lointain. Néanmoins, il n'y a aucune garantie qu'un nœud peut être profitable, aujourd'hui ou dans le futur. Cette réponse n'a pas vocation à vous décourager et nous avons des utilisateurs qui parviennent à être rentables, mais ils ont investi beaucoup de leur temps et de leur capital dans leurs nœuds pour cela. Avant de savoir comment être profitable, vous devez comprendre les coûts et revenus. Pour faire tourner un nœud vos coûts sont :

* CAPEX (investissement) pour l'achat du matériel.
* Autres coûts hors de votre contrôle :
** Connexion internet et électricité (faible coût en général)
** Coût d'ouverture et de fermeture d'un canal. Ces coûts dépendent des coûts de minage au moment de la transaction. Il est parfois possible d'ouvrir un canal avec 1 sat/vb (la transaction prendra plus de temps à être confirmée) mais ce prix est susceptible de changer.
** Coût pour ré-équilibrer un canal (si vous en avez besoin). En général, quand vous gérez un nœud il y a des transactions dans les deux sense mais vous avez parfois besoin de rebalancer le canal, ce qui a un coût,
** Coût d'achat de liquidité entrante (inbound liquidity), si vous n'arrivez pas à en obtenir de la part d'autre plébéien,
** Coût des services de gestion de nœuds (loop out, etc.).

Vous devez mettre en regard ces coûts avec la seule et unique source de revenus potentielle : les frais de routage. Vous pouvez certes fixer des frais élevés mais personne ne voudra passer par votre nœud. Vous pouvez les fixer très faible mais cela ne couvrira pas vos coûts. Entre ceux deux extrêmes il y a une fine ligne pour faire tourner un nœud rentable. Les sats ne vont peut-être pas pleuvoir mais ça reste très drôle ! 

== Puis-je ouvrir un canal avec quelqu'un pour X sats ? Quel est le montant optimal pour ouvrir un canal ? ==

Réponse... ça dépend ! Ça dépend du type de nœud que vous voulez, des fonds dont vous disposez et d'avec qui vous voulez vous connecter. Il y a 3 grandes catégories de nœuds sur Lightning :

# Les nœuds profitables : ils requièrent beaucoup de management, de capital et de compétence,
# Les nœuds intermédiaire : groupe moins bien défini, ces nœuds un quelques canaux d'une taille décente, de bons pairs et sont super pour supporter et étendre le réseau Lightning
# Les nœuds à usage personnel : pour ceux qui veulent juste une ou deux bonnes connexions et qui veulent faire l'expérience de comprendre Lightning et de gérer un nœud et qui peuvent router leurs propres transactions depuis et vers leur nœud.  

La taille optimale d'un canal dépend de votre type de nœud. Les plus gros nœuds de routage ont des taille de canaux d'au moins 2 millions de sats (voire 10 millions de sats). Si vous venez de commencer, certains nœuds PlebNet comme [https://amboss.space/node/0381de1709efbda38f9afd2d47399caa19a2630c0c795acd24755efa442685fc7d Turgidson] et [https://amboss.space/node/035f42b1c1cd8afe605f3fc1befc270844ec9885b7c53f713faa672869c25cb148 GirthMavic] sont super pour se connecter : n'importe quelle taille de canal supérieure à 20 000 sats suffit pour s'y connecter.  

== Ressources ==

La meilleure partie de PlebNet : les ressources partagées, les connexions et la magie du réseau Lightning ! Beaucoup de réponses à vos questions se trouvent dans les réponses épinglées sur Telegram et le Wiki PlebNet :  

* https://plebnet.wiki
* https://library.plebnet.org		

== Contribuez si vous pouvez ! ==


Des plébéiens comme vous donnent de leur temps pour aider le reste de la plèbe. C'est la meilleure partie de PlebNet : quand quelqu'un qui est arrivé il y a tout juste une semaine se met à aider un nouveau. Les liens sur cette page sont des mines d'or d'information. Si vous ne trouvez toujours pas de réponse à votre question : demandez sur PlebNet, nous avons toute la gamme des utilisateurs Lightning, des développeurs pros aux simples amateurs pour qui c'est un passe-temps. PlebBet est le meilleur centre de connexions et de ressources sur le réseau Lightning. 

	
== L'infrastructure PlebNet ==

PlebNet a évolué et dispose aujourd'hui de 7 groupes Telegram, chacun avec un objectif différent :

 
* [https://t.me/CHLNgroup PlebNet - LIGHTNING 101]: Groupe fantastique pour faire découvrir Lightning et aider à réaliser votre première transaction sur le réseau Lightning.
* [https://t.me/plebnet PlebNet]: Le groupe PlebNet le plus large, avec un superbe réseau de plébéiens et un nombre incalculable de ressources.
* PlebNet // NODERUNNERS: Ce plus petit groupe est réservé à ceux qui ont déjà un nœur avec quelques canaux et qui sont prêts pour des discussions plus sérieuses sur la gestion d'un nœud. Si vous pensez être prêt, envoyez un message à @AEHW1 sur Telegram en lui demandant de vous ajouter à ce groupe. Pour cela, il faut :
# Avoir défini un nom d'utilisateur sur Telegram,
# Réclamer votre nœud avec @CheeseRobot,
# Annoncer votre nœud sur le groupe général PlebNet,
# Autoriser les invitations de groupe dans vos paramètres Telegram.
* PlebNet Advanced: Ce groupe est destiné au développement du réseau et des outils de routage et d'optimisation.
* [https://t.me/Pleb2Salvador #Plebs2Salvador]: Ce groupe a vocation à créer une chaîne de nœud pour célébrer l'adoption du Bitcoin par le Salvador. Vous recevez un canal d'un pair et vous vous engagez à ouvrir un canal au pair suivant.
* [http://es.plebnet.org PlebNet Español]: Groupe pour les hispanophones qui veulent découvrir Lightning et gérer un nœud.
* [https://t.me/plebnetbusiness PlebNet for Business]: Là où les entreprises apprennent comment utiliser Lightning et mettre en place des nœuds pour leur activité professionnelle.



&lt;div class="mw-translate-fuzzy"&gt;
Il y a aussi des [[Special:MyLanguage/Local PlebNet groups|groupes PlebNet locaux]] qui organisent des évènements en personne dans leur ville. Rejoignez-nous !
&lt;/div&gt;</text>
      <sha1>1yg3k3iax5bhy58we04xfi5bkp4duhk</sha1>
    </revision>
  </page>
</mediawiki>
