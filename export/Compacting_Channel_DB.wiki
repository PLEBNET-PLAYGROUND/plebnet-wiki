<span id="compacting-channel-db"></span>
= Compacting Channel DB =

<div class="mw-parser-output">

The BOLT db, or channel.db, stores the entire history of payments processed by your LND node, including failed payments, failed htlcs from payments, and payment probes. The database is located at <code>~/umbrel/lnd/data/graph/mainnet/channel.db</code> on Umbrel.

The file continuously grows and may eventually exceed the available disk space and/or slow things down. 1GB or 2GB size is reasonable, but your node may begin to slow down when the file reaches 6 - 8Gb.

Monitor channel.db, compact &amp; prune it when needed. Pruning refers to marking payment records for deletion. Compaction refers to removing the marked records from the database and thus reducing its size.

<div id="toc" class="toc" role="navigation" aria-labelledby="mw-toc-heading">

<div class="toctitle" lang="en" dir="ltr">

<span id="mw-toc-heading"></span>
== Contents ==

<span class="toctogglespan"></span>

</div>
* [[#Monitor_channel.db_size|<span class="tocnumber">1</span> <span class="toctext">Monitor channel.db size</span>]]
* [[#Create_a_backup|<span class="tocnumber">2</span> <span class="toctext">Create a backup</span>]]
* [[#Enable_pruning|<span class="tocnumber">3</span> <span class="toctext">Enable pruning</span>]]
* [[#Prune_manually|<span class="tocnumber">4</span> <span class="toctext">Prune manually</span>]]
** [[#Clean_failed_payments|<span class="tocnumber">4.1</span> <span class="toctext">Clean failed payments</span>]]
** [[#Re-establish_channels_with_the_biggest_footprint|<span class="tocnumber">4.2</span> <span class="toctext">Re-establish channels with the biggest footprint</span>]]
* [[#Compact|<span class="tocnumber">5</span> <span class="toctext">Compact</span>]]


</div>
<span id="monitor-channel.db-size"></span>
== <span id="Monitor_channel.db_size" class="mw-headline">Monitor channel.db size</span> ==

Ways to monitor channel.db:

* periodically check the channel.db size by <code>ls -l &lt;channel.db path&gt;</code>.
* install [https://github.com/itsneski/lightning-jet#telegram-bot Lightning Jet telegram bot]; the bot will notify when channel.db grows over the threshold.
* run [https://github.com/itsneski/lightning-jet Lightning Jet] <code>jet monitor</code> or <code>jet channeldb</code> tools; the tools will show a warning when channel db grows over the threshold.

<span id="create-a-backup"></span>
== <span id="Create_a_backup" class="mw-headline">Create a backup</span> ==

Backup channel.db payments prior to pruning and compaction: <code>lncli listpayments &gt; listpayments.bak</code>. Place <code>listpayments.bak</code> in a backup folder under your home directory, e.g. <code>~/listpayments_backup</code>. Indicate current date in the file name, e.g. <code>listpayments.bak.2021.12.29</code>.

<span id="enable-pruning"></span>
== <span id="Enable_pruning" class="mw-headline">Enable pruning</span> ==

[[/plebnet.wiki/wiki/Special:MyLanguage/LND_Configuration_Settings#BOLT_Database_optimizations_.28channel.db.29|Update lnd.conf]] to enable automated pruning.

Note: in lnd14 [https://github.com/alexbosworth/balanceofsatoshis BalanceOfSatoshis] automatically prunes the obsolete channel.db records generated as part of payment probes.

<span id="prune-manually"></span>
== <span id="Prune_manually" class="mw-headline">Prune manually</span> ==

Prune manually when automated pruning is not able to sufficiently reduce the size of channel.db.

<span id="clean-failed-payments"></span>
=== <span id="Clean_failed_payments" class="mw-headline">Clean failed payments</span> ===

Ways to clean failed payments based on lnd version, <code>lncli -v</code>. Note: use this with caution and only when there is no other choice. Make sure to identify your version of lnd prior to calling any of the methods. Do not call a method multiple times in case of a failure. Message on Plebnet Noderunnes or Plebnet Advanced telegram groups in case of a failure.

* lnd13: [https://github.com/alexbosworth/balanceofsatoshis BalanceOfSatoshis] <code>bos delete-payments-history</code>. This command will delete all payments, including successful ones, use it with caution. Details [https://github.com/niteshbalusu11/BOS-Commands-Document#delete-payments-history here].
* lnd14: [https://github.com/alexbosworth/balanceofsatoshis BalanceOfSatoshis] <code>bos clean-failed-payments</code>. The command is safe to use as it only cleans failed payments.
* lnd13+: call [https://github.com/itsneski/lightning-jet Lightning Jet] <code>tools/prune-payments</code> tool; the tool will only remove failed payments &amp; htlcs (lnd13 and up).
* lnd13+: write a script to call [https://api.lightning.community/#deleteallpayments LND API DeleteAllPayments] ([https://github.com/itsneski/lightning-jet/blob/main/tools/prune-payments example of a JavaScript code]), with <code>failed_payments_only</code> and <code>failed_htlcs_only</code> set to true. Please note that the flags are supported in lnd13 and up, and are not supported in lnd12. Take extra caution before calling this method, as if called in lnd12 it'll remove all payments, including good ones.

<span id="re-establish-channels-with-the-biggest-footprint"></span>
=== <span id="Re-establish_channels_with_the_biggest_footprint" class="mw-headline">Re-establish channels with the biggest footprint</span> ===

Ways to identify channels with the biggest footprint:

* call [https://api.lightning.community/#listchannels lncli listchannels], the <code>num_updates</code> field indicates the number of channel state updates for a channel.
* [https://github.com/alexbosworth/balanceofsatoshis BalanceOfSatoshis] <code>bos &lt;alias/pubkey&gt;</code>.
* [https://github.com/itsneski/lightning-jet Lightning Jet] <code>jet list-channels</code> returns top 10 channels based on footprint.

Re-establish a channel(s) with the biggest footprint by closing the channel and creating a new one. Please note that there is a cost associated with closing and creating channels, so node operators should use this option carefully.

<span id="compact"></span>
== <span id="Compact" class="mw-headline">Compact</span> ==

Steps to enable and trigger compaction:

# [[/plebnet.wiki/wiki/Special:MyLanguage/LND_Configuration_Settings#BOLT_Database_optimizations_.28channel.db.29|Update lnd.conf]] to enable compaction.
# Make sure to have enough disk space to support compaction, or lnd may fail to start. Compaction makes a copy of channel.db during lnd restart.
# Delete <code>~/umbrel/lnd/data/graph/mainnet/channel.db.last-compacted</code> to trigger compaction on restart.
# Restart lnd: <code>cd ~/umbrelÂ ; docker-compose restart lnd; docker-compose ps</code>.


</div>
